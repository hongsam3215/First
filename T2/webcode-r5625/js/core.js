

/*                                                    
                +-`-:::::::::::::::::/::::::.          
          `::::/:-`                       `.:///      
          o.                                   /:     
        `o`                                     /-    
      -:/.                                       .:/- 
     :/    ``...-------:///+yyysyyssso++++++/:----.-s`
    /mhhddsoo+++++///::---..`````````````....-:+dmdhho
    .-::om`                                     d+.`` 
        .d`                                    `m-    
         -h`                                   y+     
          so `````......---://///////////::--./m      
          ydoooooooooooo+///-------:::://///+ohN`     
          hy.``                               /N      
           m`                                 +d      
           `m                                .N-      
            :`                               sy       
             d-                             :m`       
             m+                             +m        
             `h/                           .N-        
              :d.                          hs         
               m+                         .d:         
               -sdoossso+++-//+++oossooohy:.          
                `d-````.--:/::--..```` `y/            
                 d/                    `d:            
                 -d`                   /y             
                 `d-                  +h              
                  `y:                 os               
                   +h                h/               
                    so               os                
                    `+ssooossosososs/:.                 
*/

/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2014 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to compose bitmasks for wrapper metadata */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_FLAG = 4,
      CURRY_BOUND_FLAG = 8,
      PARTIAL_FLAG = 16,
      PARTIAL_RIGHT_FLAG = 32;

  /** Used as the size when optimizations are enabled for arrays */
  var LARGE_ARRAY_SIZE = 40;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var MAX_POOL_SIZE = 40;

  /** Used as the semantic version number */
  var version = '2.4.1';

  /** Used as the property name for wrapper metadata */
  var expando = '__lodash@' + version + '__';

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g;

  /** Used to match template delimiters */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to detect hexadecimal string values */
  var reHexPrefix = /^0[xX]/;

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout', 'TypeError', 'window', 'WinRTError'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for wrapper metadata */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /**
   * Used to convert characters to HTML entities.
   *
   * Note: Though the ">" character is escaped for symmetry, characters like
   * ">", "`", and "/" don't require escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value.
   * See [Mathias' article](http://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to convert HTML entities to characters */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` used to compare values and
   * sort them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} a The value to compare to `b`.
   * @param {*} b The value to compare to `a`.
   * @returns {number} Returns the sort order indicator for `a`.
   */
  function baseCompareAscending(a, b) {
    if (a !== b) {
      if (a > b || typeof a == 'undefined') {
        return 1;
      }
      if (a < b || typeof b == 'undefined') {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    return cache.has(value) ? 0 : -1;
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Gets the index of the first character of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length) {
      if (chars.indexOf(string.charAt(index)) < 0) {
        break;
      }
    }
    return index;
  }

  /**
   * Gets the index of the last character of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;
    while (index--) {
      if (chars.indexOf(string.charAt(index)) < 0) {
        break;
      }
    }
    return index;
  }

  /**
   * Used by `sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator for `a`.
   */
  function compareAscending(a, b) {
    return baseCompareAscending(a.criteria, b.criteria) || a.index - b.index;
  }

  /**
   * Used by `sortBy` to compare multiple properties of each element in a
   * collection and stable sort them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator for `a`.
   */
  function compareMultipleAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var result = baseCompareAscending(ac[index], bc[index]);
      if (result) {
        return result;
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provided the same value
    // for `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Used by `escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(match) {
    return htmlEscapes[match];
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'criteria': null,
      'index': 0,
      'value': null
    };
  }

  /**
   * Releases `array` back to the array pool.
   *
   * @private
   * @param {Array} array The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < MAX_POOL_SIZE) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases `object` back to the object pool.
   *
   * @private
   * @param {Object} object The object to release.
   */
  function releaseObject(object) {
    object.criteria = object.value = null;
    if (objectPool.length < MAX_POOL_SIZE) {
      objectPool.push(object);
    }
  }

  /**
   * A fallback implementation of `trim` to remove leading and trailing
   * whitespace or specified characters from `string`.
   *
   * @private
   * @param {string} string The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @returns {string} Returns the trimmed string.
   */
  function shimTrim(string, chars) {
    string = string == null ? '' : String(string);
    if (!string) {
      return string;
    }
    if (chars == null) {
      return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
    }
    chars = String(chars);
    return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
  }

  /**
   * A fallback implementation of `trimLeft` to remove leading whitespace or
   * specified characters from `string`.
   *
   * @private
   * @param {string} string The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @returns {string} Returns the trimmed string.
   */
  function shimTrimLeft(string, chars) {
    string = string == null ? '' : String(string);
    if (!string) {
      return string;
    }
    if (chars == null) {
      return string.slice(trimmedLeftIndex(string))
    }
    chars = String(chars);
    return string.slice(charsLeftIndex(string, chars));
  }

  /**
   * A fallback implementation of `trimRight` to remove trailing whitespace or
   * specified characters from `string`.
   *
   * @private
   * @param {string} string The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @returns {string} Returns the trimmed string.
   */
  function shimTrimRight(string, chars) {
    string = string == null ? '' : String(string);
    if (!string) {
      return string;
    }
    if (chars == null) {
      return string.slice(0, trimmedRightIndex(string) + 1)
    }
    chars = String(chars);
    return string.slice(0, charsRightIndex(string, chars) + 1);
  }

  /**
   * Gets the index of the first non-whitespace character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length) {
      var c = string.charCodeAt(index);
      if (!((c <= 160 && (c >= 9 && c <= 13) || c == 32 || c == 160) || c == 5760 || c == 6158 ||
          (c >= 8192 && (c <= 8202 || c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288 || c == 65279)))) {
        break;
      }
    }
    return index;
  }

  /**
   * Gets the index of the last non-whitespace character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;
    while (index--) {
      var c = string.charCodeAt(index);
      if (!((c <= 160 && (c >= 9 && c <= 13) || c == 32 || c == 160) || c == 5760 || c == 6158 ||
          (c >= 8192 && (c <= 8202 || c == 8232 || c == 8233 || c == 8239 || c == 8287 || c == 12288 || c == 65279)))) {
        break;
      }
    }
    return index;
  }

  /**
   * Used by `unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} match The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(match) {
    return htmlUnescapes[match];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references */
    var arrayRef = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to detect DOM support */
    var document = (document = context.window) && document.document;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        Set = isNative(Set = context.Set) && Set,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeContains = isNative(nativeContains = stringProto.contains) && nativeContains,
        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeTrim = isNative(nativeTrim = stringProto.trim) && !nativeTrim.call(whitespace) && nativeTrim,
        nativeTrimLeft = isNative(nativeTrimLeft = stringProto.trimLeft) && !nativeTrimLeft.call(whitespace) && nativeTrimLeft,
        nativeTrimRight = isNative(nativeTrimRight = stringProto.trimRight) && !nativeTrimRight.call(whitespace) && nativeTrimRight;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `constant`, `countBy`, `create`, `createCallback`,
     * `curry`, `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`,
     * `flatten`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
     * `forOwnRight`, `functions`, `groupBy`, `indexBy`, `initial`, `intersection`,
     * `invert`, `invoke`, `keys`, `map`, `mapValues`, `match`, `max`, `memoize`,
     * `merge`, `min`, `noop`, `object`, `omit`, `once`, `pairs`, `partial`,
     * `partialRight`, `pick`, `pluck`, `property`, `pull`, `push`, `range`,
     * `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`, `sortBy`,
     * `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`, `union`,
     * `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`, `xor`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `capitalize`, `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`,
     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`,
     * `identity`, `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`,
     * `isElement`, `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`,
     * `isNull`, `isNumber`, `isObject`, `isPlainObject`, `isRegExp`, `isString`,
     * `isUndefined`, `join`, `lastIndexOf`, `mixin`, `noConflict`, `now`,
     * `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `result`, `shift`,
     * `size`, `some`, `sortedIndex`, `runInContext`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first`, `last`, and `sample` return wrapped values
     * when `n` is provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} [chainAll=false] A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * Detect if the DOM is supported.
     *
     * @memberOf _.support
     * @type boolean
     */
    try {
      support.dom = document.createDocumentFragment().nodeType === 11;
    } catch(e) {
      support.dom = false;
    }

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} data The metadata array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(data) {
      var func = data[0],
          thisArg = data[3],
          partialArgs = data[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setData(bound, data);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? baseEach : baseForOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for environments without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var data = func[expando];
      if (typeof data == 'undefined') {
        if (support.funcNames) {
          data = !func.name;
        }
        data = data || !support.funcDecomp;
        if (!data) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            data = !reFuncName.test(source);
          }
          if (!data) {
            // checks if `func` references the `this` keyword and stores the result
            data = reThis.test(source);
            setData(func, data);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (data === false || (data !== true && data[1] & BIND_FLAG)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} data The metadata array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(data) {
      var func = data[0],
          bitmask = data[1],
          arity = data[2],
          thisArg = data[3],
          partialArgs = data[4],
          partialRightArgs = data[5];

      var isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          var argsLength = arguments.length;
          if (isCurry && argsLength < arity) {
            bitmask |= PARTIAL_FLAG;
            bitmask &= ~PARTIAL_RIGHT_FLAG
            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newArity = nativeMax(0, arity - argsLength);
            return baseCreateWrapper([func, bitmask, newArity, thisArg, args]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setData(bound, data);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      if (createCache && values && indexOf === baseIndexOf && values.length >= LARGE_ARRAY_SIZE) {
        indexOf = cacheIndexOf;
        values = createCache(values);
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} callback The function called per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    function baseEach(collection, callback) {
      var index = -1,
          iterable = collection,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(iterable[index], index, collection) === false) {
            break;
          }
        }
      } else {
        baseForOwn(collection, callback);
      }
      return collection;
    }

    /**
     * The base implementation of `_.forEachEach` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} callback The function called per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    function baseEachRight(collection, callback) {
      var iterable = collection,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (length--) {
          if (callback(iterable[length], length, collection) === false) {
            break;
          }
        }
      } else {
        baseForOwnRight(collection, callback);
      }
      return collection;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} callback The function called per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, callback) {
      var index = -1,
          props = keys(object),
          length = props.length;

      while (++index < length) {
        var key = props[index];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} callback The function called per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, callback) {
      var props = keys(object),
          length = props.length;

      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && (type == 'function' || type == 'object')) &&
          !(b && (otherType == 'function' || otherType == 'object'))) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        baseForIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          baseForIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? baseEach : baseForOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = createCache && !isSorted && indexOf === baseIndexOf && length >= LARGE_ARRAY_SIZE,
          result = [];

      if (isLarge) {
        var seen = createCache();
        indexOf = cacheIndexOf;
      } else {
        seen = callback ? getArray() : result;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (!isLarge && callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};

        callback = lodash.createCallback(callback, thisArg, 3);
        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [array=[]] The array to search.
     * @returns {Object} Returns the cache object.
     */
    var createCache = Set && function(array) {
      var cache = new Set,
          length = array ? array.length : 0;

      cache.push = cache.add;
      while (length--) {
        cache.push(array[length]);
      }
      return cache;
    };

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1  - `_.bind`
     *  2  - `_.bindKey`
     *  4  - `_.curry`
     *  8  - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {number} [arity] The arity of `func`.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, arity, thisArg, partialArgs, partialRightArgs) {
      var isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isPartial = bitmask & PARTIAL_FLAG,
          isPartialRight = bitmask & PARTIAL_RIGHT_FLAG;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~PARTIAL_FLAG;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~PARTIAL_RIGHT_FLAG;
        isPartialRight = partialRightArgs = false;
      }
      var data = !isBindKey && func[expando];
      if (data && data !== true) {
        // shallow clone `data`
        data = slice(data);

        // clone partial left arguments
        if (data[4]) {
          data[4] = slice(data[4]);
        }
        // clone partial right arguments
        if (data[5]) {
          data[5] = slice(data[5]);
        }
        // set arity if provided
        if (typeof arity == 'number') {
          data[2] = arity;
        }
        // set `thisArg` if not previously bound
        var bound = data[1] & BIND_FLAG;
        if (isBind && !bound) {
          data[3] = thisArg;
        }
        // set if currying a bound function
        if (!isBind && bound) {
          bitmask |= CURRY_BOUND_FLAG;
        }
        // append partial left arguments
        if (isPartial) {
          if (data[4]) {
            push.apply(data[4], partialArgs);
          } else {
            data[4] = partialArgs;
          }
        }
        // prepend partial right arguments
        if (isPartialRight) {
          if (data[5]) {
            unshift.apply(data[5], partialRightArgs);
          } else {
            data[5] = partialRightArgs;
          }
        }
        // merge flags
        data[1] |= bitmask;
        return createWrapper.apply(null, data);
      }
      if (arity == null) {
        arity = isBindKey ? 0 : func.length;
      } else if (arity < 0) {
        arity = 0;
      }
      // fast path for `_.bind`
      var newData = [func, bitmask, arity, thisArg, partialArgs, partialRightArgs];
      return (bitmask == BIND_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG))
        ? baseBind(newData)
        : baseCreateWrapper(newData);
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(fnToString.call(value));
    }

    /**
     * Sets wrapper metadata on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, expando, descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (!hasOwnProperty.call(value, 'constructor') &&
            (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor)))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} callback The function called per iteration.
     * @returns {Object} Returns `object`.
     */
    var baseForIn = function(object, callback) {
      var result = object;
      if (!isObject(object)) {
        return result;
      }
      for (var key in object) {
        if (callback(object[key], key, object) === false) {
          return result;
        }
      }
      return result;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var result = [];
      if (!isObject(object)) {
        return result;
      }
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    };

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * // returns the first two elements
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * // returns elements from the beginning until the callback result is falsey
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, n > 0 ? n : 0);
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * // using `isShallow`
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      var type = typeof isShallow;

      // juggle arguments
      if (type != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = isShallow;
        isShallow = false;

        // enables use as a callback for functions like `_.map`
        if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === array) {
          callback = null;
        }
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return (length && array[index] === value) ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * // excludes the last two elements
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * // excludes elements from the end until the callback fails
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      n = length - n;
      return slice(array, 0, n > 0 ? n : 0);
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          largePrereq = createCache && indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(largePrereq && value.length >= LARGE_ARRAY_SIZE &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * // returns the last two elements
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * // returns elements from the end until the callback fails
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      n = length - n;
      return slice(array,  n > 0 ? n : 0);
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];

        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial`; this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * // excludes the first two elements
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * // excludes elements from the beginning until the callback fails
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else if (callback == null || thisArg) {
        n = 1;
      } else {
        n = callback > 0 ? callback : 0;
      }
      return slice(array, n);
    }

    /**
     * Slices `array` from the `start` index up to, but not including, the `end` index.
     *
     * Note: This function is used instead of `Array#slice` to support node lists
     * in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start index.
     * @param {number} [end=array.length] The end index.
     * @returns {Array} Returns the new array.
     */
    function slice(array, start, end) {
      var index = -1,
          length = array ? array.length : 0;

      if (typeof start == 'undefined') {
        start = 0;
      } else if (start < 0) {
        start = nativeMax(length + start, 0);
      } else if (start > length) {
        start = length;
      }
      if (typeof end == 'undefined') {
        end = length;
      } else if (end < 0) {
        end = nativeMax(length + end, 0);
      } else if (end > length) {
        end = length;
      }
      length = end - start || 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[start + index];
      }
      return result;
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * // using `callback`
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * // using `callback` with `thisArg`
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * // using `callback`
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * // using `callback` with `thisArg`
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      var type = typeof isSorted;

      // juggle arguments
      if (type != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = isSorted;
        isSorted = false;

        // enables use as a callback for functions like `_.map`
        if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === array) {
          callback = null;
        }
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See [Wikipedia](http://en.wikipedia.org/wiki/Symmetric_difference) for more details.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseDifference(result, array).concat(baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on. If a zipped value is provided its
     * corresponding unzipped value will be returned.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip([['fred', 30, true], ['barney', 40, false]]);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection, guard) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = props.length,
          type = typeof guard;

      // enables use as a callback for functions like `_.map`
      if ((type == 'number' || type == 'string') && args[2] && args[2][guard] === collection) {
        length = 1;
      }
      var result = Array(length);
      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var length = collection ? collection.length : 0;
      fromIndex = typeof fromIndex == 'number' ? fromIndex : 0;

      if (typeof length == 'number') {
        if (fromIndex >= length) {
          return false;
        }
        if (typeof collection == 'string' || !isArray(collection) && isString(collection)) {
          return nativeContains
            ? nativeContains.call(collection, target, fromIndex)
            : collection.indexOf(target, fromIndex) > -1;
        }
        var indexOf = getIndexOf();
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
        return indexOf(collection, target, fromIndex) > -1;
      }
      var index = -1,
          result = false;

      baseEach(collection, function(value) {
        if (++index >= fromIndex) {
          return !(result = value === target);
        }
      });

      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the callback returns truey value for **all** elements of a
     * collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;

      callback = lodash.createCallback(callback, thisArg, 3);
      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        baseEach(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;

      callback = lodash.createCallback(callback, thisArg, 3);
      baseEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        baseEach(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        baseEachRight(collection, callback);
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (arguments.length < 3 && typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          result[index] = isFunc ? methodName.call(value) : value[methodName]();
        }
      } else {
        var args = slice(arguments, 2);
        baseEach(collection, function(value) {
          result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
        });
      }
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        baseEach(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed,
          type = typeof callback;

      // enables use as a callback for functions like `_.map`
      if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed,
          type = typeof callback;

      // enables use as a callback for functions like `_.map`
      if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        baseEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} key The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;

      callback = lodash.createCallback(callback, thisArg, 4);
      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        if (noaccum && length) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;

      callback = lodash.createCallback(callback, thisArg, 4);
      baseEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See [Wikipedia](http://en.wikipedia.org/wiki/Fisher-Yates_shuffle) for more details.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      baseEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });

      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;

      callback = lodash.createCallback(callback, thisArg, 3);
      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        baseEach(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          multi = callback && isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!multi) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      baseEach(collection, function(value, key, collection) {
        if (multi) {
          var length = callback.length,
              criteria = Array(length);

          while (length--) {
            criteria[length] = value[callback[length]];
          }
        } else {
          criteria = callback(value, key, collection);
        }
        var object = result[++index] = getObject();
        object.criteria = criteria;
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(multi ? compareMultipleAscending : compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * `props` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * Note: Unlike native `Function#bind` this method does not set the `length`
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [args] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      if (arguments.length < 3) {
        return createWrapper(func, BIND_FLAG, null, thisArg);
      }
      if (func) {
        var arity = func[expando] ? func[expando][2] : func.length,
            partialArgs = slice(arguments, 2);

        arity -= partialArgs.length;
      }
      return createWrapper(func, BIND_FLAG | PARTIAL_FLAG, arity, thisArg, partialArgs);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * Note: This method does not set the `length` property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], BIND_FLAG, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See [Peter Michaux's article](http://michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [args] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length < 3
        ? createWrapper(key, BIND_FLAG | BIND_KEY_FLAG, null, object)
        : createWrapper(key, BIND_FLAG | BIND_KEY_FLAG | PARTIAL_FLAG, null, object, slice(arguments, 2));
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          funcsLength = funcs.length,
          length = funcsLength;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var length = funcsLength - 1,
            result = funcs[length].apply(this, arguments);

        while (length--) {
          result = funcs[length].call(this, result);
        }
        return result;
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * Note: This method does not set the `length` property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      if (typeof arity != 'number') {
        arity = +arity || (func ? func.length : 0);
      }
      return createWrapper(func, CURRY_FLAG, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [args] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [args] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : '_' + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * Note: This method does not set the `length` property of partially applied
     * functions.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [args] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      if (func) {
        var arity = func[expando] ? func[expando][2] : func.length,
            partialArgs = slice(arguments, 1);

        arity -= partialArgs.length;
      }
      return createWrapper(func, PARTIAL_FLAG, arity, null, partialArgs);
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * Note: This method does not set the `length` property of partially applied
     * functions.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [args] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      if (func) {
        var arity = func[expando] ? func[expando][2] : func.length,
            partialRightArgs = slice(arguments, 1);

        arity -= partialRightArgs.length;
      }
      return createWrapper(func, PARTIAL_RIGHT_FLAG, arity, null, null, partialRightArgs);
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, PARTIAL_FLAG, null, null, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * defaults({ 'name': 'barney' }, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    function assign(object, source, guard) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          type = typeof guard;

      // enables use as a callback for functions like `_.reduce`
      if ((type == 'number' || type == 'string') && args[3] && args[3][guard] === source) {
        argsLength = 2;
      }
      // juggle arguments
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        source = args[argsIndex];
        if (isObject(source)) {
          var index = -1,
              props = keys(source),
              length = props.length;

          while (++index < length) {
            var key = props[index];
            object[key] = callback ? callback(object[key], source[key]) : source[key];
          }
        }
      }
      return object;
    }

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      var type = typeof isDeep;

      // juggle arguments
      if (type != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;

        // enables use as a callback for functions like `_.map`
        if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === value) {
          callback = null;
        }
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.defaults({ 'name': 'barney' }, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    function defaults(object, source, guard) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          type = typeof guard;

      // enables use as a callback for functions like `_.reduce`
      if ((type == 'number' || type == 'string') && args[3] && args[3][guard] === source) {
        argsLength = 2;
      }
      while (++argsIndex < argsLength) {
        source = args[argsIndex];
        if (isObject(source)) {
          var index = -1,
              props = keys(source),
              length = props.length;

          while (++index < length) {
            var key = props[index];
            if (typeof object[key] == 'undefined') {
              object[key] = source[key];
            }
          }
        }
      }
      return object;
    }

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;

      callback = lodash.createCallback(callback, thisArg, 3);
      baseForOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;

      callback = lodash.createCallback(callback, thisArg, 3);
      baseForOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    function forIn(object, callback, thisArg) {
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      return baseForIn(object, callback);
    }

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];
      baseForIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    function forOwn(object, callback, thisArg) {
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      return baseForOwn(object, callback);
    }

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      baseForIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given
     * object. If the given object contains duplicate values, subsequent values
     * will overwrite property assignments of previous values unless `multiValue`
     * is `true`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue=false] Allow multiple values per key.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     *
     * // without `multiValue`
     * _.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' });
     * // => { 'fred': 'third', 'barney': 'second' }
     *
     * // with `multiValue`
     * _.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' }, true);
     * // => { 'fred': ['first', 'third'], 'barney': ['second'] }
     */
    function invert(object, multiValue) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && typeof value == 'object' && value.nodeType === 1 &&
        toString.call(value).indexOf('Element') > -1 || false;
    }
    // fallback for environments without DOM support
    if (!support.dom) {
      isElement = function(value) {
        return value && typeof value == 'object' && value.nodeType === 1 &&
          !isPlainObject(value) || false;
      };
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      baseForOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This method is not the same as native `isFinite` which will return
     * `true` for booleans and empty strings. See the [ES5 spec](http://es5.github.io/#x15.1.2.5)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      var type = typeof value;
      return value && (type == 'function' || type == 'object') || false;
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This method is not the same as native `isNaN` which will return `true`
     * for `undefined` and other non-numeric values. See the [ES5 spec](http://es5.github.io/#x15.1.2.4)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See the [ES5 spec](http://es5.github.io/#x8.5)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      var type = typeof value;
      return type == 'number' ||
        value && type == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};

      callback = lodash.createCallback(callback, thisArg, 3);
      baseForOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object, source, guard) {
      if (!isObject(object)) {
        return object;
      }
      var args = arguments,
          length = args.length,
          type = typeof guard;

      // enables use as a callback for functions like `_.reduce`
      if ((type == 'number' || type == 'string') && args[3] && args[3][guard] === source) {
        length = 2;
      }
      // juggle arguments
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {},
          type = typeof callback;

      if (type != 'function') {
        // enables use as a callback for functions like `_.map`
        // when combined with `_.partialRight`
        var args = arguments;
        if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === object) {
          args = slice(args);
          splice.call(args, 1, 2);
        }
        var omitProps = baseFlatten(args, true, false, 1),
            length = omitProps.length;

        while (length--) {
          omitProps[length] = String(omitProps[length]);
        }
        var props = [];
        baseForIn(object, function(value, key) {
          props.push(key);
        });

        var index = -1;
        props = baseDifference(props, omitProps);
        length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        baseForIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {},
          type = typeof callback;

      if (type != 'function') {
        // enables use as a callback for functions like `_.map`
        // when combined with `_.partialRight`
        var args = arguments;
        if ((type == 'number' || type == 'string') && thisArg && thisArg[callback] === object) {
          args = slice(args);
          splice.call(args, 1, 2);
        }
        var index = -1,
            props = baseFlatten(args, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        baseForIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? baseEach : baseForOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} string The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      if (string == null) {
        return '';
      }
      string = String(string);
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to
     * their corresponding HTML entities.
     *
     * Note: No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](http://mths.be/he).
     *
     * When working with HTML you should always quote attribute values to reduce
     * XSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See [HTML5 Rocks' article on sourcemaps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for more details.
     *
     * For more information on precompiling templates see
     * [Lo-Dash's custom builds documentation](http://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](http://developer.chrome.com/stable/extensions/sandboxingEval.html).
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} text The template text.
     * @param {Object} [data] The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} string The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  fred  ');
     * // => 'fred'
     *
     * _.trim('-_-fred-_-', '_-');
     * // => 'fred'
     */
    var trim = !nativeTrim ? shimTrim : function(string, chars) {
      if (string == null) {
        return '';
      }
      return chars == null ? nativeTrim.call(string) : shimTrim(string, chars);
    };

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} string The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  fred  ');
     * // => 'fred  '
     *
     * _.trimLeft('-_-fred-_-', '_-');
     * // => 'fred-_-'
     */
    var trimLeft = !nativeTrimLeft ? shimTrimLeft : function(string, chars) {
      if (string == null) {
        return '';
      }
      return chars == null ? nativeTrimLeft.call(string) : shimTrimLeft(string, chars);
    };

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} string The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  fred  ');
     * // => '  fred'
     *
     * _.trimRight('-_-fred-_-', '_-');
     * // => '-_-fred'
     */
    var trimRight = !nativeTrimRight ? shimTrimRight : function(string, chars) {
      if (string == null) {
        return '';
      }
      return chars == null ? nativeTrimRight.call(string) : shimTrimRight(string, chars);
    };

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * Note: No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](http://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category Strings
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney &amp; pebbles');
     * // => 'fred, barney & pebbles'
     */
    function unescape(string) {
      if (string == null) {
        return '';
      }
      string = String(string);
      return string.indexOf(';') < 0 ? string : string.replace(reEscapedHtml, unescapeHtmlChar);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @alias callback
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" and "_.where" style callback shorthands
      return type != 'object' ? property(func) : match(func);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a "_.where" style function, which performs a deep comparison
     * between a given object and the `props` object, returning `true` if the
     * given object has equivalent property values, else `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} props The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var matchAge = _.match({ 'age': 36 });
     *
     * _.filter(characters, matchAge);
     * // => [{ 'name': 'barney', 'age': 36 }]
     *
     * _.find(characters, matchAge);
     * // => { 'name': 'barney', 'age': 36 }
     */
    function match(source) {
      source || (source = {});

      var props = keys(source),
          key = props[0],
          a = source[key];

      // fast path the common case of providing an object with a single
      // property containing a primitive value
      if (props.length == 1 && a === a && !isObject(a)) {
        return function(object) {
          if (!hasOwnProperty.call(object, key)) {
            return false;
          }
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          var key = props[length];
          if (!(result = hasOwnProperty.call(object, key) &&
                baseIsEqual(object[key], source[key], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var index = -1,
          isFunc = isFunction(object),
          length = methodNames ? methodNames.length : 0;

      while (++index < length) {
        var methodName = methodNames[index],
            func = object[methodName] = source[methodName];

        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__,
                  value = this.__wrapped__,
                  args = [value];

              push.apply(args, arguments);
              var result = func.apply(object, args);
              if (chain || chainAll) {
                if (value === result && isObject(result)) {
                  return this;
                }
                result = new object(result);
                result.__chain__ = chainAll;
              }
              return result;
            };
          }(func));
        }
      }
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /**
     * Converts `value` to an integer of the specified radix. If `radix` is
     * `undefined` or `0` a `radix` of `10` is used unless the `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See the [ES5 spec](http://es5.github.io/#E)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`.
      value = trim(value);
      return nativeParseInt(value, +radix || (reHexPrefix.test(value) ? 16 : 10));
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result
     * returned, else the property value is returned. If `object` is `null` or
     * `undefined` then `undefined` is returned. If a default value is provided
     * it will be returned if the property value resolves to `undefined`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @param {*} [defaultValue] The value returned if the property value
     *  resolves to `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'age': function() {
     *     return 40;
     *   }
     * };
     *
     * _.result(object, 'name');
     * // => 'fred'
     *
     * _.result(object, 'age');
     * // => 40
     *
     * _.result(object, 'employer', 'slate');
     * // => 'slate'
     */
    function result(object, key, defaultValue) {
      if (object == null || typeof object[key] == 'undefined') {
        return defaultValue;
      }
      var value = object[key];
      return isFunction(value) ? object[key]() : value;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.match = match;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.callback = createCallback;
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(assign({}, lodash));

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.capitalize = capitalize;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    baseForOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = version;

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    baseEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    baseEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    baseEach(['concat', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // export Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.2'

!function(root, String){
  'use strict';

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  // Helper for toBoolean
  function boolMatch(s, matchers) {
    var i, matcher, down = s.toLowerCase();
    matchers = [].concat(matchers);
    for (i = 0; i < matchers.length; i += 1) {
      matcher = matchers[i];
      if (!matcher) continue;
      if (matcher.test && matcher.test(s)) return true;
      if (matcher.toLowerCase() === down) return true;
    }
  }

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    amp: '&',
    apos: "'"
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;
  reversedEscapeChars["'"] = '#39';

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;

      str = String(str);
      substr = String(substr);

      var count = 0,
        pos = 0,
        length = substr.length;

      while (true) {
        pos = str.indexOf(substr, pos);
        if (pos === -1) break;
        count++;
        pos += length;
      }

      return count;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      str  = String(str).toLowerCase();
      return str.replace(/(?:^|\s|-)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : ""; });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/[\W_]/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (!str) return 0;
      str = _s.trim(str);
      if (!str.match(/^-?\d+(?:\.\d+)?$/)) return NaN;
      return parseNumber(parseNumber(str).toFixed(~~decimals));
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = typeof tsep == 'string' ? tsep : ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', ';
      lastSeparator = lastSeparator || ' and ';
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź",
          to    = "aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str, quoteChar) {
      return _s.surround(str, quoteChar || '"');
    },

    unquote: function(str, quoteChar) {
      quoteChar = quoteChar || '"';
      if (str[0] === quoteChar && str[str.length-1] === quoteChar)
        return str.slice(1,str.length-1);
      else return str;
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    naturalCmp: function(str1, str2){
      if (str1 == str2) return 0;
      if (!str1) return -1;
      if (!str2) return 1;

      var cmpRegex = /(\.\d+)|(\d+)|(\D+)/g,
        tokens1 = String(str1).toLowerCase().match(cmpRegex),
        tokens2 = String(str2).toLowerCase().match(cmpRegex),
        count = Math.min(tokens1.length, tokens2.length);

      for(var i = 0; i < count; i++) {
        var a = tokens1[i], b = tokens2[i];

        if (a !== b){
          var num1 = parseInt(a, 10);
          if (!isNaN(num1)){
            var num2 = parseInt(b, 10);
            if (!isNaN(num2) && num1 - num2)
              return num1 - num2;
          }
          return a < b ? -1 : 1;
        }
      }

      if (tokens1.length === tokens2.length)
        return tokens1.length - tokens2.length;

      return str1 < str2 ? -1 : 1;
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    },

    toBoolean: function(str, trueValues, falseValues) {
      if (typeof str === "number") str = "" + str;
      if (typeof str !== "string") return !!str;
      str = _s.trim(str);
      if (boolMatch(str, trueValues || ["true", "1"])) return true;
      if (boolMatch(str, falseValues || ["false", "0"])) return false;
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;
  _s.toBool   = _s.toBoolean;

  // Exporting

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports)
      module.exports = _s;

    exports._s = _s;
  }

  // Register as a named module with AMD.
  if (typeof define === 'function' && define.amd)
    define('underscore.string', [], function(){ return _s; });


  // Integrate with Underscore.js if defined
  // or create our own underscore object.
  root._ = root._ || {};
  root._.string = root._.str = _s;
}(this, String);

/*!
 * Modernizr v2.7.1
 * www.modernizr.com
 *
 * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton
 * Available under the BSD and MIT licenses: www.modernizr.com/license/
 */

/*
 * Modernizr tests which native CSS3 and HTML5 features are available in
 * the current UA and makes the results available to you in two ways:
 * as properties on a global Modernizr object, and as classes on the
 * <html> element. This information allows you to progressively enhance
 * your pages with a granular level of control over the experience.
 *
 * Modernizr has an optional (not included) conditional resource loader
 * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).
 * To get a build that includes Modernizr.load(), as well as choosing
 * which tests to include, go to www.modernizr.com/download/
 *
 * Authors        Faruk Ates, Paul Irish, Alex Sexton
 * Contributors   Ryan Seddon, Ben Alman
 */

window.Modernizr = (function( window, document, undefined ) {

    var version = '2.7.1',

    Modernizr = {},

    /*>>cssclasses*/
    // option for enabling the HTML classes to be added
    enableClasses = true,
    /*>>cssclasses*/

    docElement = document.documentElement,

    /**
     * Create our "modernizr" element that we do most feature tests on.
     */
    mod = 'modernizr',
    modElem = document.createElement(mod),
    mStyle = modElem.style,

    /**
     * Create the input element for various Web Forms feature tests.
     */
    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,

    /*>>smile*/
    smile = ':)',
    /*>>smile*/

    toString = {}.toString,

    // TODO :: make the prefixes more granular
    /*>>prefixes*/
    // List of property values to set for css tests. See ticket #21
    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
    /*>>prefixes*/

    /*>>domprefixes*/
    // Following spec is to expose vendor-specific style properties as:
    //   elem.style.WebkitBorderRadius
    // and the following would be incorrect:
    //   elem.style.webkitBorderRadius

    // Webkit ghosts their properties in lowercase but Opera & Moz do not.
    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
    //   erik.eae.net/archives/2008/03/10/21.48.10/

    // More here: github.com/Modernizr/Modernizr/issues/issue/21
    omPrefixes = 'Webkit Moz O ms',

    cssomPrefixes = omPrefixes.split(' '),

    domPrefixes = omPrefixes.toLowerCase().split(' '),
    /*>>domprefixes*/

    /*>>ns*/
    ns = {'svg': 'http://www.w3.org/2000/svg'},
    /*>>ns*/

    tests = {},
    inputs = {},
    attrs = {},

    classes = [],

    slice = classes.slice,

    featureName, // used in testing loop


    /*>>teststyles*/
    // Inject element with style element and some CSS rules
    injectElementWithStyles = function( rule, callback, nodes, testnames ) {

      var style, ret, node, docOverflow,
          div = document.createElement('div'),
          // After page load injecting a fake body doesn't work so check if body exists
          body = document.body,
          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.
          fakeBody = body || document.createElement('body');

      if ( parseInt(nodes, 10) ) {
          // In order not to give false positives we create a node for each test
          // This also allows the method to scale for unspecified uses
          while ( nodes-- ) {
              node = document.createElement('div');
              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
              div.appendChild(node);
          }
      }

      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed
      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element
      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.
      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx
      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277
      style = ['&#173;','<style id="s', mod, '">', rule, '</style>'].join('');
      div.id = mod;
      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
      (body ? div : fakeBody).innerHTML += style;
      fakeBody.appendChild(div);
      if ( !body ) {
          //avoid crashing IE8, if background image is used
          fakeBody.style.background = '';
          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
          fakeBody.style.overflow = 'hidden';
          docOverflow = docElement.style.overflow;
          docElement.style.overflow = 'hidden';
          docElement.appendChild(fakeBody);
      }

      ret = callback(div, rule);
      // If this is done after page load we don't want to remove the body so check if body exists
      if ( !body ) {
          fakeBody.parentNode.removeChild(fakeBody);
          docElement.style.overflow = docOverflow;
      } else {
          div.parentNode.removeChild(div);
      }

      return !!ret;

    },
    /*>>teststyles*/

    /*>>mq*/
    // adapted from matchMedia polyfill
    // by Scott Jehl and Paul Irish
    // gist.github.com/786768
    testMediaQuery = function( mq ) {

      var matchMedia = window.matchMedia || window.msMatchMedia;
      if ( matchMedia ) {
        return matchMedia(mq).matches;
      }

      var bool;

      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {
        bool = (window.getComputedStyle ?
                  getComputedStyle(node, null) :
                  node.currentStyle)['position'] == 'absolute';
      });

      return bool;

     },
     /*>>mq*/


    /*>>hasevent*/
    //
    // isEventSupported determines if a given element supports the given event
    // kangax.github.com/iseventsupported/
    //
    // The following results are known incorrects:
    //   Modernizr.hasEvent("webkitTransitionEnd", elem) // false negative
    //   Modernizr.hasEvent("textInput") // in Webkit. github.com/Modernizr/Modernizr/issues/333
    //   ...
    isEventSupported = (function() {

      var TAGNAMES = {
        'select': 'input', 'change': 'input',
        'submit': 'form', 'reset': 'form',
        'error': 'img', 'load': 'img', 'abort': 'img'
      };

      function isEventSupported( eventName, element ) {

        element = element || document.createElement(TAGNAMES[eventName] || 'div');
        eventName = 'on' + eventName;

        // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and "resize", whereas `in` "catches" those
        var isSupported = eventName in element;

        if ( !isSupported ) {
          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element
          if ( !element.setAttribute ) {
            element = document.createElement('div');
          }
          if ( element.setAttribute && element.removeAttribute ) {
            element.setAttribute(eventName, '');
            isSupported = is(element[eventName], 'function');

            // If property was created, "remove it" (by setting value to `undefined`)
            if ( !is(element[eventName], 'undefined') ) {
              element[eventName] = undefined;
            }
            element.removeAttribute(eventName);
          }
        }

        element = null;
        return isSupported;
      }
      return isEventSupported;
    })(),
    /*>>hasevent*/

    // TODO :: Add flag for hasownprop ? didn't last time

    // hasOwnProperty shim by kangax needed for Safari 2.0 support
    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;

    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {
      hasOwnProp = function (object, property) {
        return _hasOwnProperty.call(object, property);
      };
    }
    else {
      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */
        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
      };
    }

    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
    // es5.github.com/#x15.3.4.5

    if (!Function.prototype.bind) {
      Function.prototype.bind = function bind(that) {

        var target = this;

        if (typeof target != "function") {
            throw new TypeError();
        }

        var args = slice.call(arguments, 1),
            bound = function () {

            if (this instanceof bound) {

              var F = function(){};
              F.prototype = target.prototype;
              var self = new F();

              var result = target.apply(
                  self,
                  args.concat(slice.call(arguments))
              );
              if (Object(result) === result) {
                  return result;
              }
              return self;

            } else {

              return target.apply(
                  that,
                  args.concat(slice.call(arguments))
              );

            }

        };

        return bound;
      };
    }

    /**
     * setCss applies given styles to the Modernizr DOM node.
     */
    function setCss( str ) {
        mStyle.cssText = str;
    }

    /**
     * setCssAll extrapolates all vendor-specific css strings.
     */
    function setCssAll( str1, str2 ) {
        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));
    }

    /**
     * is returns a boolean for if typeof obj is exactly type.
     */
    function is( obj, type ) {
        return typeof obj === type;
    }

    /**
     * contains returns a boolean for if substr is found within str.
     */
    function contains( str, substr ) {
        return !!~('' + str).indexOf(substr);
    }

    /*>>testprop*/

    // testProps is a generic CSS / DOM property test.

    // In testing support for a given CSS property, it's legit to test:
    //    `elem.style[styleName] !== undefined`
    // If the property is supported it will return an empty string,
    // if unsupported it will return undefined.

    // We'll take advantage of this quick test and skip setting a style
    // on our modernizr element, but instead just testing undefined vs
    // empty string.

    // Because the testing of the CSS property names (with "-", as
    // opposed to the camelCase DOM properties) is non-portable and
    // non-standard but works in WebKit and IE (but not Gecko or Opera),
    // we explicitly reject properties with dashes so that authors
    // developing in WebKit or IE first don't end up with
    // browser-specific content by accident.

    function testProps( props, prefixed ) {
        for ( var i in props ) {
            var prop = props[i];
            if ( !contains(prop, "-") && mStyle[prop] !== undefined ) {
                return prefixed == 'pfx' ? prop : true;
            }
        }
        return false;
    }
    /*>>testprop*/

    // TODO :: add testDOMProps
    /**
     * testDOMProps is a generic DOM property test; if a browser supports
     *   a certain property, it won't return undefined for it.
     */
    function testDOMProps( props, obj, elem ) {
        for ( var i in props ) {
            var item = obj[props[i]];
            if ( item !== undefined) {

                // return the property name as a string
                if (elem === false) return props[i];

                // let's bind a function
                if (is(item, 'function')){
                  // default to autobind unless override
                  return item.bind(elem || obj);
                }

                // return the unbound function or obj or value
                return item;
            }
        }
        return false;
    }

    /*>>testallprops*/
    /**
     * testPropsAll tests a list of DOM properties we want to check against.
     *   We specify literally ALL possible (known and/or likely) properties on
     *   the element including the non-vendor prefixed one, for forward-
     *   compatibility.
     */
    function testPropsAll( prop, prefixed, elem ) {

        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),
            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

        // did they call .prefixed('boxSizing') or are we just testing a prop?
        if(is(prefixed, "string") || is(prefixed, "undefined")) {
          return testProps(props, prefixed);

        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
        } else {
          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
          return testDOMProps(props, prefixed, elem);
        }
    }
    /*>>testallprops*/


    /**
     * Tests
     * -----
     */

    // The *new* flexbox
    // dev.w3.org/csswg/css3-flexbox

    tests['flexbox'] = function() {
      return testPropsAll('flexWrap');
    };

    // The *old* flexbox
    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/

    tests['flexboxlegacy'] = function() {
        return testPropsAll('boxDirection');
    };

    // On the S60 and BB Storm, getContext exists, but always returns undefined
    // so we actually have to call getContext() to verify
    // github.com/Modernizr/Modernizr/issues/issue/97/

    tests['canvas'] = function() {
        var elem = document.createElement('canvas');
        return !!(elem.getContext && elem.getContext('2d'));
    };

    tests['canvastext'] = function() {
        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));
    };

    // webk.it/70117 is tracking a legit WebGL feature detect proposal

    // We do a soft detect which may false positive in order to avoid
    // an expensive context creation: bugzil.la/732441

    tests['webgl'] = function() {
        return !!window.WebGLRenderingContext;
    };

    /*
     * The Modernizr.touch test only indicates if the browser supports
     *    touch events, which does not necessarily reflect a touchscreen
     *    device, as evidenced by tablets running Windows 7 or, alas,
     *    the Palm Pre / WebOS (touch) phones.
     *
     * Additionally, Chrome (desktop) used to lie about its support on this,
     *    but that has since been rectified: crbug.com/36415
     *
     * We also test for Firefox 4 Multitouch Support.
     *
     * For more info, see: modernizr.github.com/Modernizr/touch.html
     */

    tests['touch'] = function() {
        var bool;

        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
          bool = true;
        } else {
          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {
            bool = node.offsetTop === 9;
          });
        }

        return bool;
    };


    // geolocation is often considered a trivial feature detect...
    // Turns out, it's quite tricky to get right:
    //
    // Using !!navigator.geolocation does two things we don't want. It:
    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513
    //   2. Disables page caching in WebKit: webk.it/43956
    //
    // Meanwhile, in Firefox < 8, an about:config setting could expose
    // a false positive that would throw an exception: bugzil.la/688158

    tests['geolocation'] = function() {
        return 'geolocation' in navigator;
    };


    tests['postmessage'] = function() {
      return !!window.postMessage;
    };


    // Chrome incognito mode used to throw an exception when using openDatabase
    // It doesn't anymore.
    tests['websqldatabase'] = function() {
      return !!window.openDatabase;
    };

    // Vendors had inconsistent prefixing with the experimental Indexed DB:
    // - Webkit's implementation is accessible through webkitIndexedDB
    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB
    // For speed, we don't test the legacy (and beta-only) indexedDB
    tests['indexedDB'] = function() {
      return !!testPropsAll("indexedDB", window);
    };

    // documentMode logic from YUI to filter out IE8 Compat Mode
    //   which false positives.
    tests['hashchange'] = function() {
      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);
    };

    // Per 1.6:
    // This used to be Modernizr.historymanagement but the longer
    // name has been deprecated in favor of a shorter and property-matching one.
    // The old API is still available in 1.6, but as of 2.0 will throw a warning,
    // and in the first release thereafter disappear entirely.
    tests['history'] = function() {
      return !!(window.history && history.pushState);
    };

    tests['draganddrop'] = function() {
        var div = document.createElement('div');
        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);
    };

    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10
    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.
    // FF10 still uses prefixes, so check for it until then.
    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/
    tests['websockets'] = function() {
        return 'WebSocket' in window || 'MozWebSocket' in window;
    };


    // css-tricks.com/rgba-browser-support/
    tests['rgba'] = function() {
        // Set an rgba() color and check the returned value

        setCss('background-color:rgba(150,255,150,.5)');

        return contains(mStyle.backgroundColor, 'rgba');
    };

    tests['hsla'] = function() {
        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,
        //   except IE9 who retains it as hsla

        setCss('background-color:hsla(120,40%,100%,.5)');

        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
    };

    tests['multiplebgs'] = function() {
        // Setting multiple images AND a color on the background shorthand property
        //  and then querying the style.background property value for the number of
        //  occurrences of "url(" is a reliable method for detecting ACTUAL support for this!

        setCss('background:url(https://),url(https://),red url(https://)');

        // If the UA supports multiple backgrounds, there should be three occurrences
        //   of the string "url(" in the return value for elemStyle.background

        return (/(url\s*\(.*?){3}/).test(mStyle.background);
    };



    // this will false positive in Opera Mini
    //   github.com/Modernizr/Modernizr/issues/396

    tests['backgroundsize'] = function() {
        return testPropsAll('backgroundSize');
    };

    tests['borderimage'] = function() {
        return testPropsAll('borderImage');
    };


    // Super comprehensive table about all the unique implementations of
    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance

    tests['borderradius'] = function() {
        return testPropsAll('borderRadius');
    };

    // WebOS unfortunately false positives on this test.
    tests['boxshadow'] = function() {
        return testPropsAll('boxShadow');
    };

    // FF3.0 will false positive on this test
    tests['textshadow'] = function() {
        return document.createElement('div').style.textShadow === '';
    };


    tests['opacity'] = function() {
        // Browsers that actually have CSS Opacity implemented have done so
        //  according to spec, which means their return values are within the
        //  range of [0.0,1.0] - including the leading zero.

        setCssAll('opacity:.55');

        // The non-literal . in this regex is intentional:
        //   German Chrome returns this value as 0,55
        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632
        return (/^0.55$/).test(mStyle.opacity);
    };


    // Note, Android < 4 will pass this test, but can only animate
    //   a single property at a time
    //   daneden.me/2011/12/putting-up-with-androids-bullshit/
    tests['cssanimations'] = function() {
        return testPropsAll('animationName');
    };


    tests['csscolumns'] = function() {
        return testPropsAll('columnCount');
    };


    tests['cssgradients'] = function() {
        /**
         * For CSS Gradients syntax, please see:
         * webkit.org/blog/175/introducing-css-gradients/
         * developer.mozilla.org/en/CSS/-moz-linear-gradient
         * developer.mozilla.org/en/CSS/-moz-radial-gradient
         * dev.w3.org/csswg/css3-images/#gradients-
         */

        var str1 = 'background-image:',
            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
            str3 = 'linear-gradient(left top,#9f9, white);';

        setCss(
             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
              (str1 + '-webkit- '.split(' ').join(str2 + str1) +
             // standard syntax             // trailing 'background-image:'
              prefixes.join(str3 + str1)).slice(0, -str1.length)
        );

        return contains(mStyle.backgroundImage, 'gradient');
    };


    tests['cssreflections'] = function() {
        return testPropsAll('boxReflect');
    };


    tests['csstransforms'] = function() {
        return !!testPropsAll('transform');
    };


    tests['csstransforms3d'] = function() {

        var ret = !!testPropsAll('perspective');

        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.
        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in
        //   some conditions. As a result, Webkit typically recognizes the syntax but
        //   will sometimes throw a false positive, thus we must do a more thorough check:
        if ( ret && 'webkitPerspective' in docElement.style ) {

          // Webkit allows this media query to succeed only if the feature is enabled.
          // `@media (transform-3d),(-webkit-transform-3d){ ... }`
          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {
            ret = node.offsetLeft === 9 && node.offsetHeight === 3;
          });
        }
        return ret;
    };


    tests['csstransitions'] = function() {
        return testPropsAll('transition');
    };


    /*>>fontface*/
    // @font-face detection routine by Diego Perini
    // javascript.nwbox.com/CSSSupport/

    // false positives:
    //   WebOS github.com/Modernizr/Modernizr/issues/342
    //   WP7   github.com/Modernizr/Modernizr/issues/538
    tests['fontface'] = function() {
        var bool;

        injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function( node, rule ) {
          var style = document.getElementById('smodernizr'),
              sheet = style.sheet || style.styleSheet,
              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';

          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;
        });

        return bool;
    };
    /*>>fontface*/

    // CSS generated content detection
    tests['generatedcontent'] = function() {
        var bool;

        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:"',smile,'";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {
          bool = node.offsetHeight >= 3;
        });

        return bool;
    };



    // These tests evaluate support of the video/audio elements, as well as
    // testing what types of content they support.
    //
    // We're using the Boolean constructor here, so that we can extend the value
    // e.g.  Modernizr.video     // true
    //       Modernizr.video.ogg // 'probably'
    //
    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845
    //                     thx to NielsLeenheer and zcorpan

    // Note: in some older browsers, "no" was a return value instead of empty string.
    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2
    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5

    tests['video'] = function() {
        var elem = document.createElement('video'),
            bool = false;

        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
        try {
            if ( bool = !!elem.canPlayType ) {
                bool      = new Boolean(bool);
                bool.ogg  = elem.canPlayType('video/ogg; codecs="theora"')      .replace(/^no$/,'');

                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546
                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"') .replace(/^no$/,'');

                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,'');
            }

        } catch(e) { }

        return bool;
    };

    tests['audio'] = function() {
        var elem = document.createElement('audio'),
            bool = false;

        try {
            if ( bool = !!elem.canPlayType ) {
                bool      = new Boolean(bool);
                bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');

                // Mimetypes accepted:
                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
                //   bit.ly/iphoneoscodecs
                bool.wav  = elem.canPlayType('audio/wav; codecs="1"')     .replace(/^no$/,'');
                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||
                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');
            }
        } catch(e) { }

        return bool;
    };


    // In FF4, if disabled, window.localStorage should === null.

    // Normally, we could not test that directly and need to do a
    //   `('localStorage' in window) && ` test first because otherwise Firefox will
    //   throw bugzil.la/365772 if cookies are disabled

    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
    // will throw the exception:
    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.
    // Peculiarly, getItem and removeItem calls do not throw.

    // Because we are forced to try/catch this, we'll go aggressive.

    // Just FWIW: IE8 Compat mode supports these features completely:
    //   www.quirksmode.org/dom/html5.html
    // But IE8 doesn't support either with local files

    tests['localstorage'] = function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    };

    tests['sessionstorage'] = function() {
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    };


    tests['webworkers'] = function() {
        return !!window.Worker;
    };


    tests['applicationcache'] = function() {
        return !!window.applicationCache;
    };


    // Thanks to Erik Dahlstrom
    tests['svg'] = function() {
        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;
    };

    // specifically for SVG inline in HTML, not within XHTML
    // test page: paulirish.com/demo/inline-svg
    tests['inlinesvg'] = function() {
      var div = document.createElement('div');
      div.innerHTML = '<svg/>';
      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
    };

    // SVG SMIL animation
    tests['smil'] = function() {
        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
    };

    // This test is only for clip paths in SVG proper, not clip paths on HTML content
    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg

    // However read the comments to dig into applying SVG clippaths to HTML content here:
    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491
    tests['svgclippaths'] = function() {
        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
    };

    /*>>webforms*/
    // input features and input types go directly onto the ret object, bypassing the tests loop.
    // Hold this guy to execute in a moment.
    function webforms() {
        /*>>input*/
        // Run through HTML5's new input attributes to see if the UA understands any.
        // We're using f which is the <input> element created early on
        // Mike Taylr has created a comprehensive resource for testing these attributes
        //   when applied to all input types:
        //   miketaylr.com/code/input-type-attr.html
        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary

        // Only input placeholder is tested while textarea's placeholder is not.
        // Currently Safari 4 and Opera 11 have support only for the input placeholder
        // Both tests are available in feature-detects/forms-placeholder.js
        Modernizr['input'] = (function( props ) {
            for ( var i = 0, len = props.length; i < len; i++ ) {
                attrs[ props[i] ] = !!(props[i] in inputElem);
            }
            if (attrs.list){
              // safari false positive's on datalist: webk.it/74252
              // see also github.com/Modernizr/Modernizr/issues/146
              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);
            }
            return attrs;
        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
        /*>>input*/

        /*>>inputtypes*/
        // Run through HTML5's new input types to see if the UA understands any.
        //   This is put behind the tests runloop because it doesn't return a
        //   true/false like all the other tests; instead, it returns an object
        //   containing each input type with its corresponding true/false value

        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/
        Modernizr['inputtypes'] = (function(props) {

            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {

                inputElem.setAttribute('type', inputElemType = props[i]);
                bool = inputElem.type !== 'text';

                // We first check to see if the type we give it sticks..
                // If the type does, we feed it a textual value, which shouldn't be valid.
                // If the value doesn't stick, we know there's input sanitization which infers a custom UI
                if ( bool ) {

                    inputElem.value         = smile;
                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';

                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {

                      docElement.appendChild(inputElem);
                      defaultView = document.defaultView;

                      // Safari 2-4 allows the smiley as a value, despite making a slider
                      bool =  defaultView.getComputedStyle &&
                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&
                              // Mobile android web browser has false positive, so must
                              // check the height to see if the widget is actually there.
                              (inputElem.offsetHeight !== 0);

                      docElement.removeChild(inputElem);

                    } else if ( /^(search|tel)$/.test(inputElemType) ){
                      // Spec doesn't define any special parsing or detectable UI
                      //   behaviors so we pass these through as true

                      // Interestingly, opera fails the earlier test, so it doesn't
                      //  even make it here.

                    } else if ( /^(url|email)$/.test(inputElemType) ) {
                      // Real url and email support comes with prebaked validation.
                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;

                    } else {
                      // If the upgraded input compontent rejects the :) text, we got a winner
                      bool = inputElem.value != smile;
                    }
                }

                inputs[ props[i] ] = !!bool;
            }
            return inputs;
        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));
        /*>>inputtypes*/
    }
    /*>>webforms*/


    // End of test definitions
    // -----------------------



    // Run through all tests and detect their support in the current UA.
    // todo: hypothetically we could be doing an array of tests and use a basic loop here.
    for ( var feature in tests ) {
        if ( hasOwnProp(tests, feature) ) {
            // run the test, throw the return value into the Modernizr,
            //   then based on that boolean, define an appropriate className
            //   and push it into an array of classes we'll join later.
            featureName  = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();

            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
        }
    }

    /*>>webforms*/
    // input tests need to run.
    Modernizr.input || webforms();
    /*>>webforms*/


    /**
     * addTest allows the user to define their own feature tests
     * the result will be added onto the Modernizr object,
     * as well as an appropriate className set on the html element
     *
     * @param feature - String naming the feature
     * @param test - Function returning true if feature is supported, false if not
     */
     Modernizr.addTest = function ( feature, test ) {
       if ( typeof feature == 'object' ) {
         for ( var key in feature ) {
           if ( hasOwnProp( feature, key ) ) {
             Modernizr.addTest( key, feature[ key ] );
           }
         }
       } else {

         feature = feature.toLowerCase();

         if ( Modernizr[feature] !== undefined ) {
           // we're going to quit if you're trying to overwrite an existing test
           // if we were to allow it, we'd do this:
           //   var re = new RegExp("\\b(no-)?" + feature + "\\b");
           //   docElement.className = docElement.className.replace( re, '' );
           // but, no rly, stuff 'em.
           return Modernizr;
         }

         test = typeof test == 'function' ? test() : test;

         if (typeof enableClasses !== "undefined" && enableClasses) {
           docElement.className += ' ' + (test ? '' : 'no-') + feature;
         }
         Modernizr[feature] = test;

       }

       return Modernizr; // allow chaining.
     };


    // Reset modElem.cssText to nothing to reduce memory footprint.
    setCss('');
    modElem = inputElem = null;

    /*>>shiv*/
    /**
     * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
     */
    ;(function(window, document) {
        /*jshint evil:true */
        /** version */
        var version = '3.7.0';

        /** Preset options */
        var options = window.html5 || {};

        /** Used to skip problem elements */
        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;

        /** Not all elements can be cloned in IE **/
        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;

        /** Detect whether the browser supports default html5 styles */
        var supportsHtml5Styles;

        /** Name of the expando, to work with multiple documents or to re-shiv one document */
        var expando = '_html5shiv';

        /** The id for the the documents expando */
        var expanID = 0;

        /** Cached data for each document */
        var expandoData = {};

        /** Detect whether the browser supports unknown elements */
        var supportsUnknownElements;

        (function() {
          try {
            var a = document.createElement('a');
            a.innerHTML = '<xyz></xyz>';
            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
            supportsHtml5Styles = ('hidden' in a);

            supportsUnknownElements = a.childNodes.length == 1 || (function() {
              // assign a false positive if unable to shiv
              (document.createElement)('a');
              var frag = document.createDocumentFragment();
              return (
                typeof frag.cloneNode == 'undefined' ||
                typeof frag.createDocumentFragment == 'undefined' ||
                typeof frag.createElement == 'undefined'
              );
            }());
          } catch(e) {
            // assign a false positive if detection fails => unable to shiv
            supportsHtml5Styles = true;
            supportsUnknownElements = true;
          }

        }());

        /*--------------------------------------------------------------------------*/

        /**
         * Creates a style sheet with the given CSS text and adds it to the document.
         * @private
         * @param {Document} ownerDocument The document.
         * @param {String} cssText The CSS text.
         * @returns {StyleSheet} The style element.
         */
        function addStyleSheet(ownerDocument, cssText) {
          var p = ownerDocument.createElement('p'),
          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

          p.innerHTML = 'x<style>' + cssText + '</style>';
          return parent.insertBefore(p.lastChild, parent.firstChild);
        }

        /**
         * Returns the value of `html5.elements` as an array.
         * @private
         * @returns {Array} An array of shived element node names.
         */
        function getElements() {
          var elements = html5.elements;
          return typeof elements == 'string' ? elements.split(' ') : elements;
        }

        /**
         * Returns the data associated to the given document
         * @private
         * @param {Document} ownerDocument The document.
         * @returns {Object} An object of data.
         */
        function getExpandoData(ownerDocument) {
          var data = expandoData[ownerDocument[expando]];
          if (!data) {
            data = {};
            expanID++;
            ownerDocument[expando] = expanID;
            expandoData[expanID] = data;
          }
          return data;
        }

        /**
         * returns a shived element for the given nodeName and document
         * @memberOf html5
         * @param {String} nodeName name of the element
         * @param {Document} ownerDocument The context document.
         * @returns {Object} The shived element.
         */
        function createElement(nodeName, ownerDocument, data){
          if (!ownerDocument) {
            ownerDocument = document;
          }
          if(supportsUnknownElements){
            return ownerDocument.createElement(nodeName);
          }
          if (!data) {
            data = getExpandoData(ownerDocument);
          }
          var node;

          if (data.cache[nodeName]) {
            node = data.cache[nodeName].cloneNode();
          } else if (saveClones.test(nodeName)) {
            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
          } else {
            node = data.createElem(nodeName);
          }

          // Avoid adding some elements to fragments in IE < 9 because
          // * Attributes like `name` or `type` cannot be set/changed once an element
          //   is inserted into a document/fragment
          // * Link elements with `src` attributes that are inaccessible, as with
          //   a 403 response, will cause the tab/window to crash
          // * Script elements appended to fragments will execute when their `src`
          //   or `text` property is set
          return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;
        }

        /**
         * returns a shived DocumentFragment for the given document
         * @memberOf html5
         * @param {Document} ownerDocument The context document.
         * @returns {Object} The shived DocumentFragment.
         */
        function createDocumentFragment(ownerDocument, data){
          if (!ownerDocument) {
            ownerDocument = document;
          }
          if(supportsUnknownElements){
            return ownerDocument.createDocumentFragment();
          }
          data = data || getExpandoData(ownerDocument);
          var clone = data.frag.cloneNode(),
          i = 0,
          elems = getElements(),
          l = elems.length;
          for(;i<l;i++){
            clone.createElement(elems[i]);
          }
          return clone;
        }

        /**
         * Shivs the `createElement` and `createDocumentFragment` methods of the document.
         * @private
         * @param {Document|DocumentFragment} ownerDocument The document.
         * @param {Object} data of the document.
         */
        function shivMethods(ownerDocument, data) {
          if (!data.cache) {
            data.cache = {};
            data.createElem = ownerDocument.createElement;
            data.createFrag = ownerDocument.createDocumentFragment;
            data.frag = data.createFrag();
          }


          ownerDocument.createElement = function(nodeName) {
            //abort shiv
            if (!html5.shivMethods) {
              return data.createElem(nodeName);
            }
            return createElement(nodeName, ownerDocument, data);
          };

          ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
                                                          'var n=f.cloneNode(),c=n.createElement;' +
                                                          'h.shivMethods&&(' +
                                                          // unroll the `createElement` calls
                                                          getElements().join().replace(/[\w\-]+/g, function(nodeName) {
            data.createElem(nodeName);
            data.frag.createElement(nodeName);
            return 'c("' + nodeName + '")';
          }) +
            ');return n}'
                                                         )(html5, data.frag);
        }

        /*--------------------------------------------------------------------------*/

        /**
         * Shivs the given document.
         * @memberOf html5
         * @param {Document} ownerDocument The document to shiv.
         * @returns {Document} The shived document.
         */
        function shivDocument(ownerDocument) {
          if (!ownerDocument) {
            ownerDocument = document;
          }
          var data = getExpandoData(ownerDocument);

          if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
            data.hasCSS = !!addStyleSheet(ownerDocument,
                                          // corrects block display not defined in IE6/7/8/9
                                          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +
                                            // adds styling not present in IE6/7/8/9
                                            'mark{background:#FF0;color:#000}' +
                                            // hides non-rendered elements
                                            'template{display:none}'
                                         );
          }
          if (!supportsUnknownElements) {
            shivMethods(ownerDocument, data);
          }
          return ownerDocument;
        }

        /*--------------------------------------------------------------------------*/

        /**
         * The `html5` object is exposed so that more elements can be shived and
         * existing shiving can be detected on iframes.
         * @type Object
         * @example
         *
         * // options can be changed before the script is included
         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
         */
        var html5 = {

          /**
           * An array or space separated string of node names of the elements to shiv.
           * @memberOf html5
           * @type Array|String
           */
          'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',

          /**
           * current version of html5shiv
           */
          'version': version,

          /**
           * A flag to indicate that the HTML5 style sheet should be inserted.
           * @memberOf html5
           * @type Boolean
           */
          'shivCSS': (options.shivCSS !== false),

          /**
           * Is equal to true if a browser supports creating unknown/HTML5 elements
           * @memberOf html5
           * @type boolean
           */
          'supportsUnknownElements': supportsUnknownElements,

          /**
           * A flag to indicate that the document's `createElement` and `createDocumentFragment`
           * methods should be overwritten.
           * @memberOf html5
           * @type Boolean
           */
          'shivMethods': (options.shivMethods !== false),

          /**
           * A string to describe the type of `html5` object ("default" or "default print").
           * @memberOf html5
           * @type String
           */
          'type': 'default',

          // shivs the document according to the specified `html5` object options
          'shivDocument': shivDocument,

          //creates a shived element
          createElement: createElement,

          //creates a shived documentFragment
          createDocumentFragment: createDocumentFragment
        };

        /*--------------------------------------------------------------------------*/

        // expose html5
        window.html5 = html5;

        // shiv the document
        shivDocument(document);

    }(this, document));
    /*>>shiv*/

    // Assign private properties to the return object with prefix
    Modernizr._version      = version;

    // expose these for the plugin API. Look in the source for how to join() them against your input
    /*>>prefixes*/
    Modernizr._prefixes     = prefixes;
    /*>>prefixes*/
    /*>>domprefixes*/
    Modernizr._domPrefixes  = domPrefixes;
    Modernizr._cssomPrefixes  = cssomPrefixes;
    /*>>domprefixes*/

    /*>>mq*/
    // Modernizr.mq tests a given media query, live against the current state of the window
    // A few important notes:
    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false
    //   * A max-width or orientation query will be evaluated against the current state, which may change later.
    //   * You must specify values. Eg. If you are testing support for the min-width media query use:
    //       Modernizr.mq('(min-width:0)')
    // usage:
    // Modernizr.mq('only screen and (max-width:768)')
    Modernizr.mq            = testMediaQuery;
    /*>>mq*/

    /*>>hasevent*/
    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on
    // Modernizr.hasEvent('gesturestart', elem)
    Modernizr.hasEvent      = isEventSupported;
    /*>>hasevent*/

    /*>>testprop*/
    // Modernizr.testProp() investigates whether a given style property is recognized
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testProp('pointerEvents')
    Modernizr.testProp      = function(prop){
        return testProps([prop]);
    };
    /*>>testprop*/

    /*>>testallprops*/
    // Modernizr.testAllProps() investigates whether a given style property,
    //   or any of its vendor-prefixed variants, is recognized
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testAllProps('boxSizing')
    Modernizr.testAllProps  = testPropsAll;
    /*>>testallprops*/


    /*>>teststyles*/
    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards
    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })
    Modernizr.testStyles    = injectElementWithStyles;
    /*>>teststyles*/


    /*>>prefixed*/
    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input
    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'

    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.
    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:
    //
    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');

    // If you're trying to ascertain which transition end event to bind to, you might do something like...
    //
    //     var transEndEventNames = {
    //       'WebkitTransition' : 'webkitTransitionEnd',
    //       'MozTransition'    : 'transitionend',
    //       'OTransition'      : 'oTransitionEnd',
    //       'msTransition'     : 'MSTransitionEnd',
    //       'transition'       : 'transitionend'
    //     },
    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];

    Modernizr.prefixed      = function(prop, obj, elem){
      if(!obj) {
        return testPropsAll(prop, 'pfx');
      } else {
        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
        return testPropsAll(prop, obj, elem);
      }
    };
    /*>>prefixed*/


    /*>>cssclasses*/
    // Remove "no-js" class from <html> element, if it exists:
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +

                            // Add the new classes to the <html> element.
                            (enableClasses ? ' js ' + classes.join(' ') : '');
    /*>>cssclasses*/

    return Modernizr;

})(this, this.document);


/**
* ### Version 2.0.0a
* Mixing javascript crops for a perfect flavour.
* /kæfˈeɪ/ (haitian creole) A beverage made by infusing the beans of the coffee plant in hot water.
* http://absolunet.github.io/kafe
*
* @module kafe
* @main kafe
*/
window.kafe = (function(window, undefined){

	var
		// check if module imported
		_exists = function(name) {
			try {
				return eval("("+name+" != undefined)");
			} catch(e) {
				return false;
			}
		},

		// delete var (try/catch for ie8)
		_delete = function(name) {
			try {
				eval("delete "+name+";");
			} catch(e) {
				eval(name+" = undefined;");
			}
		},

		// ie version
		_ie = (function(){
			var
				v = 3,
				div = document.createElement('div'),
				all = div.getElementsByTagName('i')
			;
			while ((
				div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
				all[0]
			));

			return v > 4 ? v : undefined;
		}),

		// jquery methods
		_jQueryMethods = {},


		/**
		* ### Version 2.0.0a
		* kafe core
		*
		* @module kafe
		* @class kafe
		*/
		core = {

			/**
			* kafe version
			*
			* @property _vesyon 
			* @type String
			**/
			_vesyon: '2.0.0a',

			/**
			* kafe author
			*
			* @property _griyaj 
			* @type String
			**/
			_griyaj: 'absolunet.com',

			/**
			* Versions of dependencies / kafe modules
			*
			* @property _chaje 
			* @type Object
			**/
			_chaje: {
				'dependencies.jQuery':    window.kafejQuery().jquery,
				'dependencies.LoDash':    window._.VERSION,
				'dependencies.Modernizr': window.Modernizr._version
			},

			// isolate core dependencies
			dependencies: {

				/**
				* jQuery defined under window.kafejQuery  
				* ref: [http://jquery.com/](http://jquery.com/)
				*
				* @property dependencies.jQuery 
				* @type Object
				**/
				jQuery: window.kafejQuery,

				/**
				* Lo-Dash defined under window._  
				* ref: [http://lodash.com/](http://lodash.com/)
				*
				* @property dependencies.LoDash 
				* @type Object
				**/
				LoDash: window._,

				/**
				* Modernizr defined under window.Modernizr  
				* ref: [http://modernizr.com/](http://modernizr.com/)
				*
				* @property dependencies.Modernizr 
				* @type Object
				**/
				Modernizr: window.Modernizr
			},

			cms:    {},
			ext:    {},
			plugin: {}
		}
	;
	_delete('window.kafejQuery');


	// add flags for ie9 and less
	if (_ie && _ie < 10) {
		var classes = ['is-ie'+_ie];

		for (var i=6; i<10; ++i) {
			if (_ie < i) { classes.push('lt-ie'+_ie); }
			if (_ie > i) { classes.push('gt-ie'+_ie); }
		}

		$(function() { $('html').addClass(classes.join(' ')); });
	}


	// miscellaneous core functions
	core.fn = {

		/**
		* Create a instantiable object  
		* By John Resig (MIT Licensed)  
		* ref: [http://ejohn.org/blog/simple-class-instantiation/](http://ejohn.org/blog/simple-class-instantiation/)
		*
		* @method fn.createInstantiableObject
		* @return {Object} The instantiable object
		*/
		createInstantiableObject: function() {
			return function(args){
				if (this instanceof arguments.callee) {
					if (typeof this.__constructor == 'function') {
						this.__ = {};
						this.__constructor.apply(this, (args.callee) ? args : arguments);
					}
				} else {
					return new arguments.callee(arguments);
				}
			};
		},


		/**
		* Return the language if available or else 'en'
		*
		* @method fn.lang
		* @param {Object} dict The dictionary to check against
		* @param {String} lang The language to check
		* @return {String} The available language
		*/
		lang: function(dict, lang) {
			lang = (!!lang) ? lang : core.env('lang');
			return (!!dict[lang]) ? lang : 'en';
		},


		/**
		* Delete the variable (patch for ie8)
		*
		* @method fn.deleteVar
		* @param {String} name Name of the variable to delete
		*/
		deleteVar: function(name) {
			_delete(name);
		},


		/**
		* Add method as jQuery plugin
		*
		* @method fn.plugIntojQuery
		* @param {String} name The jQuery plugin name
		* @param {Object[Function]} methods Action:Method hash
		*/
		plugIntojQuery: function(name, methods) {
			var
				$  = core.dependencies.jQuery,
				id = 'kafe'+name
			;
			name = name || 'CORE';

			if ($.fn[id] === undefined) {
				_jQueryMethods[name] = {};

				$.fn[id] = function() {
					var args = $.makeArray(arguments);
					return this.each(function() {
						_jQueryMethods[name][args.shift()]( this, args );
					});
				};
			}

			$.extend(_jQueryMethods[name], methods);
		}
	};



	/**
	* Environment constants
	*
	* @method env
	* @param {String} name The constant to get/set
	* @param {String} [value] The value to set
	* @return {String} The value of the environment constant
	*/
	core.env = (function(){

		// base vals
		var _data = {
			culture: '',
			lang:    '',
			page:    '',
			tmpl:    '',
			ie:      _ie
		};

		// grab kafe env
		_data.culture = document.documentElement.id.toLowerCase()   || '';
		_data.lang    = document.documentElement.lang.toLowerCase() || '';
		_data.page    = document.documentElement.getAttribute('data-kafe-page') || '';
		_data.tmpl    = document.documentElement.getAttribute('data-kafe-tmpl') || '';
		_data.tmpl    = _data.tmpl.split(' ');

		// public method
		return function(name, value) {
			var updatable = '';

			if (value !== undefined) {

				// if not already set 
				if (!(_data[name] !== undefined && updatable.search(new RegExp(':'+name+':')) == -1)) {
					_data[name] = value;

				// throw error
				} else {
					throw core.error(new Error("kafe.env > property '"+name+"' already defined"));
				}
			}

			return _data[name];
		};
	})();


	/**
	* Add module to core
	*
	* @method bonify
	* @param {Object} options The options
	*	@param {String} options.name The module name
	*	@param {String} options.version The module version
	*	@param {Object} options.obj The module itself
	*/
	core.bonify = function(options) {

		// if not already extended
		if (!_exists('core.'+options.name)) {

			core._chaje[options.name] = options.version;
			eval('this.'+options.name+' = arguments[0].obj;');

		// throw error
		} else {
			throw core.error('kafe.'+options.name+' already exists');
		}
	};


	/**
	* Throw kafe errors
	*
	* @method error
	* @param {Error} error The error with description
	* @return {Error} error The error
	* @example
	*	kafe.error(new Error('barf'));
	*/
	core.error = function(e) {
		var msg = ((!!e.description) ? e.description : e.message);
		e.description = e.message = '<kafe:erè> : '+ ((!!msg) ? msg : 'anonim');
		return (_ie && _ie == 8) ? new Error(e) : e;
	};


	return core;

})(window);





// Avoid `console` errors in browsers that lack a console.
// (c) HTML5 Boilerplate
(function() {
	var method;
	var noop = function () {};
	var methods = [
		'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
		'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
		'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
		'timeStamp', 'trace', 'warn'
	];
	var length = methods.length;
	var console = (window.console = window.console || {});

	while (length--) {
		method = methods[length];

		// Only stub undefined methods.
		if (!console[method]) {
			console[method] = noop;
		}
	}
}());

/*!
 * jQuery BBQ: Back Button & Query Library - v1.3pre - 8/26/2010
 * http://benalman.com/projects/jquery-bbq-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery BBQ: Back Button & Query Library
//
// *Version: 1.3pre, Last updated: 8/26/2010*
// 
// Project Home - http://benalman.com/projects/jquery-bbq-plugin/
// GitHub       - http://github.com/cowboy/jquery-bbq/
// Source       - http://github.com/cowboy/jquery-bbq/raw/master/jquery.ba-bbq.js
// (Minified)   - http://github.com/cowboy/jquery-bbq/raw/master/jquery.ba-bbq.min.js (2.2kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// Basic AJAX     - http://benalman.com/code/projects/jquery-bbq/examples/fragment-basic/
// Advanced AJAX  - http://benalman.com/code/projects/jquery-bbq/examples/fragment-advanced/
// jQuery UI Tabs - http://benalman.com/code/projects/jquery-bbq/examples/fragment-jquery-ui-tabs/
// Deparam        - http://benalman.com/code/projects/jquery-bbq/examples/deparam/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-bbq/unit/
// 
// About: Release History
// 
// 1.3pre - (8/26/2010) Integrated <jQuery hashchange event> v1.3, which adds
//         document.title and document.domain support in IE6/7, BlackBerry
//         support, better Iframe hiding for accessibility reasons, and the new
//         <jQuery.fn.hashchange> "shortcut" method. Added the
//         <jQuery.param.sorted> method which reduces the possibility of
//         extraneous hashchange event triggering. Added the
//         <jQuery.param.fragment.ajaxCrawlable> method which can be used to
//         enable Google "AJAX Crawlable mode."
// 1.2.1 - (2/17/2010) Actually fixed the stale window.location Safari bug from
//         <jQuery hashchange event> in BBQ, which was the main reason for the
//         previous release!
// 1.2   - (2/16/2010) Integrated <jQuery hashchange event> v1.2, which fixes a
//         Safari bug, the event can now be bound before DOM ready, and IE6/7
//         page should no longer scroll when the event is first bound. Also
//         added the <jQuery.param.fragment.noEscape> method, and reworked the
//         <hashchange event (BBQ)> internal "add" method to be compatible with
//         changes made to the jQuery 1.4.2 special events API.
// 1.1.1 - (1/22/2010) Integrated <jQuery hashchange event> v1.1, which fixes an
//         obscure IE8 EmulateIE7 meta tag compatibility mode bug.
// 1.1   - (1/9/2010) Broke out the jQuery BBQ event.special <hashchange event>
//         functionality into a separate plugin for users who want just the
//         basic event & back button support, without all the extra awesomeness
//         that BBQ provides. This plugin will be included as part of jQuery BBQ,
//         but also be available separately. See <jQuery hashchange event>
//         plugin for more information. Also added the <jQuery.bbq.removeState>
//         method and added additional <jQuery.deparam> examples.
// 1.0.3 - (12/2/2009) Fixed an issue in IE 6 where location.search and
//         location.hash would report incorrectly if the hash contained the ?
//         character. Also <jQuery.param.querystring> and <jQuery.param.fragment>
//         will no longer parse params out of a URL that doesn't contain ? or #,
//         respectively.
// 1.0.2 - (10/10/2009) Fixed an issue in IE 6/7 where the hidden IFRAME caused
//         a "This page contains both secure and nonsecure items." warning when
//         used on an https:// page.
// 1.0.1 - (10/7/2009) Fixed an issue in IE 8. Since both "IE7" and "IE8
//         Compatibility View" modes erroneously report that the browser
//         supports the native window.onhashchange event, a slightly more
//         robust test needed to be added.
// 1.0   - (10/2/2009) Initial release

(function($,window){
  '$:nomunge'; // Used by YUI compressor.
  
  // Some convenient shortcuts.
  var undefined,
    aps = Array.prototype.slice,
    decode = decodeURIComponent,
    
    // Method / object references.
    jq_param = $.param,
    jq_param_sorted,
    jq_param_fragment,
    jq_deparam,
    jq_deparam_fragment,
    jq_bbq = $.bbq = $.bbq || {},
    jq_bbq_pushState,
    jq_bbq_getState,
    jq_elemUrlAttr,
    special = $.event.special,
    
    // Reused strings.
    str_hashchange = 'hashchange',
    str_querystring = 'querystring',
    str_fragment = 'fragment',
    str_elemUrlAttr = 'elemUrlAttr',
    str_href = 'href',
    str_src = 'src',
    
    // Reused RegExp.
    re_params_querystring = /^.*\?|#.*$/g,
    re_params_fragment,
    re_fragment,
    re_no_escape,
    
    ajax_crawlable,
    fragment_prefix,
    
    // Used by jQuery.elemUrlAttr.
    elemUrlAttr_cache = {};
  
  // A few commonly used bits, broken out to help reduce minified file size.
  
  function is_string( arg ) {
    return typeof arg === 'string';
  };
  
  // Why write the same function twice? Let's curry! Mmmm, curry..
  
  function curry( func ) {
    var args = aps.call( arguments, 1 );
    
    return function() {
      return func.apply( this, args.concat( aps.call( arguments ) ) );
    };
  };
  
  // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!
  function get_fragment( url ) {
    return url.replace( re_fragment, '$2' );
  };
  
  // Get location.search (or what you'd expect location.search to be) sans any
  // leading #. Thanks for making this necessary, IE6!
  function get_querystring( url ) {
    return url.replace( /(?:^[^?#]*\?([^#]*).*$)?.*/, '$1' );
  };
  
  // Section: Param (to string)
  // 
  // Method: jQuery.param.querystring
  // 
  // Retrieve the query string from a URL or if no arguments are passed, the
  // current window.location.href.
  // 
  // Usage:
  // 
  // > jQuery.param.querystring( [ url ] );
  // 
  // Arguments:
  // 
  //  url - (String) A URL containing query string params to be parsed. If url
  //    is not passed, the current window.location.href is used.
  // 
  // Returns:
  // 
  //  (String) The parsed query string, with any leading "?" removed.
  //
  
  // Method: jQuery.param.querystring (build url)
  // 
  // Merge a URL, with or without pre-existing query string params, plus any
  // object, params string or URL containing query string params into a new URL.
  // 
  // Usage:
  // 
  // > jQuery.param.querystring( url, params [, merge_mode ] );
  // 
  // Arguments:
  // 
  //  url - (String) A valid URL for params to be merged into. This URL may
  //    contain a query string and/or fragment (hash).
  //  params - (String) A params string or URL containing query string params to
  //    be merged into url.
  //  params - (Object) A params object to be merged into url.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  // 
  //    * 0: params in the params argument will override any query string
  //         params in url.
  //    * 1: any query string params in url will override params in the params
  //         argument.
  //    * 2: params argument will completely replace any query string in url.
  // 
  // Returns:
  // 
  //  (String) A URL with a urlencoded query string in the format '?a=b&c=d&e=f'.
  
  // Method: jQuery.param.fragment
  // 
  // Retrieve the fragment (hash) from a URL or if no arguments are passed, the
  // current window.location.href.
  // 
  // Usage:
  // 
  // > jQuery.param.fragment( [ url ] );
  // 
  // Arguments:
  // 
  //  url - (String) A URL containing fragment (hash) params to be parsed. If
  //    url is not passed, the current window.location.href is used.
  // 
  // Returns:
  // 
  //  (String) The parsed fragment (hash) string, with any leading "#" removed.
  
  // Method: jQuery.param.fragment (build url)
  // 
  // Merge a URL, with or without pre-existing fragment (hash) params, plus any
  // object, params string or URL containing fragment (hash) params into a new
  // URL.
  // 
  // Usage:
  // 
  // > jQuery.param.fragment( url, params [, merge_mode ] );
  // 
  // Arguments:
  // 
  //  url - (String) A valid URL for params to be merged into. This URL may
  //    contain a query string and/or fragment (hash).
  //  params - (String) A params string or URL containing fragment (hash) params
  //    to be merged into url.
  //  params - (Object) A params object to be merged into url.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  // 
  //    * 0: params in the params argument will override any fragment (hash)
  //         params in url.
  //    * 1: any fragment (hash) params in url will override params in the
  //         params argument.
  //    * 2: params argument will completely replace any query string in url.
  // 
  // Returns:
  // 
  //  (String) A URL with a urlencoded fragment (hash) in the format '#a=b&c=d&e=f'.
  
  function jq_param_sub( is_fragment, get_func, url, params, merge_mode ) {
    var result,
      qs,
      matches,
      url_params,
      hash;
    
    if ( params !== undefined ) {
      // Build URL by merging params into url string.
      
      // matches[1] = url part that precedes params, not including trailing ?/#
      // matches[2] = params, not including leading ?/#
      // matches[3] = if in 'querystring' mode, hash including leading #, otherwise ''
      matches = url.match( is_fragment ? re_fragment : /^([^#?]*)\??([^#]*)(#?.*)/ );
      
      // Get the hash if in 'querystring' mode, and it exists.
      hash = matches[3] || '';
      
      if ( merge_mode === 2 && is_string( params ) ) {
        // If merge_mode is 2 and params is a string, merge the fragment / query
        // string into the URL wholesale, without converting it into an object.
        qs = params.replace( is_fragment ? re_params_fragment : re_params_querystring, '' );
        
      } else {
        // Convert relevant params in url to object.
        url_params = jq_deparam( matches[2] );
        
        params = is_string( params )
          
          // Convert passed params string into object.
          ? jq_deparam[ is_fragment ? str_fragment : str_querystring ]( params )
          
          // Passed params object.
          : params;
        
        qs = merge_mode === 2 ? params                              // passed params replace url params
          : merge_mode === 1  ? $.extend( {}, params, url_params )  // url params override passed params
          : $.extend( {}, url_params, params );                     // passed params override url params
        
        // Convert params object into a sorted params string.
        qs = jq_param_sorted( qs );
        
        // Unescape characters specified via $.param.noEscape. Since only hash-
        // history users have requested this feature, it's only enabled for
        // fragment-related params strings.
        if ( is_fragment ) {
          qs = qs.replace( re_no_escape, decode );
        }
      }
      
      // Build URL from the base url, querystring and hash. In 'querystring'
      // mode, ? is only added if a query string exists. In 'fragment' mode, #
      // is always added.
      result = matches[1] + ( is_fragment ? fragment_prefix : qs || !matches[1] ? '?' : '' ) + qs + hash;
      
    } else {
      // If URL was passed in, parse params from URL string, otherwise parse
      // params from window.location.href.
      result = get_func( url !== undefined ? url : location.href );
    }
    
    return result;
  };
  
  jq_param[ str_querystring ]                  = curry( jq_param_sub, 0, get_querystring );
  jq_param[ str_fragment ] = jq_param_fragment = curry( jq_param_sub, 1, get_fragment );
  
  // Method: jQuery.param.sorted
  // 
  // Returns a params string equivalent to that returned by the internal
  // jQuery.param method, but sorted, which makes it suitable for use as a
  // cache key.
  // 
  // For example, in most browsers jQuery.param({z:1,a:2}) returns "z=1&a=2"
  // and jQuery.param({a:2,z:1}) returns "a=2&z=1". Even though both the
  // objects being serialized and the resulting params strings are equivalent,
  // if these params strings were set into the location.hash fragment
  // sequentially, the hashchange event would be triggered unnecessarily, since
  // the strings are different (even though the data described by them is the
  // same). By sorting the params string, unecessary hashchange event triggering
  // can be avoided.
  // 
  // Usage:
  // 
  // > jQuery.param.sorted( obj [, traditional ] );
  // 
  // Arguments:
  // 
  //  obj - (Object) An object to be serialized.
  //  traditional - (Boolean) Params deep/shallow serialization mode. See the
  //    documentation at http://api.jquery.com/jQuery.param/ for more detail.
  // 
  // Returns:
  // 
  //  (String) A sorted params string.
  
  jq_param.sorted = jq_param_sorted = function( a, traditional ) {
    var arr = [],
      obj = {};
    
    $.each( jq_param( a, traditional ).split( '&' ), function(i,v){
      var key = v.replace( /(?:%5B|=).*$/, '' ),
        key_obj = obj[ key ];
      
      if ( !key_obj ) {
        key_obj = obj[ key ] = [];
        arr.push( key );
      }
      
      key_obj.push( v );
    });
    
    return $.map( arr.sort(), function(v){
      return obj[ v ];
    }).join( '&' );
  };
  
  // Method: jQuery.param.fragment.noEscape
  // 
  // Specify characters that will be left unescaped when fragments are created
  // or merged using <jQuery.param.fragment>, or when the fragment is modified
  // using <jQuery.bbq.pushState>. This option only applies to serialized data
  // object fragments, and not set-as-string fragments. Does not affect the
  // query string. Defaults to ",/" (comma, forward slash).
  // 
  // Note that this is considered a purely aesthetic option, and will help to
  // create URLs that "look pretty" in the address bar or bookmarks, without
  // affecting functionality in any way. That being said, be careful to not
  // unescape characters that are used as delimiters or serve a special
  // purpose, such as the "#?&=+" (octothorpe, question mark, ampersand,
  // equals, plus) characters.
  // 
  // Usage:
  // 
  // > jQuery.param.fragment.noEscape( [ chars ] );
  // 
  // Arguments:
  // 
  //  chars - (String) The characters to not escape in the fragment. If
  //    unspecified, defaults to empty string (escape all characters).
  // 
  // Returns:
  // 
  //  Nothing.
  
  jq_param_fragment.noEscape = function( chars ) {
    chars = chars || '';
    var arr = $.map( chars.split(''), encodeURIComponent );
    re_no_escape = new RegExp( arr.join('|'), 'g' );
  };
  
  // A sensible default. These are the characters people seem to complain about
  // "uglifying up the URL" the most.
  jq_param_fragment.noEscape( ',/' );
  
  // Method: jQuery.param.fragment.ajaxCrawlable
  // 
  // TODO: DESCRIBE
  // 
  // Usage:
  // 
  // > jQuery.param.fragment.ajaxCrawlable( [ state ] );
  // 
  // Arguments:
  // 
  //  state - (Boolean) TODO: DESCRIBE
  // 
  // Returns:
  // 
  //  (Boolean) The current ajaxCrawlable state.
  
  jq_param_fragment.ajaxCrawlable = function( state ) {
    if ( state !== undefined ) {
      if ( state ) {
        re_params_fragment = /^.*(?:#!|#)/;
        re_fragment = /^([^#]*)(?:#!|#)?(.*)$/;
        fragment_prefix = '#!';
      } else {
        re_params_fragment = /^.*#/;
        re_fragment = /^([^#]*)#?(.*)$/;
        fragment_prefix = '#';
      }
      ajax_crawlable = !!state;
    }
    
    return ajax_crawlable;
  };
  
  jq_param_fragment.ajaxCrawlable( 0 );
  
  // Section: Deparam (from string)
  // 
  // Method: jQuery.deparam
  // 
  // Deserialize a params string into an object, optionally coercing numbers,
  // booleans, null and undefined values; this method is the counterpart to the
  // internal jQuery.param method.
  // 
  // Usage:
  // 
  // > jQuery.deparam( params [, coerce ] );
  // 
  // Arguments:
  // 
  //  params - (String) A params string to be parsed.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false if omitted.
  // 
  // Returns:
  // 
  //  (Object) An object representing the deserialized params string.
  
  $.deparam = jq_deparam = function( params, coerce ) {
    var obj = {},
      coerce_types = { 'true': !0, 'false': !1, 'null': null };
    
    // Iterate over all name=value pairs.
    $.each( params.replace( /\+/g, ' ' ).split( '&' ), function(j,v){
      var param = v.split( '=' ),
        key = decode( param[0] ),
        val,
        cur = obj,
        i = 0,
        
        // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it
        // into its component parts.
        keys = key.split( '][' ),
        keys_last = keys.length - 1;
      
      // If the first keys part contains [ and the last ends with ], then []
      // are correctly balanced.
      if ( /\[/.test( keys[0] ) && /\]$/.test( keys[ keys_last ] ) ) {
        // Remove the trailing ] from the last keys part.
        keys[ keys_last ] = keys[ keys_last ].replace( /\]$/, '' );
        
        // Split first keys part into two parts on the [ and add them back onto
        // the beginning of the keys array.
        keys = keys.shift().split('[').concat( keys );
        
        keys_last = keys.length - 1;
      } else {
        // Basic 'foo' style key.
        keys_last = 0;
      }
      
      // Are we dealing with a name=value pair, or just a name?
      if ( param.length === 2 ) {
        val = decode( param[1] );
        
        // Coerce values.
        if ( coerce ) {
          val = val && !isNaN(val)            ? +val              // number
            : val === 'undefined'             ? undefined         // undefined
            : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null
            : val;                                                // string
        }
        
        if ( keys_last ) {
          // Complex key, build deep object structure based on a few rules:
          // * The 'cur' pointer starts at the object top-level.
          // * [] = array push (n is set to array length), [n] = array if n is 
          //   numeric, otherwise object.
          // * If at the last keys part, set the value.
          // * For each keys part, if the current level is undefined create an
          //   object or array based on the type of the next keys part.
          // * Move the 'cur' pointer to the next level.
          // * Rinse & repeat.
          for ( ; i <= keys_last; i++ ) {
            key = keys[i] === '' ? cur.length : keys[i];
            cur = cur[key] = i < keys_last
              ? cur[key] || ( keys[i+1] && isNaN( keys[i+1] ) ? {} : [] )
              : val;
          }
          
        } else {
          // Simple key, even simpler rules, since only scalars and shallow
          // arrays are allowed.
          
          if ( $.isArray( obj[key] ) ) {
            // val is already an array, so push on the next value.
            obj[key].push( val );
            
          } else if ( obj[key] !== undefined ) {
            // val isn't an array, but since a second value has been specified,
            // convert val into an array.
            obj[key] = [ obj[key], val ];
            
          } else {
            // val is a scalar.
            obj[key] = val;
          }
        }
        
      } else if ( key ) {
        // No value was defined, so set something meaningful.
        obj[key] = coerce
          ? undefined
          : '';
      }
    });
    
    return obj;
  };
  
  // Method: jQuery.deparam.querystring
  // 
  // Parse the query string from a URL or the current window.location.href,
  // deserializing it into an object, optionally coercing numbers, booleans,
  // null and undefined values.
  // 
  // Usage:
  // 
  // > jQuery.deparam.querystring( [ url ] [, coerce ] );
  // 
  // Arguments:
  // 
  //  url - (String) An optional params string or URL containing query string
  //    params to be parsed. If url is omitted, the current
  //    window.location.href is used.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false if omitted.
  // 
  // Returns:
  // 
  //  (Object) An object representing the deserialized params string.
  
  // Method: jQuery.deparam.fragment
  // 
  // Parse the fragment (hash) from a URL or the current window.location.href,
  // deserializing it into an object, optionally coercing numbers, booleans,
  // null and undefined values.
  // 
  // Usage:
  // 
  // > jQuery.deparam.fragment( [ url ] [, coerce ] );
  // 
  // Arguments:
  // 
  //  url - (String) An optional params string or URL containing fragment (hash)
  //    params to be parsed. If url is omitted, the current window.location.href
  //    is used.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false if omitted.
  // 
  // Returns:
  // 
  //  (Object) An object representing the deserialized params string.
  
  function jq_deparam_sub( is_fragment, url_or_params, coerce ) {
    if ( url_or_params === undefined || typeof url_or_params === 'boolean' ) {
      // url_or_params not specified.
      coerce = url_or_params;
      url_or_params = jq_param[ is_fragment ? str_fragment : str_querystring ]();
    } else {
      url_or_params = is_string( url_or_params )
        ? url_or_params.replace( is_fragment ? re_params_fragment : re_params_querystring, '' )
        : url_or_params;
    }
    
    return jq_deparam( url_or_params, coerce );
  };
  
  jq_deparam[ str_querystring ]                    = curry( jq_deparam_sub, 0 );
  jq_deparam[ str_fragment ] = jq_deparam_fragment = curry( jq_deparam_sub, 1 );
  
  // Section: Element manipulation
  // 
  // Method: jQuery.elemUrlAttr
  // 
  // Get the internal "Default URL attribute per tag" list, or augment the list
  // with additional tag-attribute pairs, in case the defaults are insufficient.
  // 
  // In the <jQuery.fn.querystring> and <jQuery.fn.fragment> methods, this list
  // is used to determine which attribute contains the URL to be modified, if
  // an "attr" param is not specified.
  // 
  // Default Tag-Attribute List:
  // 
  //  a      - href
  //  base   - href
  //  iframe - src
  //  img    - src
  //  input  - src
  //  form   - action
  //  link   - href
  //  script - src
  // 
  // Usage:
  // 
  // > jQuery.elemUrlAttr( [ tag_attr ] );
  // 
  // Arguments:
  // 
  //  tag_attr - (Object) An object containing a list of tag names and their
  //    associated default attribute names in the format { tag: 'attr', ... } to
  //    be merged into the internal tag-attribute list.
  // 
  // Returns:
  // 
  //  (Object) An object containing all stored tag-attribute values.
  
  // Only define function and set defaults if function doesn't already exist, as
  // the urlInternal plugin will provide this method as well.
  $[ str_elemUrlAttr ] || ($[ str_elemUrlAttr ] = function( obj ) {
    return $.extend( elemUrlAttr_cache, obj );
  })({
    a: str_href,
    base: str_href,
    iframe: str_src,
    img: str_src,
    input: str_src,
    form: 'action',
    link: str_href,
    script: str_src
  });
  
  jq_elemUrlAttr = $[ str_elemUrlAttr ];
  
  // Method: jQuery.fn.querystring
  // 
  // Update URL attribute in one or more elements, merging the current URL (with
  // or without pre-existing query string params) plus any params object or
  // string into a new URL, which is then set into that attribute. Like
  // <jQuery.param.querystring (build url)>, but for all elements in a jQuery
  // collection.
  // 
  // Usage:
  // 
  // > jQuery('selector').querystring( [ attr, ] params [, merge_mode ] );
  // 
  // Arguments:
  // 
  //  attr - (String) Optional name of an attribute that will contain a URL to
  //    merge params or url into. See <jQuery.elemUrlAttr> for a list of default
  //    attributes.
  //  params - (Object) A params object to be merged into the URL attribute.
  //  params - (String) A URL containing query string params, or params string
  //    to be merged into the URL attribute.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  //    
  //    * 0: params in the params argument will override any params in attr URL.
  //    * 1: any params in attr URL will override params in the params argument.
  //    * 2: params argument will completely replace any query string in attr
  //         URL.
  // 
  // Returns:
  // 
  //  (jQuery) The initial jQuery collection of elements, but with modified URL
  //  attribute values.
  
  // Method: jQuery.fn.fragment
  // 
  // Update URL attribute in one or more elements, merging the current URL (with
  // or without pre-existing fragment/hash params) plus any params object or
  // string into a new URL, which is then set into that attribute. Like
  // <jQuery.param.fragment (build url)>, but for all elements in a jQuery
  // collection.
  // 
  // Usage:
  // 
  // > jQuery('selector').fragment( [ attr, ] params [, merge_mode ] );
  // 
  // Arguments:
  // 
  //  attr - (String) Optional name of an attribute that will contain a URL to
  //    merge params into. See <jQuery.elemUrlAttr> for a list of default
  //    attributes.
  //  params - (Object) A params object to be merged into the URL attribute.
  //  params - (String) A URL containing fragment (hash) params, or params
  //    string to be merged into the URL attribute.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified, and is as-follows:
  //    
  //    * 0: params in the params argument will override any params in attr URL.
  //    * 1: any params in attr URL will override params in the params argument.
  //    * 2: params argument will completely replace any fragment (hash) in attr
  //         URL.
  // 
  // Returns:
  // 
  //  (jQuery) The initial jQuery collection of elements, but with modified URL
  //  attribute values.
  
  function jq_fn_sub( mode, force_attr, params, merge_mode ) {
    if ( !is_string( params ) && typeof params !== 'object' ) {
      // force_attr not specified.
      merge_mode = params;
      params = force_attr;
      force_attr = undefined;
    }
    
    return this.each(function(){
      var that = $(this),
        
        // Get attribute specified, or default specified via $.elemUrlAttr.
        attr = force_attr || jq_elemUrlAttr()[ ( this.nodeName || '' ).toLowerCase() ] || '',
        
        // Get URL value.
        url = attr && that.attr( attr ) || '';
      
      // Update attribute with new URL.
      that.attr( attr, jq_param[ mode ]( url, params, merge_mode ) );
    });
    
  };
  
  $.fn[ str_querystring ] = curry( jq_fn_sub, str_querystring );
  $.fn[ str_fragment ]    = curry( jq_fn_sub, str_fragment );
  
  // Section: History, hashchange event
  // 
  // Method: jQuery.bbq.pushState
  // 
  // Adds a 'state' into the browser history at the current position, setting
  // location.hash and triggering any bound <hashchange event> callbacks
  // (provided the new state is different than the previous state).
  // 
  // If no arguments are passed, an empty state is created, which is just a
  // shortcut for jQuery.bbq.pushState( {}, 2 ).
  // 
  // Usage:
  // 
  // > jQuery.bbq.pushState( [ params [, merge_mode ] ] );
  // 
  // Arguments:
  // 
  //  params - (String) A serialized params string or a hash string beginning
  //    with # to merge into location.hash.
  //  params - (Object) A params object to merge into location.hash.
  //  merge_mode - (Number) Merge behavior defaults to 0 if merge_mode is not
  //    specified (unless a hash string beginning with # is specified, in which
  //    case merge behavior defaults to 2), and is as-follows:
  // 
  //    * 0: params in the params argument will override any params in the
  //         current state.
  //    * 1: any params in the current state will override params in the params
  //         argument.
  //    * 2: params argument will completely replace current state.
  // 
  // Returns:
  // 
  //  Nothing.
  // 
  // Additional Notes:
  // 
  //  * Setting an empty state may cause the browser to scroll.
  //  * Unlike the fragment and querystring methods, if a hash string beginning
  //    with # is specified as the params agrument, merge_mode defaults to 2.
  
  jq_bbq.pushState = jq_bbq_pushState = function( params, merge_mode ) {
    if ( is_string( params ) && /^#/.test( params ) && merge_mode === undefined ) {
      // Params string begins with # and merge_mode not specified, so completely
      // overwrite window.location.hash.
      merge_mode = 2;
    }
    
    var has_args = params !== undefined,
      // Merge params into window.location using $.param.fragment.
      url = jq_param_fragment( location.href,
        has_args ? params : {}, has_args ? merge_mode : 2 );
    
    // Set new window.location.href. Note that Safari 3 & Chrome barf on
    // location.hash = '#' so the entire URL is set.
    location.href = url;
  };
  
  // Method: jQuery.bbq.getState
  // 
  // Retrieves the current 'state' from the browser history, parsing
  // location.hash for a specific key or returning an object containing the
  // entire state, optionally coercing numbers, booleans, null and undefined
  // values.
  // 
  // Usage:
  // 
  // > jQuery.bbq.getState( [ key ] [, coerce ] );
  // 
  // Arguments:
  // 
  //  key - (String) An optional state key for which to return a value.
  //  coerce - (Boolean) If true, coerces any numbers or true, false, null, and
  //    undefined to their actual value. Defaults to false.
  // 
  // Returns:
  // 
  //  (Anything) If key is passed, returns the value corresponding with that key
  //    in the location.hash 'state', or undefined. If not, an object
  //    representing the entire 'state' is returned.
  
  jq_bbq.getState = jq_bbq_getState = function( key, coerce ) {
    return key === undefined || typeof key === 'boolean'
      ? jq_deparam_fragment( key ) // 'key' really means 'coerce' here
      : jq_deparam_fragment( coerce )[ key ];
  };
  
  // Method: jQuery.bbq.removeState
  // 
  // Remove one or more keys from the current browser history 'state', creating
  // a new state, setting location.hash and triggering any bound
  // <hashchange event> callbacks (provided the new state is different than
  // the previous state).
  // 
  // If no arguments are passed, an empty state is created, which is just a
  // shortcut for jQuery.bbq.pushState( {}, 2 ).
  // 
  // Usage:
  // 
  // > jQuery.bbq.removeState( [ key [, key ... ] ] );
  // 
  // Arguments:
  // 
  //  key - (String) One or more key values to remove from the current state,
  //    passed as individual arguments.
  //  key - (Array) A single array argument that contains a list of key values
  //    to remove from the current state.
  // 
  // Returns:
  // 
  //  Nothing.
  // 
  // Additional Notes:
  // 
  //  * Setting an empty state may cause the browser to scroll.
  
  jq_bbq.removeState = function( arr ) {
    var state = {};
    
    // If one or more arguments is passed..
    if ( arr !== undefined ) {
      
      // Get the current state.
      state = jq_bbq_getState();
      
      // For each passed key, delete the corresponding property from the current
      // state.
      $.each( $.isArray( arr ) ? arr : arguments, function(i,v){
        delete state[ v ];
      });
    }
    
    // Set the state, completely overriding any existing state.
    jq_bbq_pushState( state, 2 );
  };
  
  // Event: hashchange event (BBQ)
  // 
  // Usage in jQuery 1.4 and newer:
  // 
  // In jQuery 1.4 and newer, the event object passed into any hashchange event
  // callback is augmented with a copy of the location.hash fragment at the time
  // the event was triggered as its event.fragment property. In addition, the
  // event.getState method operates on this property (instead of location.hash)
  // which allows this fragment-as-a-state to be referenced later, even after
  // window.location may have changed.
  // 
  // Note that event.fragment and event.getState are not defined according to
  // W3C (or any other) specification, but will still be available whether or
  // not the hashchange event exists natively in the browser, because of the
  // utility they provide.
  // 
  // The event.fragment property contains the output of <jQuery.param.fragment>
  // and the event.getState method is equivalent to the <jQuery.bbq.getState>
  // method.
  // 
  // > $(window).bind( 'hashchange', function( event ) {
  // >   var hash_str = event.fragment,
  // >     param_obj = event.getState(),
  // >     param_val = event.getState( 'param_name' ),
  // >     param_val_coerced = event.getState( 'param_name', true );
  // >   ...
  // > });
  // 
  // Usage in jQuery 1.3.2:
  // 
  // In jQuery 1.3.2, the event object cannot to be augmented as in jQuery 1.4+,
  // so the fragment state isn't bound to the event object and must instead be
  // parsed using the <jQuery.param.fragment> and <jQuery.bbq.getState> methods.
  // 
  // > $(window).bind( 'hashchange', function( event ) {
  // >   var hash_str = $.param.fragment(),
  // >     param_obj = $.bbq.getState(),
  // >     param_val = $.bbq.getState( 'param_name' ),
  // >     param_val_coerced = $.bbq.getState( 'param_name', true );
  // >   ...
  // > });
  // 
  // Additional Notes:
  // 
  // * Due to changes in the special events API, jQuery BBQ v1.2 or newer is
  //   required to enable the augmented event object in jQuery 1.4.2 and newer.
  // * See <jQuery hashchange event> for more detailed information.
  
  special[ str_hashchange ] = $.extend( special[ str_hashchange ], {
    
    // Augmenting the event object with the .fragment property and .getState
    // method requires jQuery 1.4 or newer. Note: with 1.3.2, everything will
    // work, but the event won't be augmented)
    add: function( handleObj ) {
      var old_handler;
      
      function new_handler(e) {
        // e.fragment is set to the value of location.hash (with any leading #
        // removed) at the time the event is triggered.
        var hash = e[ str_fragment ] = jq_param_fragment();
        
        // e.getState() works just like $.bbq.getState(), but uses the
        // e.fragment property stored on the event object.
        e.getState = function( key, coerce ) {
          return key === undefined || typeof key === 'boolean'
            ? jq_deparam( hash, key ) // 'key' really means 'coerce' here
            : jq_deparam( hash, coerce )[ key ];
        };
        
        old_handler.apply( this, arguments );
      };
      
      // This may seem a little complicated, but it normalizes the special event
      // .add method between jQuery 1.4/1.4.1 and 1.4.2+
      if ( $.isFunction( handleObj ) ) {
        // 1.4, 1.4.1
        old_handler = handleObj;
        return new_handler;
      } else {
        // 1.4.2+
        old_handler = handleObj.handler;
        handleObj.handler = new_handler;
      }
    }
    
  });
  
})(jQuery,this);

/*!
 * jQuery hashchange event - v1.3 - 7/21/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery hashchange event
//
// *Version: 1.3, Last updated: 7/21/2010*
// 
// Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
// GitHub       - http://github.com/cowboy/jquery-hashchange/
// Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
// (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
// document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
// 
// About: Known issues
// 
// While this jQuery hashchange event implementation is quite stable and
// robust, there are a few unfortunate browser bugs surrounding expected
// hashchange event-based behaviors, independent of any JavaScript
// window.onhashchange abstraction. See the following examples for more
// information:
// 
// Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
// Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
// WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
// Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
// 
// Also note that should a browser natively support the window.onhashchange 
// event, but not report that it does, the fallback polling loop will be used.
// 
// About: Release History
// 
// 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
//         "removable" for mobile-only development. Added IE6/7 document.title
//         support. Attempted to make Iframe as hidden as possible by using
//         techniques from http://www.paciellogroup.com/blog/?p=604. Added 
//         support for the "shortcut" format $(window).hashchange( fn ) and
//         $(window).hashchange() like jQuery provides for built-in events.
//         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
//         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
//         and <jQuery.fn.hashchange.src> properties plus document-domain.html
//         file to address access denied issues when setting document.domain in
//         IE6/7.
// 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
//         from a page on another domain would cause an error in Safari 4. Also,
//         IE6/7 Iframe is now inserted after the body (this actually works),
//         which prevents the page from scrolling when the event is first bound.
//         Event can also now be bound before DOM ready, but it won't be usable
//         before then in IE6/7.
// 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
//         where browser version is incorrectly reported as 8.0, despite
//         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
// 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
//         window.onhashchange functionality into a separate plugin for users
//         who want just the basic event & back button support, without all the
//         extra awesomeness that BBQ provides. This plugin will be included as
//         part of jQuery BBQ, but also be available separately.

(function($,window,undefined){
  '$:nomunge'; // Used by YUI compressor.
  
  // Reused string.
  var str_hashchange = 'hashchange',
    
    // Method / object references.
    doc = document,
    fake_onhashchange,
    special = $.event.special,
    
    // Does the browser support window.onhashchange? Note that IE8 running in
    // IE7 compatibility mode reports true for 'onhashchange' in window, even
    // though the event isn't supported, so also test document.documentMode.
    doc_mode = doc.documentMode,
    supports_onhashchange = 'on' + str_hashchange in window && ( doc_mode === undefined || doc_mode > 7 );
  
  // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!
  function get_fragment( url ) {
    url = url || location.href;
    return '#' + url.replace( /^[^#]*#?(.*)$/, '$1' );
  };
  
  // Method: jQuery.fn.hashchange
  // 
  // Bind a handler to the window.onhashchange event or trigger all bound
  // window.onhashchange event handlers. This behavior is consistent with
  // jQuery's built-in event handlers.
  // 
  // Usage:
  // 
  // > jQuery(window).hashchange( [ handler ] );
  // 
  // Arguments:
  // 
  //  handler - (Function) Optional handler to be bound to the hashchange
  //    event. This is a "shortcut" for the more verbose form:
  //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
  //    all bound window.onhashchange event handlers will be triggered. This
  //    is a shortcut for the more verbose
  //    jQuery(window).trigger( 'hashchange' ). These forms are described in
  //    the <hashchange event> section.
  // 
  // Returns:
  // 
  //  (jQuery) The initial jQuery collection of elements.
  
  // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
  // $(elem).hashchange() for triggering, like jQuery does for built-in events.
  $.fn[ str_hashchange ] = function( fn ) {
    return fn ? this.bind( str_hashchange, fn ) : this.trigger( str_hashchange );
  };
  
  // Property: jQuery.fn.hashchange.delay
  // 
  // The numeric interval (in milliseconds) at which the <hashchange event>
  // polling loop executes. Defaults to 50.
  
  // Property: jQuery.fn.hashchange.domain
  // 
  // If you're setting document.domain in your JavaScript, and you want hash
  // history to work in IE6/7, not only must this property be set, but you must
  // also set document.domain BEFORE jQuery is loaded into the page. This
  // property is only applicable if you are supporting IE6/7 (or IE8 operating
  // in "IE7 compatibility" mode).
  // 
  // In addition, the <jQuery.fn.hashchange.src> property must be set to the
  // path of the included "document-domain.html" file, which can be renamed or
  // modified if necessary (note that the document.domain specified must be the
  // same in both your main JavaScript as well as in this file).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.domain = document.domain;
  
  // Property: jQuery.fn.hashchange.src
  // 
  // If, for some reason, you need to specify an Iframe src file (for example,
  // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
  // do so using this property. Note that when using this property, history
  // won't be recorded in IE6/7 until the Iframe src file loads. This property
  // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
  // compatibility" mode).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.src = 'path/to/file.html';
  
  $.fn[ str_hashchange ].delay = 50;
  /*
  $.fn[ str_hashchange ].domain = null;
  $.fn[ str_hashchange ].src = null;
  */
  
  // Event: hashchange event
  // 
  // Fired when location.hash changes. In browsers that support it, the native
  // HTML5 window.onhashchange event is used, otherwise a polling loop is
  // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
  // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
  // compatibility" mode), a hidden Iframe is created to allow the back button
  // and hash-based history to work.
  // 
  // Usage as described in <jQuery.fn.hashchange>:
  // 
  // > // Bind an event handler.
  // > jQuery(window).hashchange( function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).hashchange();
  // 
  // A more verbose usage that allows for event namespacing:
  // 
  // > // Bind an event handler.
  // > jQuery(window).bind( 'hashchange', function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).trigger( 'hashchange' );
  // 
  // Additional Notes:
  // 
  // * The polling loop and Iframe are not created until at least one handler
  //   is actually bound to the 'hashchange' event.
  // * If you need the bound handler(s) to execute immediately, in cases where
  //   a location.hash exists on page load, via bookmark or page refresh for
  //   example, use jQuery(window).hashchange() or the more verbose 
  //   jQuery(window).trigger( 'hashchange' ).
  // * The event can be bound before DOM ready, but since it won't be usable
  //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
  //   to bind it inside a DOM ready handler.
  
  // Override existing $.event.special.hashchange methods (allowing this plugin
  // to be defined after jQuery BBQ in BBQ's source code).
  special[ str_hashchange ] = $.extend( special[ str_hashchange ], {
    
    // Called only when the first 'hashchange' event is bound to window.
    setup: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to create our own. And we don't want to call this
      // until the user binds to the event, just in case they never do, since it
      // will create a polling loop and possibly even a hidden Iframe.
      $( fake_onhashchange.start );
    },
    
    // Called only when the last 'hashchange' event is unbound from window.
    teardown: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to stop ours (if possible).
      $( fake_onhashchange.stop );
    }
    
  });
  
  // fake_onhashchange does all the work of triggering the window.onhashchange
  // event for browsers that don't natively support it, including creating a
  // polling loop to watch for hash changes and in IE 6/7 creating a hidden
  // Iframe to enable back and forward.
  fake_onhashchange = (function(){
    var self = {},
      timeout_id,
      
      // Remember the initial hash so it doesn't get triggered immediately.
      last_hash = get_fragment(),
      
      fn_retval = function(val){ return val; },
      history_set = fn_retval,
      history_get = fn_retval;
    
    // Start the polling loop.
    self.start = function() {
      timeout_id || poll();
    };
    
    // Stop the polling loop.
    self.stop = function() {
      timeout_id && clearTimeout( timeout_id );
      timeout_id = undefined;
    };
    
    // This polling loop checks every $.fn.hashchange.delay milliseconds to see
    // if location.hash has changed, and triggers the 'hashchange' event on
    // window when necessary.
    function poll() {
      var hash = get_fragment(),
        history_hash = history_get( last_hash );
      
      if ( hash !== last_hash ) {
        history_set( last_hash = hash, history_hash );
        
        $(window).trigger( str_hashchange );
        
      } else if ( history_hash !== last_hash ) {
        location.href = location.href.replace( /#.*/, '' ) + history_hash;
      }
      
      timeout_id = setTimeout( poll, $.fn[ str_hashchange ].delay );
    };
    
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    $.browser.msie && !supports_onhashchange && (function(){
      // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
      // when running in "IE7 compatibility" mode.
      
      var iframe,
        iframe_src;
      
      // When the event is bound and polling starts in IE 6/7, create a hidden
      // Iframe for history handling.
      self.start = function(){
        if ( !iframe ) {
          iframe_src = $.fn[ str_hashchange ].src;
          iframe_src = iframe_src && iframe_src + get_fragment();
          
          // Create hidden Iframe. Attempt to make Iframe as hidden as possible
          // by using techniques from http://www.paciellogroup.com/blog/?p=604.
          iframe = $('<iframe tabindex="-1" title="empty"/>').hide()
            
            // When Iframe has completely loaded, initialize the history and
            // start polling.
            .one( 'load', function(){
              iframe_src || history_set( get_fragment() );
              poll();
            })
            
            // Load Iframe src if specified, otherwise nothing.
            .attr( 'src', iframe_src || 'javascript:0' )
            
            // Append Iframe after the end of the body to prevent unnecessary
            // initial page scrolling (yes, this works).
            .insertAfter( 'body' )[0].contentWindow;
          
          // Whenever `document.title` changes, update the Iframe's title to
          // prettify the back/next history menu entries. Since IE sometimes
          // errors with "Unspecified error" the very first time this is set
          // (yes, very useful) wrap this with a try/catch block.
          doc.onpropertychange = function(){
            try {
              if ( event.propertyName === 'title' ) {
                iframe.document.title = doc.title;
              }
            } catch(e) {}
          };
          
        }
      };
      
      // Override the "stop" method since an IE6/7 Iframe was created. Even
      // if there are no longer any bound event handlers, the polling loop
      // is still necessary for back/next to work at all!
      self.stop = fn_retval;
      
      // Get history by looking at the hidden Iframe's location.hash.
      history_get = function() {
        return get_fragment( iframe.location.href );
      };
      
      // Set a new history item by opening and then closing the Iframe
      // document, *then* setting its location.hash. If document.domain has
      // been set, update that as well.
      history_set = function( hash, history_hash ) {
        var iframe_doc = iframe.document,
          domain = $.fn[ str_hashchange ].domain;
        
        if ( hash !== history_hash ) {
          // Update Iframe with any initial `document.title` that might be set.
          iframe_doc.title = doc.title;
          
          // Opening the Iframe's document after it has been closed is what
          // actually adds a history entry.
          iframe_doc.open();
          
          // Set document.domain for the Iframe document as well, if necessary.
          domain && iframe_doc.write( '<script>document.domain="' + domain + '"</script>' );
          
          iframe_doc.close();
          
          // Update the Iframe's hash, for great justice.
          iframe.location.hash = hash;
        }
      };
      
    })();
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    return self;
  })();
  
})(jQuery,this);

/*!
 * jQuery.ScrollTo
 * Copyright (c) 2007-2014 Ariel Flesler - aflesler<a>gmail<d>com | http://flesler.blogspot.com
 * Licensed under MIT
 * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
 * @projectDescription Easy element scrolling using jQuery.
 * @author Ariel Flesler
 * @version 1.4.11
 */

;(function(plugin) {
    // AMD Support
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], plugin);
    } else {
        plugin(jQuery);
    }
}(function($) {

	var $scrollTo = $.scrollTo = function( target, duration, settings ) {
		return $(window).scrollTo( target, duration, settings );
	};

	$scrollTo.defaults = {
		axis:'xy',
		duration: parseFloat($.fn.jquery) >= 1.3 ? 0 : 1,
		limit:true
	};

	// Returns the element that needs to be animated to scroll the window.
	// Kept for backwards compatibility (specially for localScroll & serialScroll)
	$scrollTo.window = function( scope ) {
		return $(window)._scrollable();
	};

	// Hack, hack, hack :)
	// Returns the real elements to scroll (supports window/iframes, documents and regular nodes)
	$.fn._scrollable = function() {
		return this.map(function() {
			var elem = this,
				isWin = !elem.nodeName || $.inArray( elem.nodeName.toLowerCase(), ['iframe','#document','html','body'] ) != -1;

				if (!isWin)
					return elem;

			var doc = (elem.contentWindow || elem).document || elem.ownerDocument || elem;

			return /webkit/i.test(navigator.userAgent) || doc.compatMode == 'BackCompat' ?
				doc.body :
				doc.documentElement;
		});
	};

	$.fn.scrollTo = function( target, duration, settings ) {
		if (typeof duration == 'object') {
			settings = duration;
			duration = 0;
		}
		if (typeof settings == 'function')
			settings = { onAfter:settings };

		if (target == 'max')
			target = 9e9;

		settings = $.extend( {}, $scrollTo.defaults, settings );
		// Speed is still recognized for backwards compatibility
		duration = duration || settings.duration;
		// Make sure the settings are given right
		settings.queue = settings.queue && settings.axis.length > 1;

		if (settings.queue)
			// Let's keep the overall duration
			duration /= 2;
		settings.offset = both( settings.offset );
		settings.over = both( settings.over );

		return this._scrollable().each(function() {
			// Null target yields nothing, just like jQuery does
			if (target == null) return;

			var elem = this,
				$elem = $(elem),
				targ = target, toff, attr = {},
				win = $elem.is('html,body');

			switch (typeof targ) {
				// A number will pass the regex
				case 'number':
				case 'string':
					if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
						targ = both( targ );
						// We are done
						break;
					}
					// Relative selector, no break!
					targ = $(targ,this);
					if (!targ.length) return;
				case 'object':
					// DOMElement / jQuery
					if (targ.is || targ.style)
						// Get the real position of the target
						toff = (targ = $(targ)).offset();
			}
			
			var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;
			
			$.each( settings.axis.split(''), function( i, axis ) {
				var Pos	= axis == 'x' ? 'Left' : 'Top',
					pos = Pos.toLowerCase(),
					key = 'scroll' + Pos,
					old = elem[key],
					max = $scrollTo.max(elem, axis);

				if (toff) {// jQuery / DOMElement
					attr[key] = toff[pos] + ( win ? 0 : old - $elem.offset()[pos] );

					// If it's a dom element, reduce the margin
					if (settings.margin) {
						attr[key] -= parseInt(targ.css('margin'+Pos)) || 0;
						attr[key] -= parseInt(targ.css('border'+Pos+'Width')) || 0;
					}

					attr[key] += offset[pos] || 0;

					if(settings.over[pos])
						// Scroll to a fraction of its width/height
						attr[key] += targ[axis=='x'?'width':'height']() * settings.over[pos];
				} else {
					var val = targ[pos];
					// Handle percentage values
					attr[key] = val.slice && val.slice(-1) == '%' ?
						parseFloat(val) / 100 * max
						: val;
				}

				// Number or 'number'
				if (settings.limit && /^\d+$/.test(attr[key]))
					// Check the limits
					attr[key] = attr[key] <= 0 ? 0 : Math.min( attr[key], max );

				// Queueing axes
				if (!i && settings.queue) {
					// Don't waste time animating, if there's no need.
					if (old != attr[key])
						// Intermediate animation
						animate( settings.onAfterFirst );
					// Don't animate this axis again in the next iteration.
					delete attr[key];
				}
			});

			animate( settings.onAfter );

			function animate( callback ) {
				$elem.animate( attr, duration, settings.easing, callback && function() {
					callback.call(this, targ, settings);
				});
			};

		}).end();
	};

	// Max scrolling position, works on quirks mode
	// It only fails (not too badly) on IE, quirks mode.
	$scrollTo.max = function( elem, axis ) {
		var Dim = axis == 'x' ? 'Width' : 'Height',
			scroll = 'scroll'+Dim;

		if (!$(elem).is('html,body'))
			return elem[scroll] - $(elem)[Dim.toLowerCase()]();

		var size = 'client' + Dim,
			html = elem.ownerDocument.documentElement,
			body = elem.ownerDocument.body;

		return Math.max( html[scroll], body[scroll] )
			 - Math.min( html[size]  , body[size]   );
	};

	function both( val ) {
		return $.isFunction(val) || typeof val == 'object' ? val : { top:val, left:val };
	};

    // AMD requirement
    return $scrollTo;
}));

/*! JsRender v1.0.0-beta: http://github.com/BorisMoore/jsrender and http://jsviews.com/jsviews
informal pre V1.0 commit counter: 51 */
/*
 * Optimized version of jQuery Templates, for rendering to string.
 * Does not require jQuery, or HTML DOM
 * Integrates with JsViews (http://jsviews.com/jsviews)
 *
 * Copyright 2013, Boris Moore
 * Released under the MIT License.
 */

(function(global, jQuery, undefined) {
	// global is the this object, which is window when running in the usual browser environment.
	"use strict";

	if (jQuery && jQuery.views || global.jsviews) { return; } // JsRender is already loaded

	//========================== Top-level vars ==========================

	var versionNumber = "v1.0.0-beta",

		$, jsvStoreName, rTag, rTmplString, indexStr, // nodeJsModule,

//TODO	tmplFnsCache = {},
		delimOpenChar0 = "{", delimOpenChar1 = "{", delimCloseChar0 = "}", delimCloseChar1 = "}", linkChar = "^",

		rPath = /^(!*?)(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
		//                                     none   object     helper    view  viewProperty pathTokens      leafToken

		rParams = /(\()(?=\s*\()|(?:([([])\s*)?(?:(\^?)(!*?[#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*:?\/]|(=))\s*|(!*?[#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*(([)\]])(?=\s*\.|\s*\^|\s*$)|[)\]])([([]?))|(\s+)/g,
		//          lftPrn0        lftPrn        bound            path    operator err                                                eq             path2       prn    comma   lftPrn2   apos quot      rtPrn rtPrnDot                        prn2      space
		// (left paren? followed by (path? followed by operator) or (path followed by left paren?)) or comma or apos or quot or right paren or space

		rNewLine = /[ \t]*(\r\n|\n|\r)/g,
		rUnescapeQuotes = /\\(['"])/g,
		rEscapeQuotes = /['"\\]/g, // Escape quotes and \ character
		rBuildHash = /\x08(~)?([^\x08]+)\x08/g,
		rTestElseIf = /^if\s/,
		rFirstElem = /<(\w+)[>\s]/,
		rAttrEncode = /[\x00`><"'&]/g, // Includes > encoding since rConvertMarkers in JsViews does not skip > characters in attribute strings
		rHtmlEncode = rAttrEncode,
		autoTmplName = 0,
		viewId = 0,
		charEntities = {
			"&": "&amp;",
			"<": "&lt;",
			">": "&gt;",
			"\x00": "&#0;",
			"'": "&#39;",
			'"': "&#34;",
			"`": "&#96;"
		},
		htmlStr = "html",
		tmplAttr = "data-jsv-tmpl",
		$render = {},
		jsvStores = {
			template: {
				compile: compileTmpl
			},
			tag: {
				compile: compileTag
			},
			helper: {},
			converter: {}
		},

		// jsviews object ($.views if jQuery is loaded)
		$views = {
			jsviews: versionNumber,
			render: $render,
			settings: function(settings) {
				$extend($viewsSettings, settings);
				dbgMode($viewsSettings._dbgMode);
				if ($viewsSettings.jsv) {
					$viewsSettings.jsv();
				}
			},
			sub: {
				// subscription, e.g. JsViews integration
				View: View,
				Error: JsViewsError,
				tmplFn: tmplFn,
				parse: parseParams,
				extend: $extend,
				error: error,
				syntaxError: syntaxError,
				DataMap: DataMap
			},
			_cnvt: convertVal,
			_tag: renderTag,

			_err: function(e) {
				// Place a breakpoint here to intercept template rendering errors
				return $viewsSettings._dbgMode ? ("Error: " + (e.message || e)) + ". " : '';
			}
		};

	function retVal(val) {
		return val;
	}

	function dbgBreak(val) {
		debugger;
		return val;
	}

	function dbgMode(debugMode) {
		$viewsSettings._dbgMode = debugMode;
		indexStr = debugMode ? "Error: #index in nested view: use #getIndex()" : ""; // If in debug mode set #index to a warning when in nested contexts
		$tags("dbg", $helpers.dbg = $converters.dbg = debugMode ? dbgBreak : retVal); // If in debug mode, register {{dbg/}}, {{dbg:...}} and ~dbg() to insert break points for debugging.
	}

	function DataMap(getTarget) {
		return {
			getTgt: getTarget,
			map: function(source) {
				var theMap = this; // Instance of DataMap
				if (theMap.src !== source) {
					if (theMap.src) {
						theMap.unmap();
					}
					if (typeof source === "object") {
						var changing,
						target = getTarget.apply(theMap, arguments);
						theMap.src = source;
						theMap.tgt = target;
					}
				}
			}
		}
	}

	function JsViewsError(message, object) {
		// Error exception type for JsViews/JsRender
		// Override of $.views.sub.Error is possible
		if (object && object.onError) {
			if (object.onError(message) === false) {
				return;
			}
		}
		this.name = "JsRender Error";
		this.message = message || "JsRender error";
	}

	function $extend(target, source) {
		var name;
		target = target || {};
		for (name in source) {
			target[name] = source[name];
		}
		return target;
	}

	(JsViewsError.prototype = new Error()).constructor = JsViewsError;

	//========================== Top-level functions ==========================

	//===================
	// jsviews.delimiters
	//===================
	function $viewsDelimiters(openChars, closeChars, link) {
		// Set the tag opening and closing delimiters and 'link' character. Default is "{{", "}}" and "^"
		// openChars, closeChars: opening and closing strings, each with two characters

		if (!$viewsSub.rTag || openChars) {
			delimOpenChar0 = openChars ? openChars.charAt(0) : delimOpenChar0; // Escape the characters - since they could be regex special characters
			delimOpenChar1 = openChars ? openChars.charAt(1) : delimOpenChar1;
			delimCloseChar0 = closeChars ? closeChars.charAt(0) : delimCloseChar0;
			delimCloseChar1 = closeChars ? closeChars.charAt(1) : delimCloseChar1;
			linkChar = link || linkChar;
			openChars = "\\" + delimOpenChar0 + "(\\" + linkChar + ")?\\" + delimOpenChar1;  // Default is "{^{"
			closeChars = "\\" + delimCloseChar0 + "\\" + delimCloseChar1;                   // Default is "}}"
			// Build regex with new delimiters
			//          tag    (followed by / space or })   or cvtr+colon or html or code
			rTag = "(?:(?:(\\w+(?=[\\/\\s\\" + delimCloseChar0 + "]))|(?:(\\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\\*)))"
				+ "\\s*((?:[^\\" + delimCloseChar0 + "]|\\" + delimCloseChar0 + "(?!\\" + delimCloseChar1 + "))*?)";

			// make rTag available to JsViews (or other components) for parsing binding expressions
			$viewsSub.rTag = rTag + ")";

			rTag = new RegExp(openChars + rTag + "(\\/)?|(?:\\/(\\w+)))" + closeChars, "g");

			// Default:    bind           tag       converter colon html     comment            code      params            slash   closeBlock
			//           /{(\^)?{(?:(?:(\w+(?=[\/\s}]))|(?:(\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\*)))\s*((?:[^}]|}(?!}))*?)(\/)?|(?:\/(\w+)))}}/g

			rTmplString = new RegExp("<.*>|([^\\\\]|^)[{}]|" + openChars + ".*" + closeChars);
			// rTmplString looks for html tags or { or } char not preceded by \\, or JsRender tags {{xxx}}. Each of these strings are considered
			// NOT to be jQuery selectors
		}
		return [delimOpenChar0, delimOpenChar1, delimCloseChar0, delimCloseChar1, linkChar];
	}

	//=========
	// View.get
	//=========

	function getView(inner, type) { //view.get(inner, type)
		if (!type) {
			// view.get(type)
			type = inner;
			inner = undefined;
		}

		var views, i, l, found,
			view = this,
			root = !type || type === "root";
			// If type is undefined, returns root view (view under top view).

		if (inner) {
			// Go through views - this one, and all nested ones, depth-first - and return first one with given type.
			found = view.type === type ? view : undefined;
			if (!found) {
				views = view.views;
				if (view._.useKey) {
					for (i in views) {
						if (found = views[i].get(inner, type)) {
							break;
						}
					}
				} else for (i = 0, l = views.length; !found && i < l; i++) {
					found = views[i].get(inner, type);
				}
			}
		} else if (root) {
			// Find root view. (view whose parent is top view)
			while (view.parent.parent) {
				found = view = view.parent;
			}
		} else while (view && !found) {
			// Go through views - this one, and all parent ones - and return first one with given type.
			found = view.type === type ? view : undefined;
			view = view.parent;
		}
		return found;
	}

	function getNestedIndex() {
		var view = this.get("item");
		return view ? view.index : undefined;
	}

	getNestedIndex.depends = function() {
		return [this.get("item"), "index"];
	};

	function getIndex() {
		return this.index;
	}

	getIndex.depends = function() {
		return ["index"];
	};

	//==========
	// View.hlp
	//==========

	function getHelper(helper) {
		// Helper method called as view.hlp(key) from compiled template, for helper functions or template parameters ~foo
		var wrapped,
			view = this,
			ctx = view.linkCtx,
			res = (view.ctx || {})[helper];

		if (res === undefined && ctx && ctx.ctx) {
			res = ctx.ctx[helper];
		}
		if (res === undefined) {
			res = $helpers[helper];
		}

		if (res) {
			if (typeof res === "function" && !res._wrp) {
				wrapped = function() {
					// If it is of type function, and not already wrapped, we will wrap it, so if called with no this pointer it will be called with the
					// view as 'this' context. If the helper ~foo() was in a data-link expression, the view will have a 'temporary' linkCtx property too.
					// Note that helper functions on deeper paths will have specific this pointers, from the preceding path.
					// For example, ~util.foo() will have the ~util object as 'this' pointer
					return res.apply((!this || this === global) ? view : this, arguments);
				};
				wrapped._wrp = 1;
				$extend(wrapped, res); // Attach same expandos (if any) to the wrapped function
			}
		}
		return wrapped || res;
	}

	//==============
	// jsviews._cnvt
	//==============

	function convertVal(converter, view, tagCtx) {
		// self is template object or linkCtx object
		var tmplConverter, tag, value,
			boundTagCtx = +tagCtx === tagCtx && tagCtx, // if tagCtx is an integer, then it is the key for the boundTagCtx (compiled function to return the tagCtx)
			linkCtx = view.linkCtx; // For data-link="{cvt:...}"...

		if (boundTagCtx) {
			// This is a bound tag: {^{xx:yyy}}. Call compiled function which returns the tagCtxs for current data
			tagCtx = (boundTagCtx = view.tmpl.bnds[boundTagCtx-1])(view.data, view, $views);
		}

		value = tagCtx.args[0];
		if (converter || boundTagCtx) {
			tag = linkCtx && linkCtx.tag || {
				_: {
					inline: !linkCtx,
					bnd: boundTagCtx
				},
				tagName: converter + ":",
				flow: true,
				_is: "tag"
			};

			if (linkCtx) {
				linkCtx.tag = tag;
				tag.linkCtx = tag.linkCtx || linkCtx;
				tagCtx.ctx = extendCtx(tagCtx.ctx, linkCtx.view.ctx);
			}
			tag.tagCtx = tagCtx;
			tagCtx.view = view;

			tag.ctx = tagCtx.ctx || {};
			delete tagCtx.ctx;
			// Provide this tag on view, for addBindingMarkers on bound tags to add the tag to view._.bnds, associated with the tag id,
			view._.tag = tag;

			converter = converter !== "true" && converter; // If there is a convertBack but no convert, converter will be "true"

			if (converter && ((tmplConverter = view.getRsc("converters", converter)) || error("Unknown converter: {{"+ converter + ":"))) {
				// A call to {{cnvt: ... }} or {^{cnvt: ... }} or data-link="{cnvt: ... }"
				tag.depends = tmplConverter.depends;
				value = tmplConverter.apply(tag, tagCtx.args);
			}
			// Call onRender (used by JsViews if present, to add binding annotations around rendered content)
			value = value != undefined ? value : "";
			value = boundTagCtx && view._.onRender
				? view._.onRender(value, view, boundTagCtx)
				: value;
			view._.tag = undefined;
		}
		return value;
	}

	//=============
	// jsviews._tag
	//=============

	function getResource(resourceType, itemName) {
		var res, store,
			view = this;
		while ((res === undefined) && view) {
			store = view.tmpl[resourceType];
			res = store && store[itemName];
			view = view.parent;
		}
		return res || $views[resourceType][itemName];
	}

	function renderTag(tagName, parentView, tmpl, tagCtxs, isRefresh) {
		// Called from within compiled template function, to render a template tag
		// Returns the rendered tag

		var render, tag, tags, attr, parentTag, i, l, itemRet, tagCtx, tagCtxCtx, content, boundTagFn, tagDef, callInit, map, thisMap, args,
			ret = "",
			boundTagKey = +tagCtxs === tagCtxs && tagCtxs, // if tagCtxs is an integer, then it is the boundTagKey
			linkCtx = parentView.linkCtx || 0,
			ctx = parentView.ctx,
			parentTmpl = tmpl || parentView.tmpl,
			parentView_ = parentView._;

		if (tagName._is === "tag") {
			tag = tagName;
			tagName = tag.tagName;
		}

		// Provide tagCtx, linkCtx and ctx access from tag
		if (boundTagKey) {
			// if tagCtxs is an integer, we are data binding
			// Call compiled function which returns the tagCtxs for current data
			tagCtxs = (boundTagFn = parentTmpl.bnds[boundTagKey-1])(parentView.data, parentView, $views);
		}

		l = tagCtxs.length;
		tag = tag || linkCtx.tag;
		for (i = 0; i < l; i++) {
			tagCtx = tagCtxs[i];

			// Set the tmpl property to the content of the block tag, unless set as an override property on the tag
			content = tagCtx.tmpl;
			content = tagCtx.content = content && parentTmpl.tmpls[content - 1];
			tmpl = tagCtx.props.tmpl;
			if (!i && (!tmpl || !tag)) {
				tagDef = parentView.getRsc("tags", tagName) || error("Unknown tag: {{"+ tagName + "}}");
			}
			tmpl = tmpl || (tag ? tag : tagDef).template || content;
			tmpl = "" + tmpl === tmpl // if a string
				? parentView.getRsc("templates", tmpl) || $templates(tmpl)
				: tmpl;

			$extend(tagCtx, {
				tmpl: tmpl,
				render: renderContent,
				index: i,
				view: parentView,
				ctx: extendCtx(tagCtx.ctx, ctx) // Extend parentView.ctx
			}); // Extend parentView.ctx

			if (!tag) {
				// This will only be hit for initial tagCtx (not for {{else}}) - if the tag instance does not exist yet
				// Instantiate tag if it does not yet exist
				if (tagDef._ctr) {
					// If the tag has not already been instantiated, we will create a new instance.
					// ~tag will access the tag, even within the rendering of the template content of this tag.
					// From child/descendant tags, can access using ~tag.parent, or ~parentTags.tagName
//	TODO provide error handling owned by the tag - using tag.onError
//				try {
					tag = new tagDef._ctr();
					callInit = !!tag.init;
//				}
//				catch(e) {
//					tagDef.onError(e);
//				}
					// Set attr on linkCtx to ensure outputting to the correct target attribute.
					tag.attr = tag.attr || tagDef.attr || undefined;
					// Setting either linkCtx.attr or this.attr in the init() allows per-instance choice of target attrib.
				} else {
					// This is a simple tag declared as a function, or with init set to false. We won't instantiate a specific tag constructor - just a standard instance object.
					tag = {
						// tag instance object if no init constructor
						render: tagDef.render
					};
				}
				tag._ = {
					inline: !linkCtx
				};
				if (linkCtx) {
					// Set attr on linkCtx to ensure outputting to the correct target attribute.
					linkCtx.attr = tag.attr = linkCtx.attr || tag.attr;
					linkCtx.tag = tag;
					tag.linkCtx = linkCtx;
				}
				if (tag._.bnd = boundTagFn || linkCtx.fn) {
					// Bound if {^{tag...}} or data-link="{tag...}"
					tag._.arrVws = {};
				} else if (tag.dataBoundOnly) {
					error("{^{" + tagName + "}} tag must be data-bound");
				}
				tag.tagName = tagName;
				tag.parent = parentTag = ctx && ctx.tag;
				tag._is = "tag";
				tag._def = tagDef;
				//TODO better perf for childTags() - keep child tag.tags array, (and remove child, when disposed)
				// tag.tags = [];
				// Provide this tag on view, for addBindingMarkers on bound tags to add the tag to view._.bnds, associated with the tag id,
			}
			tagCtx.tag = tag;
			if (tag.map && tag.tagCtxs) {
				tagCtx.map = tag.tagCtxs[i].map; // Copy over the compiled map instance from the previous tagCtxs to the refreshed ones
			}
			if (!tag.flow) {
				tagCtxCtx = tagCtx.ctx = tagCtx.ctx || {};

				// tags hash: tag.ctx.tags, merged with parentView.ctx.tags,
				tags = tag.parents = tagCtxCtx.parentTags = ctx && extendCtx(tagCtxCtx.parentTags, ctx.parentTags) || {};
				if (parentTag) {
					tags[parentTag.tagName] = parentTag;
					//TODO better perf for childTags: parentTag.tags.push(tag);
				}
				tagCtxCtx.tag = tag;
			}
		}
		tag.tagCtxs = tagCtxs;
		parentView_.tag = tag;
		tag.rendering = {}; // Provide object for state during render calls to tag and elses. (Used by {{if}} and {{for}}...)
		for (i = 0; i < l; i++) {
			tagCtx = tag.tagCtx = tagCtxs[i];
			args = tagCtx.args;
			if ((map = tagCtx.props.map || tag).map) {
				if (args.length || !i || tagCtx.props.map) {
					if (!args.length) {
						args = [parentView.data]; // If opening tag or else with map property have no arg[0] specified, default the datamap source to the current data item.
					}
					thisMap = tagCtx.map = $extend(tagCtx.map || { unmap: map.unmap }, tagCtx.props); // Compiled map instance
					if (thisMap.src !== args[0]) {
						if (thisMap.src) {
							thisMap.unmap();
						}
						map.map.apply(thisMap, args);
					}
					args = [thisMap.tgt];
				}
			}
			tag.ctx = tagCtx.ctx;

			if (!i && callInit) {
				tag.init(tagCtx, linkCtx, tag.ctx);
				tagCtx = tag.tagCtx;
				callInit = undefined;
			}

			itemRet = undefined;
			render = tag.render;
			if (render = tag.render) {
				itemRet = render.apply(tag, args);
			}
			itemRet = itemRet !== undefined
				? itemRet // Return result of render function unless it is undefined, in which case return rendered template
				: tagCtx.tmpl && tagCtx.render(args[0], undefined, true) || (isRefresh ? undefined : "");
				// No return value from render, and no template/content tagCtx.render(), so return undefined
			ret = ret ? ret + (itemRet || "") : itemRet; // If no rendered content, this will be undefined
		}

		delete tag.rendering;

		tag.tagCtx = tag.tagCtxs[0];
		tag.ctx= tag.tagCtx.ctx;

		if (tag._.inline && (attr = tag.attr) && attr !== htmlStr) {
			// inline tag with attr set to "text" will insert HTML-encoded content - as if it was element-based innerText
			ret = attr === "text"
				? $converters.html(ret)
				: "";
		}
		return boundTagKey && parentView._.onRender
			// Call onRender (used by JsViews if present, to add binding annotations around rendered content)
			? parentView._.onRender(ret, parentView, boundTagKey)
			: ret;
	}

	//=================
	// View constructor
	//=================

	function View(context, type, parentView, data, template, key, contentTmpl, onRender) {
		// Constructor for view object in view hierarchy. (Augmented by JsViews if JsViews is loaded)
		var views, parentView_, tag,
			isArray = type === "array",
			self_ = {
				key: 0,
				useKey: isArray ? 0 : 1,
				id: "" + viewId++,
				onRender: onRender,
				bnds: {}
			},
			self = {
				data: data,
				tmpl: template,
				content: contentTmpl,
				views: isArray ? [] : {},
				parent: parentView,
				type: type,
				// If the data is an array, this is an 'array view' with a views array for each child 'item view'
				// If the data is not an array, this is an 'item view' with a views 'map' object for any child nested views
				// ._.useKey is non zero if is not an 'array view' (owning a data array). Uuse this as next key for adding to child views map
				get: getView,
				getIndex: getIndex,
				getRsc: getResource,
				hlp: getHelper,
				_: self_,
				_is: "view"
		};
		if (parentView) {
			views = parentView.views;
			parentView_ = parentView._;
			if (parentView_.useKey) {
				// Parent is an 'item view'. Add this view to its views object
				// self._key = is the key in the parent view map
				views[self_.key = "_" + parentView_.useKey++] = self;
				self.index = indexStr;
				self.getIndex = getNestedIndex;
				tag = parentView_.tag;
				self_.bnd = isArray && (!tag || !!tag._.bnd && tag); // For array views that are data bound for collection change events, set the
				// view._.bnd property to true for top-level link() or data-link="{for}", or to the tag instance for a data-bound tag, e.g. {^{for ...}}
			} else {
				// Parent is an 'array view'. Add this view to its views array
				views.splice(
					// self._.key = self.index - the index in the parent view array
					self_.key = self.index = key,
				0, self);
			}
			// If no context was passed in, use parent context
			// If context was passed in, it should have been merged already with parent context
			self.ctx = context || parentView.ctx;
		} else {
			self.ctx = context;
		}
		return self;
	}

	//=============
	// Registration
	//=============

	function compileChildResources(parentTmpl) {
		var storeName, resources, resourceName, settings, compile;
		for (storeName in jsvStores) {
			settings = jsvStores[storeName];
			if ((compile = settings.compile) && (resources = parentTmpl[storeName + "s"])) {
				for (resourceName in resources) {
					// compile child resource declarations (templates, tags, converters or helpers)
					resources[resourceName] = compile(resourceName, resources[resourceName], parentTmpl, storeName, settings);
				}
			}
		}
	}

	function compileTag(name, tagDef, parentTmpl) {
		var init, tmpl;
		if (typeof tagDef === "function") {
			// Simple tag declared as function. No presenter instantation.
			tagDef = {
				depends: tagDef.depends,
				render: tagDef
			};
		} else {
			// Tag declared as object, used as the prototype for tag instantiation (control/presenter)
			if (tmpl = tagDef.template) {
				tagDef.template = "" + tmpl === tmpl ? ($templates[tmpl] || $templates(tmpl)) : tmpl;
			}
			if (tagDef.init !== false) {
				// Set int: false on tagDef if you want to provide just a render method, or render and template, but no constuctor or prototype.
				// so equivalent to setting tag to render function, except you can also provide a template.
				init = tagDef._ctr = function(tagCtx) {};
				(init.prototype = tagDef).constructor = init;
			}
		}
		if (parentTmpl) {
			tagDef._parentTmpl = parentTmpl;
		}
//TODO	tagDef.onError = function(e) {
//			var error;
//			if (error = this.prototype.onError) {
//				error.call(this, e);
//			} else {
//				throw e;
//			}
//		}
		return tagDef;
	}

	function compileTmpl(name, tmpl, parentTmpl, storeName, storeSettings, options) {
		// tmpl is either a template object, a selector for a template script block, the name of a compiled template, or a template object

		//==== nested functions ====
		function tmplOrMarkupFromStr(value) {
			// If value is of type string - treat as selector, or name of compiled template
			// Return the template object, if already compiled, or the markup string

			if (("" + value === value) || value.nodeType > 0) {
				try {
					elem = value.nodeType > 0
					? value
					: !rTmplString.test(value)
					// If value is a string and does not contain HTML or tag content, then test as selector
						&& jQuery && jQuery(global.document).find(value)[0];
					// If selector is valid and returns at least one element, get first element
					// If invalid, jQuery will throw. We will stay with the original string.
				} catch (e) {}

				if (elem) {
					// Generally this is a script element.
					// However we allow it to be any element, so you can for example take the content of a div,
					// use it as a template, and replace it by the same content rendered against data.
					// e.g. for linking the content of a div to a container, and using the initial content as template:
					// $.link("#content", model, {tmpl: "#content"});

					value = elem.getAttribute(tmplAttr);
					name = name || value;
					value = $templates[value];
					if (!value) {
						// Not already compiled and cached, so compile and cache the name
						// Create a name for compiled template if none provided
						name = name || "_" + autoTmplName++;
						elem.setAttribute(tmplAttr, name);
						// Use tmpl as options
						value = $templates[name] = compileTmpl(name, elem.innerHTML, parentTmpl, storeName, storeSettings, options);
					}
				}
				return value;
			}
			// If value is not a string, return undefined
		}

		var tmplOrMarkup, elem;

		//==== Compile the template ====
		tmpl = tmpl || "";
		tmplOrMarkup = tmplOrMarkupFromStr(tmpl);

		// If options, then this was already compiled from a (script) element template declaration.
		// If not, then if tmpl is a template object, use it for options
		options = options || (tmpl.markup ? tmpl : {});
		options.tmplName = name;
		if (parentTmpl) {
			options._parentTmpl = parentTmpl;
		}
		// If tmpl is not a markup string or a selector string, then it must be a template object
		// In that case, get it from the markup property of the object
		if (!tmplOrMarkup && tmpl.markup && (tmplOrMarkup = tmplOrMarkupFromStr(tmpl.markup))) {
			if (tmplOrMarkup.fn && (tmplOrMarkup.debug !== tmpl.debug || tmplOrMarkup.allowCode !== tmpl.allowCode)) {
				// if the string references a compiled template object, but the debug or allowCode props are different, need to recompile
				tmplOrMarkup = tmplOrMarkup.markup;
			}
		}
		if (tmplOrMarkup !== undefined) {
			if (name && !parentTmpl) {
				$render[name] = function() {
					return tmpl.render.apply(tmpl, arguments);
				};
			}
			if (tmplOrMarkup.fn || tmpl.fn) {
				// tmpl is already compiled, so use it, or if different name is provided, clone it
				if (tmplOrMarkup.fn) {
					if (name && name !== tmplOrMarkup.tmplName) {
						tmpl = extendCtx(options, tmplOrMarkup);
					} else {
						tmpl = tmplOrMarkup;
					}
				}
			} else {
				// tmplOrMarkup is a markup string, not a compiled template
				// Create template object
				tmpl = TmplObject(tmplOrMarkup, options);
				// Compile to AST and then to compiled function
				tmplFn(tmplOrMarkup.replace(rEscapeQuotes, "\\$&"), tmpl);
			}
			compileChildResources(options);
			return tmpl;
		}
	}
	//==== /end of function compile ====

	function TmplObject(markup, options) {
		// Template object constructor
		var htmlTag,
			wrapMap = $viewsSettings.wrapMap || {},
			tmpl = $extend(
				{
					markup: markup,
					tmpls: [],
					links: {}, // Compiled functions for link expressions
					tags: {}, // Compiled functions for bound tag expressions
					bnds: [],
					_is: "template",
					render: renderContent
				},
				options
			);

		if (!options.htmlTag) {
			// Set tmpl.tag to the top-level HTML tag used in the template, if any...
			htmlTag = rFirstElem.exec(markup);
			tmpl.htmlTag = htmlTag ? htmlTag[1].toLowerCase() : "";
		}
		htmlTag = wrapMap[tmpl.htmlTag];
		if (htmlTag && htmlTag !== wrapMap.div) {
			// When using JsViews, we trim templates which are inserted into HTML contexts where text nodes are not rendered (i.e. not 'Phrasing Content').
			// Currently not trimmed for <li> tag. (Not worth adding perf cost)
			tmpl.markup = $.trim(tmpl.markup);
		}

		return tmpl;
	}

	function registerStore(storeName, storeSettings) {

		function theStore(name, item, parentTmpl) {
			// The store is also the function used to add items to the store. e.g. $.templates, or $.views.tags

			// For store of name 'thing', Call as:
			//    $.views.things(items[, parentTmpl]),
			// or $.views.things(name, item[, parentTmpl])

			var onStore, compile, itemName, thisStore;

			if (name && "" + name !== name && !name.nodeType && !name.markup) {
				// Call to $.views.things(items[, parentTmpl]),

				// Adding items to the store
				// If name is a map, then item is parentTmpl. Iterate over map and call store for key.
				for (itemName in name) {
					theStore(itemName, name[itemName], item);
				}
				return $views;
			}
			// Adding a single unnamed item to the store
			if (item === undefined) {
				item = name;
				name = undefined;
			}
			if (name && "" + name !== name) { // name must be a string
				parentTmpl = item;
				item = name;
				name = undefined;
			}
			thisStore = parentTmpl ? parentTmpl[storeNames] = parentTmpl[storeNames] || {} : theStore;
			compile = storeSettings.compile;
			if (onStore = $viewsSub.onBeforeStoreItem) {
				// e.g. provide an external compiler or preprocess the item.
				compile = onStore(thisStore, name, item, compile) || compile;
			}
			if (!name) {
				item = compile(undefined, item);
			} else if (item === null) {
				// If item is null, delete this entry
				delete thisStore[name];
			} else {
				thisStore[name] = compile ? (item = compile(name, item, parentTmpl, storeName, storeSettings)) : item;
			}
			if (compile && item) {
				item._is = storeName; // Only do this for compiled objects (tags, templates...)
			}
			if (onStore = $viewsSub.onStoreItem) {
				// e.g. JsViews integration
				onStore(thisStore, name, item, compile);
			}
			return item;
		}

		var storeNames = storeName + "s";

		$views[storeNames] = theStore;
		jsvStores[storeName] = storeSettings;
	}

	//==============
	// renderContent
	//==============

	function renderContent(data, context, noIteration, parentView, key, onRender) {
		// Render template against data as a tree of subviews (nested rendered template instances), or as a string (top-level template).
		// If the data is the parent view, treat as noIteration, re-render with the same data context.
		var i, l, dataItem, newView, childView, itemResult, swapContent, tagCtx, contentTmpl, tag_, outerOnRender, tmplName, tmpl,
			self = this,
			allowDataLink = !self.attr || self.attr === htmlStr,
			result = "";

		if (key === true) {
			swapContent = true;
			key = 0;
		}
		if (self.tag) {
			// This is a call from renderTag or tagCtx.render()
			tagCtx = self;
			self = self.tag;
			tag_ = self._;
			tmplName = self.tagName;
			tmpl = tagCtx.tmpl;
			context = extendCtx(context, self.ctx);
			contentTmpl = tagCtx.content; // The wrapped content - to be added to views, below
			if (tagCtx.props.link === false) {
				// link=false setting on block tag
				// We will override inherited value of link by the explicit setting link=false taken from props
				// The child views of an unlinked view are also unlinked. So setting child back to true will not have any effect.
				context = context || {};
				context.link = false;
			}
			parentView = parentView || tagCtx.view;
			data = data === undefined ? parentView : data;
		} else {
			tmpl = self.jquery && (self[0] || error('Unknown template: "' + self.selector + '"')) // This is a call from $(selector).render
				|| self;
		}
		if (tmpl) {
			if (!parentView && data && data._is === "view") {
				parentView = data; // When passing in a view to render or link (and not passing in a parent view) use the passed in view as parentView
			}
			if (parentView) {
				contentTmpl = contentTmpl || parentView.content; // The wrapped content - to be added as #content property on views, below
				onRender = onRender || parentView._.onRender;
				if (data === parentView) {
					// Inherit the data from the parent view.
					// This may be the contents of an {{if}} block
					// Set isLayout = true so we don't iterate the if block if the data is an array.
					data = parentView.data;
					noIteration = true;
				}
				context = extendCtx(context, parentView.ctx);
			}
			if (!parentView || parentView.data === undefined) {
				(context = context || {}).root = data; // Provide ~root as shortcut to top-level data.
			}

			// Set additional context on views created here, (as modified context inherited from the parent, and to be inherited by child views)
			// Note: If no jQuery, $extend does not support chained copies - so limit extend() to two parameters

			if (!tmpl.fn) {
				tmpl = $templates[tmpl] || $templates(tmpl);
			}

			if (tmpl) {
				onRender = (context && context.link) !== false && allowDataLink && onRender;
				// If link===false, do not call onRender, so no data-linking marker nodes
				outerOnRender = onRender;
				if (onRender === true) {
					// Used by view.refresh(). Don't create a new wrapper view.
					outerOnRender = undefined;
					onRender = parentView._.onRender;
				}
				context = tmpl.helpers
					? extendCtx(tmpl.helpers, context)
					: context;
				if ($.isArray(data) && !noIteration) {
					// Create a view for the array, whose child views correspond to each data item. (Note: if key and parentView are passed in
					// along with parent view, treat as insert -e.g. from view.addViews - so parentView is already the view item for array)
					newView = swapContent
						? parentView :
						(key !== undefined && parentView) || View(context, "array", parentView, data, tmpl, key, contentTmpl, onRender);
					for (i = 0, l = data.length; i < l; i++) {
						// Create a view for each data item.
						dataItem = data[i];
						childView = View(context, "item", newView, dataItem, tmpl, (key || 0) + i, contentTmpl, onRender);
						itemResult = tmpl.fn(dataItem, childView, $views);
						result += newView._.onRender ? newView._.onRender(itemResult, childView) : itemResult;
					}
				} else {
					// Create a view for singleton data object. The type of the view will be the tag name, e.g. "if" or "myTag" except for
					// "item", "array" and "data" views. A "data" view is from programatic render(object) against a 'singleton'.
					newView = swapContent ? parentView : View(context, tmplName || "data", parentView, data, tmpl, key, contentTmpl, onRender);
					if (tag_ && !self.flow) {
						newView.tag = self;
					}
					result += tmpl.fn(data, newView, $views);
				}
				return outerOnRender ? outerOnRender(result, newView) : result;
			}
		}
		return "";
	}

	//===========================
	// Build and compile template
	//===========================

	// Generate a reusable function that will serve to render a template against data
	// (Compile AST then build template function)

	function error(message) {
		throw new $viewsSub.Error(message);
	}

	function syntaxError(message) {
		error("Syntax error\n" + message);
	}

	function tmplFn(markup, tmpl, isLinkExpr, convertBack) {
		// Compile markup to AST (abtract syntax tree) then build the template function code from the AST nodes
		// Used for compiling templates, and also by JsViews to build functions for data link expressions

		//==== nested functions ====
		function pushprecedingContent(shift) {
			shift -= loc;
			if (shift) {
				content.push(markup.substr(loc, shift).replace(rNewLine, "\\n"));
			}
		}

		function blockTagCheck(tagName) {
			tagName && syntaxError('Unmatched or missing tag: "{{/' + tagName + '}}" in template:\n' + markup);
		}

		function parseTag(all, bind, tagName, converter, colon, html, comment, codeTag, params, slash, closeBlock, index) {

			//    bind         tag        converter colon html     comment            code      params            slash   closeBlock
			// /{(\^)?{(?:(?:(\w+(?=[\/\s}]))|(?:(\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\*)))\s*((?:[^}]|}(?!}))*?)(\/)?|(?:\/(\w+)))}}/g
			// Build abstract syntax tree (AST): [tagName, converter, params, content, hash, bindings, contentMarkup]
			if (html) {
				colon = ":";
				converter = htmlStr;
			}
			slash = slash || isLinkExpr;
			var noError, current0,
				pathBindings = bind && [],
				code = "",
				hash = "",
				passedCtx = "",
				// Block tag if not self-closing and not {{:}} or {{>}} (special case) and not a data-link expression
				block = !slash && !colon && !comment;

			//==== nested helper function ====
			tagName = tagName || colon;
			pushprecedingContent(index);
			loc = index + all.length; // location marker - parsed up to here
			if (codeTag) {
				if (allowCode) {
					content.push(["*", "\n" + params.replace(rUnescapeQuotes, "$1") + "\n"]);
				}
			} else if (tagName) {
				if (tagName === "else") {
					if (rTestElseIf.test(params)) {
						syntaxError('for "{{else if expr}}" use "{{else expr}}"');
					}
					pathBindings = current[6];
					current[7] = markup.substring(current[7], index); // contentMarkup for block tag
					current = stack.pop();
					content = current[3];
					block = true;
				}
				if (params) {
					// remove newlines from the params string, to avoid compiled code errors for unterminated strings
					params = params.replace(rNewLine, " ");
					code = parseParams(params, pathBindings, tmpl)
						.replace(rBuildHash, function(all, isCtx, keyValue) {
							if (isCtx) {
								passedCtx += keyValue + ",";
							} else {
								hash += keyValue + ",";
							}
							return "";
						});
				}
				hash = hash.slice(0, -1);
				code = code.slice(0, -1);
				noError = hash && (hash.indexOf("noerror:true") + 1) && hash || "";

				newNode = [
						tagName,
						converter || !!convertBack || "",
						code,
						block && [],
						'params:"' + params + '",props:{' + hash + "}"
							+ (passedCtx ? ",ctx:{" + passedCtx.slice(0, -1) + "}" : ""),
						noError,
						pathBindings || 0
					];
				content.push(newNode);
				if (block) {
					stack.push(current);
					current = newNode;
					current[7] = loc; // Store current location of open tag, to be able to add contentMarkup when we reach closing tag
				}
			} else if (closeBlock) {
				current0 = current[0];
				blockTagCheck(closeBlock !== current0 && current0 !== "else" && closeBlock);
				current[7] = markup.substring(current[7], index); // contentMarkup for block tag
				current = stack.pop();
			}
			blockTagCheck(!current && closeBlock);
			content = current[3];
		}
		//==== /end of nested functions ====

		var newNode,
			allowCode = tmpl && tmpl.allowCode,
			astTop = [],
			loc = 0,
			stack = [],
			content = astTop,
			current = [, , , astTop];

//TODO	result = tmplFnsCache[markup]; // Only cache if template is not named and markup length < ...,
//and there are no bindings or subtemplates?? Consider standard optimization for data-link="a.b.c"
//		if (result) {
//			tmpl.fn = result;
//		} else {

//		result = markup;

		blockTagCheck(stack[0] && stack[0][3].pop()[0]);
		// Build the AST (abstract syntax tree) under astTop
		markup.replace(rTag, parseTag);

		pushprecedingContent(markup.length);

		if (loc = astTop[astTop.length - 1]) {
			blockTagCheck("" + loc !== loc && (+loc[7] === loc[7]) && loc[0]);
		}
//			result = tmplFnsCache[markup] = buildCode(astTop, tmpl);
//		}
		return buildCode(astTop, isLinkExpr ? markup : tmpl, isLinkExpr);
	}

	function buildCode(ast, tmpl, isLinkExpr) {
		// Build the template function code from the AST nodes, and set as property on the passed-in template object
		// Used for compiling templates, and also by JsViews to build functions for data link expressions
		var i, node, tagName, converter, params, hash, hasTag, hasEncoder, getsVal, hasCnvt, useCnvt, tmplBindings, pathBindings,
			nestedTmpls, tmplName, nestedTmpl, tagAndElses, content, markup, nextIsElse, oldCode, isElse, isGetVal, prm, tagCtxFn,
			tmplBindingKey = 0,
			code = "",
			noError = "",
			tmplOptions = {},
			l = ast.length;

		if ("" + tmpl === tmpl) {
			tmplName = isLinkExpr ? 'data-link="' + tmpl.replace(rNewLine, " ").slice(1, -1) + '"' : tmpl;
			tmpl = 0;
		} else {
			tmplName = tmpl.tmplName || "unnamed";
			if (tmpl.allowCode) {
				tmplOptions.allowCode = true;
			}
			if (tmpl.debug) {
				tmplOptions.debug = true;
			}
			tmplBindings = tmpl.bnds;
			nestedTmpls = tmpl.tmpls;
		}
		for (i = 0; i < l; i++) {
			// AST nodes: [tagName, converter, params, content, hash, noError, pathBindings, contentMarkup, link]
			node = ast[i];

			// Add newline for each callout to t() c() etc. and each markup string
			if ("" + node === node) {
				// a markup string to be inserted
				code += '\nret+="' + node + '";';
			} else {
				// a compiled tag expression to be inserted
				tagName = node[0];
				if (tagName === "*") {
					// Code tag: {{* }}
					code += "" + node[1];
				} else {
					converter = node[1];
					params = node[2];
					content = node[3];
					hash = node[4];
					noError = node[5];
					markup = node[7];

					if (!(isElse = tagName === "else")) {
						tmplBindingKey = 0;
						if (tmplBindings && (pathBindings = node[6])) { // Array of paths, or false if not data-bound
							tmplBindingKey = tmplBindings.push(pathBindings);
						}
					}
					if (isGetVal = tagName === ":") {
						if (converter) {
							tagName = converter === htmlStr ? ">" : converter + tagName;
						}
						if (noError) {
							// If the tag includes noerror=true, we will do a try catch around expressions for named or unnamed parameters
							// passed to the tag, and return the empty string for each expression if it throws during evaluation
							//TODO This does not work for general case - supporting noError on multiple expressions, e.g. tag args and properties.
							//Consider replacing with try<a.b.c(p,q) + a.d, xxx> and return the value of the expression a.b.c(p,q) + a.d, or, if it throws, return xxx||'' (rather than always the empty string)
							prm = "prm" + i;
							noError = "try{var " + prm + "=[" + params + "][0];}catch(e){" + prm + '="";}\n';
							params = prm;
						}
					} else {
						if (content) {
							// Create template object for nested template
							nestedTmpl = TmplObject(markup, tmplOptions);
							nestedTmpl.tmplName = tmplName + "/" + tagName;
							// Compile to AST and then to compiled function
							buildCode(content, nestedTmpl);
							nestedTmpls.push(nestedTmpl);
						}

						if (!isElse) {
							// This is not an else tag.
							tagAndElses = tagName;
							// Switch to a new code string for this bound tag (and its elses, if it has any) - for returning the tagCtxs array
							oldCode = code;
							code = "";
						}
						nextIsElse = ast[i + 1];
						nextIsElse = nextIsElse && nextIsElse[0] === "else";
					}

					hash += ",args:[" + params + "]}";

					if (isGetVal && pathBindings || converter && tagName !== ">") {
						// For convertVal we need a compiled function to return the new tagCtx(s)
						tagCtxFn = new Function("data,view,j,u", " // "
									+ tmplName + " " + tmplBindingKey + " " + tagName + "\n" + noError + "return {" + hash + ";");
						tagCtxFn.paths = pathBindings;
						tagCtxFn._ctxs = tagName;
						if (isLinkExpr) {
							return tagCtxFn;
						}
						useCnvt = 1;
					}

					code += (isGetVal
						? "\n" + (pathBindings ? "" : noError) + (isLinkExpr ? "return " : "ret+=") + (useCnvt // Call _cnvt if there is a converter: {{cnvt: ... }} or {^{cnvt: ... }}
							? (useCnvt = 0, hasCnvt = true, 'c("' + converter + '",view,' + (pathBindings
								? ((tmplBindings[tmplBindingKey - 1] = tagCtxFn), tmplBindingKey) // Store the compiled tagCtxFn in tmpl.bnds, and pass the key to convertVal()
								: "{" + hash) + ");")
							: tagName === ">"
								? (hasEncoder = true, "h(" + params + ");")
								: (getsVal = true, "(v=" + params + ")!=" + (isLinkExpr ? "=" : "") + 'u?v:"";') // Strict equality just for data-link="title{:expr}" so expr=null will remove title attribute
						)
						: (hasTag = true, "{view:view,tmpl:" // Add this tagCtx to the compiled code for the tagCtxs to be passed to renderTag()
							+ (content ? nestedTmpls.length: "0") + "," // For block tags, pass in the key (nestedTmpls.length) to the nested content template
							+ hash + ","));

					if (tagAndElses && !nextIsElse) {
						code = "[" + code.slice(0, -1) + "]"; // This is a data-link expression or the last {{else}} of an inline bound tag. We complete the code for returning the tagCtxs array
						if (isLinkExpr || pathBindings) {
							// This is a bound tag (data-link expression or inline bound tag {^{tag ...}}) so we store a compiled tagCtxs function in tmp.bnds
							code = new Function("data,view,j,u", " // " + tmplName + " " + tmplBindingKey + " " + tagAndElses + "\nreturn " + code + ";");
							if (pathBindings) {
								(tmplBindings[tmplBindingKey - 1] = code).paths = pathBindings;
							}
							code._ctxs = tagName;
							if (isLinkExpr) {
								return code; // For a data-link expression we return the compiled tagCtxs function
							}
						}

						// This is the last {{else}} for an inline tag.
						// For a bound tag, pass the tagCtxs fn lookup key to renderTag.
						// For an unbound tag, include the code directly for evaluating tagCtxs array
						code = oldCode + '\nret+=t("' + tagAndElses + '",view,this,' + (tmplBindingKey || code) + ");";
						pathBindings = 0;
						tagAndElses = 0;
					}
				}
			}
		}
		// Include only the var references that are needed in the code
		code = "// " + tmplName
			+ "\nvar j=j||" + (jQuery ? "jQuery." : "js") + "views"
			+ (getsVal ? ",v" : "")                      // gets value
			+ (hasTag ? ",t=j._tag" : "")                // has tag
			+ (hasCnvt ? ",c=j._cnvt" : "")              // converter
			+ (hasEncoder ? ",h=j.converters.html" : "") // html converter
			+ (isLinkExpr ? ";\n" : ',ret="";\n')
			+ ($viewsSettings.tryCatch ? "try{\n" : "")
			+ (tmplOptions.debug ? "debugger;" : "")
			+ code + (isLinkExpr ? "\n" : "\nreturn ret;\n")
			+ ($viewsSettings.tryCatch ? "\n}catch(e){return j._err(e);}" : "");
		try {
			code = new Function("data,view,j,u", code);
		} catch (e) {
			syntaxError("Compiled template code:\n\n" + code, e);
		}
		if (tmpl) {
			tmpl.fn = code;
		}
		return code;
	}

	function parseParams(params, bindings, tmpl) {

		//function pushBindings() { // Consider structured path bindings
		//	if (bindings) {
		//		named ? bindings[named] = bindings.pop(): bindings.push(list = []);
		//	}
		//}

		function parseTokens(all, lftPrn0, lftPrn, bound, path, operator, err, eq, path2, prn, comma, lftPrn2, apos, quot, rtPrn, rtPrnDot, prn2, space, index, full) {
			//rParams = /(\()(?=\s*\()|(?:([([])\s*)?(?:(\^?)(!*?[#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*:?\/]|(=))\s*|(!*?[#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*(([)\]])(?=\s*\.|\s*\^)|[)\]])([([]?))|(\s+)/g,
			//          lftPrn0        lftPrn        bound            path    operator err                                                eq             path2       prn    comma   lftPrn2   apos quot      rtPrn rtPrnDot                        prn2      space
			// (left paren? followed by (path? followed by operator) or (path followed by paren?)) or comma or apos or quot or right paren or space
			var expr;
			operator = operator || "";
			lftPrn = lftPrn || lftPrn0 || lftPrn2;
			path = path || path2;
			prn = prn || prn2 || "";

			function parsePath(allPath, not, object, helper, view, viewProperty, pathTokens, leafToken) {
				// rPath = /^(?:null|true|false|\d[\d.]*|(!*?)([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
				//                                        none   object     helper    view  viewProperty pathTokens      leafToken
				if (object) {
					if (bindings) {
						if (named === "linkTo") {
							bindto = bindings._jsvto = bindings._jsvto || [];
							bindto.push(path);
						}
						if (!named || boundName) {
							bindings.push(path.slice(not.length)); // Add path binding for paths on props and args,
//							list.push(path);
						}
					}
					if (object !== ".") {
						var ret = (helper
								? 'view.hlp("' + helper + '")'
								: view
									? "view"
									: "data")
							+ (leafToken
								? (viewProperty
									? "." + viewProperty
									: helper
										? ""
										: (view ? "" : "." + object)
									) + (pathTokens || "")
								: (leafToken = helper ? "" : view ? viewProperty || "" : object, ""));

						ret = ret + (leafToken ? "." + leafToken : "");

						return not + (ret.slice(0, 9) === "view.data"
							? ret.slice(5) // convert #view.data... to data...
							: ret);
					}
				}
				return allPath;
			}

			if (err && !aposed && !quoted) {
				syntaxError(params);
			} else {
				if (bindings && rtPrnDot && !aposed && !quoted) {
					// This is a binding to a path in which an object is returned by a helper/data function/expression, e.g. foo()^x.y or (a?b:c)^x.y
					// We create a compiled function to get the object instance (which will be called when the dependent data of the subexpression changes, to return the new object, and trigger re-binding of the subsequent path)
					if (!named || boundName || bindto) {
						expr = pathStart[parenDepth];
						if (full.length - 1 > index - expr) { // We need to compile a subexpression
							expr = full.slice(expr, index + 1);
							rtPrnDot = delimOpenChar1 + ":" + expr + delimCloseChar0; // The parameter or function subexpression
							//TODO Optimize along the lines of:
							//var paths = [];
							//rtPrnDot = tmplLinks[rtPrnDot] = tmplLinks[rtPrnDot] || tmplFn(delimOpenChar0 + rtPrnDot + delimCloseChar1, tmpl, true, paths); // Compile the expression (or use cached copy already in tmpl.links)
							//rtPrnDot.paths = rtPrnDot.paths || paths;

							rtPrnDot = tmplLinks[rtPrnDot] = tmplLinks[rtPrnDot] || tmplFn(delimOpenChar0 + rtPrnDot + delimCloseChar1, tmpl, true); // Compile the expression (or use cached copy already in tmpl.links)
							if (!rtPrnDot.paths) {
								parseParams(expr, rtPrnDot.paths = [], tmpl);
							}
							(bindto || bindings).push({_jsvOb: rtPrnDot}); // Insert special object for in path bindings, to be used for binding the compiled sub expression ()
							//list.push({_jsvOb: rtPrnDot});
						}
					}
				}
				return (aposed
					// within single-quoted string
					? (aposed = !apos, (aposed ? all : '"'))
					: quoted
					// within double-quoted string
						? (quoted = !quot, (quoted ? all : '"'))
						:
					(
						(lftPrn
								? (parenDepth++, pathStart[parenDepth] = index++, lftPrn)
								: "")
						+ (space
							? (parenDepth
								? ""
								//: (pushBindings(), named
								//	: ",")
								: named
									? (named = boundName = bindto = false, "\b")
									: ","
							)
							: eq
					// named param
					// Insert backspace \b (\x08) as separator for named params, used subsequently by rBuildHash
								? (parenDepth && syntaxError(params), named = path, boundName = bound, /*pushBindings(),*/ '\b' + path + ':')
								: path
					// path
									? (path.split("^").join(".").replace(rPath, parsePath)
										+ (prn
											? (fnCall[++parenDepth] = true, path.charAt(0) !== "." && (pathStart[parenDepth] = index), prn)
											: operator)
									)
									: operator
										? operator
										: rtPrn
					// function
											? ((fnCall[parenDepth--] = false, rtPrn)
												+ (prn
													? (fnCall[++parenDepth] = true, prn)
													: "")
											)
											: comma
												? (fnCall[parenDepth] || syntaxError(params), ",") // We don't allow top-level literal arrays or objects
												: lftPrn0
													? ""
													: (aposed = apos, quoted = quot, '"')
					))
				);
			}
		}

		var named, bindto, boundName, // list,
			tmplLinks = tmpl.links,
			fnCall = {},
			pathStart = {0:-1},
			parenDepth = 0,
			quoted = false, // boolean for string content in double quotes
			aposed = false; // or in single quotes

		//pushBindings();

		return (params + " ")
			.replace(/\)\^/g, ").") // Treat "...foo()^bar..." as equivalent to "...foo().bar..."
								//since preceding computed observables in the path will always be updated if their dependencies change
			.replace(rParams, parseTokens);
	}

	//==========
	// Utilities
	//==========

	// Merge objects, in particular contexts which inherit from parent contexts
	function extendCtx(context, parentContext) {
		// Return copy of parentContext, unless context is defined and is different, in which case return a new merged context
		// If neither context nor parentContext are defined, return undefined
		return context && context !== parentContext
			? (parentContext
				? $extend($extend({}, parentContext), context)
				: context)
			: parentContext && $extend({}, parentContext);
	}

	// Get character entity for HTML and Attribute encoding
	function getCharEntity(ch) {
		return charEntities[ch] || (charEntities[ch] = "&#" + ch.charCodeAt(0) + ";");
	}

	//========================== Initialize ==========================

	for (jsvStoreName in jsvStores) {
		registerStore(jsvStoreName, jsvStores[jsvStoreName]);
	}

	var $observable,
		$templates = $views.templates,
		$converters = $views.converters,
		$helpers = $views.helpers,
		$tags = $views.tags,
		$viewsSub = $views.sub,
		$viewsSettings = $views.settings;

	if (jQuery) {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is loaded, so make $ the jQuery object
		$ = jQuery;
		$.fn.render = renderContent;
		if ($observable = $.observable) {
			$extend($viewsSub, $observable.sub); // jquery.observable.js was loaded before jsrender.js
			delete $observable.sub;
		}
	} else {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is not loaded.

		$ = global.jsviews = {};

		$.isArray = Array && Array.isArray || function(obj) {
			return Object.prototype.toString.call(obj) === "[object Array]";
		};

	//	//========================== Future Node.js support ==========================
	//	if ((nodeJsModule = global.module) && nodeJsModule.exports) {
	//		nodeJsModule.exports = $;
	//	}
	}

	$.render = $render;
	$.views = $views;
	$.templates = $templates = $views.templates;

	$viewsSettings({
		debugMode: dbgMode,
		delimiters: $viewsDelimiters,
		_dbgMode: true,
		tryCatch: true
	});

	//========================== Register tags ==========================

	$tags({
		"else": function() {}, // Does nothing but ensures {{else}} tags are recognized as valid
		"if": {
			render: function(val) {
				// This function is called once for {{if}} and once for each {{else}}.
				// We will use the tag.rendering object for carrying rendering state across the calls.
				// If not done (a previous block has not been rendered), look at expression for this block and render the block if expression is truthy
				// Otherwise return ""
				var self = this,
					ret = (self.rendering.done || !val && (arguments.length || !self.tagCtx.index))
						? ""
						: (self.rendering.done = true, self.selected = self.tagCtx.index,
							// Test is satisfied, so render content on current context. We call tagCtx.render() rather than return undefined
							// (which would also render the tmpl/content on the current context but would iterate if it is an array)
							self.tagCtx.render());
				return ret;
			},
			onUpdate: function(ev, eventArgs, tagCtxs) {
				var tci, prevArg, different;
				for (tci = 0; (prevArg = this.tagCtxs[tci]) && prevArg.args.length; tci++) {
					prevArg = prevArg.args[0];
					different = !prevArg !== !tagCtxs[tci].args[0];
					if (!!prevArg || different) {
						return different;
						// If newArg and prevArg are both truthy, return false to cancel update. (Even if values on later elses are different, we still don't want to update, since rendered output would be unchanged)
						// If newArg and prevArg are different, return true, to update
						// If newArg and prevArg are both falsey, move to the next {{else ...}}
					}
				}
				// Boolean value of all args are unchanged (falsey), so return false to cancel update
				return false;
			},
			flow: true
		},
		"for": {
			render: function(val) {
				// This function is called once for {{for}} and once for each {{else}}.
				// We will use the tag.rendering object for carrying rendering state across the calls.
				var self = this,
					tagCtx = self.tagCtx,
					result = "",
					done = 0;

				if (!arguments.length) {
					val = tagCtx.view.data; // Defaults to current data. If current data is an array, iterates over data. (Use {{include}} to compose templates without array iteration)
				}

				if (!self.rendering.done) {
					if (val !== undefined) {
						result += tagCtx.render(val);
						done += $.isArray(val) ? val.length : 1;
					}
					if (self.rendering.done = done) {
						self.selected = tagCtx.index;
					}
					// If nothing was rendered we will look at the next {{else}}. Otherwise, we are done.
				}
				return result;
			},
			flow: true
		},
		include: {
			flow: true
		},
		"*": {
			// {{* code... }} - Ignored if template.allowCode is false. Otherwise include code in compiled template
			render: retVal,
			flow: true
		}
	});

	function getTargetProps(source) {
		// this pointer is theMap - which has tagCtx.props too
		// arguments: tagCtx.args.
		var key, prop,
			props = [];

		if (typeof source === "object") {
			for (key in source) {
				prop = source[key];
				if (!prop || !prop.toJSON || prop.toJSON()) {
					if (typeof prop !== "function") {
						props.push({ key: key, prop: source[key] });
					}
				}
			}
		}
		return props;
	}

	$tags({
		props: $extend($extend({}, $tags["for"]),
			DataMap(getTargetProps)
		)
	});

	//========================== Register converters ==========================

	$converters({
		html: function(text) {
			// HTML encode: Replace < > & and ' and " by corresponding entities.
			return text != undefined ? String(text).replace(rHtmlEncode, getCharEntity) : ""; // null and undefined return ""
		},
		attr: function(text) {
			// Attribute encode: Replace < > & ' and " by corresponding entities.
			return text != undefined ? String(text).replace(rAttrEncode, getCharEntity) : text === null ? text : ""; // null returns null, e.g. to remove attribute. undefined returns ""
		},
		url: function(text) {
			// URL encoding helper.
			return text != undefined ? encodeURI(String(text)) : text === null ? text : ""; // null returns null, e.g. to remove attribute. undefined returns ""
		}
	});

	//========================== Define default delimiters ==========================
	$viewsDelimiters();

})(this, this.jQuery);


window.kafe.bonify({name:'date', version:'1.2', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	var
		// dictionary
		_dict = {
			fr: {
				m:  ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],
				m3: [0,0,0,0,0,'Jun','Jul'],
				w:  ['Dimanche','Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi'],
				d:  ['1er'],
				r:  ['en ce moment','il y a moins d\'une minute','il y a environ une minute','il y a %n minutes','il y a environ une heure','il y a %n heures','hier','avant-hier','il y a %n jours','la semaine passée','il y a %n semaines','le mois passé','il y a %n mois']
			},
			en: {
				m:  ['January','February','March','April','May','June','July','August','September','October','November','December'],
				w:  ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
				d:  ['1st','2nd','3rd','4th','5th','6th','7th','8th','9th','10th','11th','12th','13th','14th','15th','16th','17th','18th','19th','20th','21st','22nd','23rd','24th','25th','26th','27th','28th','29th','30th','31st'],
				r:  ['now','less than a minute ago','about a minute ago','%n minutes ago','about an hour ago','%n hours ago','yesterday','day before yesterday','%n days ago','last week','%n weeks ago','last month','%n months ago']
			},
			multi: {
				m2: ['Ja','Fe','Mr','Al','Ma','Jn','Jl','Au','Se','Oc','No','De']
			}
		},

		// get a valid lang
		_lang = function(lang) {
			return kafe.fn.lang(_dict,lang);
		},

		// get the 3-char month abbreviation
		_m3 = function(month, lang) {
			var d = _dict[_lang(lang)];
			return (d.m3 && d.m3[month]) ? d.m3[month] : d.m[month].toString().substring(0,3);
		},

		// get the 3-char weekday abbreviation
		_w3 = function(weekday, lang) {
			var d = _dict[_lang(lang)];
			return (d.w3 && d.w3[weekday]) ? d.w3[weekday] : d.w[weekday].toString().substring(0,3);
		},

		// trim every element of the array
		_trim = function(list, nb) {
			var d = [];
			for (var i in list) {
				d.push(list[i].toString().substr(0,nb));
			}
			return d;
		}
	;



	/**
	* ### Version 1.2
	* Additionnal methods for date manipulation
	*
	* @module kafe
	* @class kafe.date 
	*/
	var date = {

		/**
		* Number of milliseconds in a second (1000 ms per second)
		*
		* @property SECOND 
		* @type Number
		**/
		SECOND:1000,

		/**
		* Number of milliseconds in a minute (60 seconds per minute)
		*
		* @property MINUTE 
		* @type Number
		**/
		MINUTE:60000,

		/**
		* Number of milliseconds in an hour (60 minutes per hour)
		*
		* @property HOUR 
		* @type Number
		**/
		HOUR:3600000,

		/**
		* Number of milliseconds in a day (24 hours per day)
		*
		* @property DAY 
		* @type Number
		**/
		DAY:86400000,

		/**
		* Number of milliseconds in a week (7 days per week)
		*
		* @property WEEK 
		* @type Number
		**/
		WEEK:604800000,

		/**
		* Number of milliseconds in a month (4.348121428571429 weeks per month)
		*
		* @property MONTH 
		* @type Number
		**/
		MONTH:2629743840,

		/**
		* Number of milliseconds in a year (365.2422 days per year)
		*
		* @property YEAR 
		* @type Number
		**/
		YEAR:31556926080
	};


	/**
	* Get the day number out of the full year (365 days).
	*
	* @method getDayYear
	* @param {Date} d The date
	* @return {Number} The day of the year
	* @example
	*	kafe.date.getDayYear(new Date('2013-07-17'));
	*	// returns 198
	*/
	date.getDayYear = function(d) {
		var
			max = this.getMaxMonth(d.getFullYear()),
			m   = d.getMonth(),
			total = 0
		;

		for (var i=0; i<m; ++i) {
			total += max[i];
		}

		return total+d.getDate();
	};


	/**
	* Returns whether the date is within a leap year or not.
	*
	* @method isLeapYear
	* @param {Number} year The year.
	* @return {Boolean} If it is a leap year or not.
	* @example
	*	kafe.date.isLeapYear(2013);
	*	// returns false
	* @example
	*	kafe.date.isLeapYear(2004);
	*	// returns true
	*/
	date.isLeapYear = function(year) {
		return ((year%4 === 0 && year%400 !== 0) || year == 2000);
	};


	/**
	* Get the number of days for all the months of a given year.
	*
	* @method getMaxMonth
	* @param {Number} year The year.
	* @return {Array(Number)} An ordered array of day counts for each months of the given year.
	* @example
	*	kafe.date.getMaxMonth(2013);
	*	// returns [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
	* @example
	*	kafe.date.getMaxMonth(2013)[3];
	*	// returns 30
	*/
	date.getMaxMonth = function(year) {
		return [31, (this.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	};


	/**
	* Get the full name of the months of the year.
	*
	* @method getMonthNames
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of month names.
	* @example
	*	kafe.date.getMonthNames('en');
	*	// returns ["January", "February", "March", "April", "May", "June", ... ]
	* @example
	*	kafe.date.getMonthNames('en')[3];
	*	// returns "April"
	*/
	date.getMonthNames = function(lang) {
		return _dict[_lang(lang)].m;
	};


	/**
	* Get the 1-char abbreviations of the months of the year.
	*
	* @method getMonth1Names
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of 1-char month abbreviations.
	* @example
	*	kafe.date.getMonth1Names('en');
	*	// returns ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"]
	* @example
	*	kafe.date.getMonth1Names('en')[3];
	*	// returns "A"
	*/
	date.getMonth1Names = function(lang) {
		return _trim(_dict[_lang(lang)].m,1);
	};


	/**
	* Get the 2-char abbreviations of the months of the year.
	*
	* @method getMonth2Names
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of 2-char month abbreviations.
	* @example
	*	kafe.date.getMonth2Names('en');
	*	// returns ["Ja", "Fe", "Mr", "Al", "Ma", "Jn", "Jl", "Au", "Se", "Oc", "No", "De"]
	* @example
	*	kafe.date.getMonth2Names('en')[3];
	*	// returns "Al"
	*/
	date.getMonth2Names = function(lang) {
		lang = _lang(lang);
		return (_dict[lang].m2) ? _dict[lang].m2 : _dict.multi.m2;
	};


	/**
	* Get the 3-char abbreviations of the months of the year.
	*
	* @method getMonth3Names
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of 3-char month abbreviations.
	* @example
	*	kafe.date.getMonth3Names('en');
	*	// returns ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	* @example
	*	kafe.date.getMonth3Names('en')[3];
	*	// returns "Apr"
	*/
	date.getMonth3Names = function(lang) {
		var d = [];
		for (var i=0; i<12; ++i) {
			d.push(_m3(i, lang));
		}
		return d;
	};


	/**
	* Returns whether the date is within a weekend.
	*
	* @method isWeekend
	* @param {Date} d The date
	* @return {Boolean} If it is within a weekend or not.
	* @example
	*	kafe.date.isWeekend(new Date('2013-07-17'));
	*	// returns false
	* @example
	*	kafe.date.isWeekend(new Date('2013-07-20'));
	*	// returns true
	*/
	date.isWeekend = function(date) {
		var weekday = date.getDay();
		return (weekday === 0 || weekday === 6);
	};


	/**
	* Get the full name of the days of the week.
	*
	* @method getWeekdayNames
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of weekday names.
	* @example
	*	kafe.date.getWeekdayNames('en');
	*	// returns ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
	* @example
	*	kafe.date.getWeekdayNames('en')[3];
	*	// returns "Wednesday"
	*/
	date.getWeekdayNames = function(lang) {
		return _dict[_lang(lang)].w;
	};


	/**
	* Get the 1-char abbreviations of the days of the week.
	*
	* @method getWeekday1Names
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of 1-char weekday abbreviations.
	* @example
	*	kafe.date.getWeekday1Names('en');
	*	// returns ["S", "M", "T", "W", "T", "F", "S"]
	* @example
	*	kafe.date.getWeekday1Names('en')[3];
	*	// returns "W"
	*/
	date.getWeekday1Names = function(lang) {
		return _trim(_dict[_lang(lang)].w,1);
	};


	/**
	* Get the 2-char abbreviations of the days of the week.
	*
	* @method getWeekday2Names
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of 2-char weekday abbreviations.
	* @example
	*	kafe.date.getWeekday2Names('en');
	*	// returns ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
	* @example
	*	kafe.date.getWeekday2Names('en')[3];
	*	// returns "We"
	*/
	date.getWeekday2Names = function(lang) {
		return _trim(_dict[_lang(lang)].w,2);
	};


	/**
	* Get the 3-char abbreviations of the days of the week.
	*
	* @method getWeekday3Names
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of 3-char weekday abbreviations.
	* @example
	*	kafe.date.getWeekday3Names('en');
	*	// returns ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
	* @example
	*	kafe.date.getWeekday3Names('en')[3];
	*	// returns "Wed"
	*/
	date.getWeekday3Names = function(lang) {
		var d = [];
		for (var i=0; i<7; ++i) {
			d.push(_w3(i, lang));
		}
		return d;
	};


	/**
	* Get a clean representation for all possible days of a month.
	*
	* @method getDayNames
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {Array(String)} An ordered array of clean representations for all possible days of a month.
	* @example
	*	kafe.date.getDayNames('en');
	*	// returns ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", ... ]
	* @example
	*	kafe.date.getDayNames('en')[3];
	*	// returns "4th"
	*/
	date.getDayNames = function(lang) {
		var
			d = _dict[_lang(lang)].d,
			l = d.length
		;
		for (var i=l; i<31; ++i) {
			d[i] = (i+1).toString();
		}
		return d;
	};


	/**
	* Flexible formatting a given date object.
	*
	* @method format
	* @param {String} format A custom format composed of %- tokens. Characters that are not part of a token will be rendered literally.
	*	@param {Token} format.%Y,%y Year variants: [2011, 11]
	*	@param {Token} format.%M,%m,%A,%a,%B,%b,%C,%c Month variants: [01, 1, January, january, Jan, jan, JA, Ja]
	*	@param {Token} format.%D,%d,%e Day variants: [02, 2, 2nd]
	*	@param {Token} format.%W,%w,%X,%x,%Z,%z Weekday variants: [Sunday, sunday, Sun, sun, Su, su]
	*	@param {Token} format.%H,%h,%K,%k,%p Hour variants [15, 15, 03, 3, pm]
	*	@param {Token} format.%I,%i Minute variants [04, 4]
	*	@param {Token} format.%S,%s Second variants [05, 5]
	* @param {Date} [date=NOW] A date to be formatted.
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {String} The formatted date.
	* @example
	*	kafe.date.format('%W, %A %e, %Y', new Date('2013-07-17'), 'en');
	*	// returns "Tuesday, July 16th, 2013"
	* @example
	*	kafe.date.format('%W, %d %a, %Y', new Date('2013-07-17'), 'fr');
	*	// returns "Mardi, 16 juillet, 2013"
	*/
	date.format = function(format, date, lang) {
		date = (date) ? date : new Date();
		lang = _lang(lang);

		var
			pad  = function() { return ('0'+arguments[0].toString()).slice(-2); },
			d    = _dict[lang],

			year      = date.getFullYear(),
			month     = date.getMonth()+1,
			day       = date.getDate(),
			weekday   = date.getDay(),
			hours     = date.getHours(),
			minutes   = date.getMinutes(),
			seconds   = date.getSeconds(),
			hours12   = ((hours % 12) === 0) ? 12 : (hours % 12),
			hoursAmPm = Math.floor(hours/12),

			//                                                                 2011-01-02 15:04:05
			data = {                                                        // -------------------
				Y: year,                                                    // year           2011
				y: year.toString().substring(2),                            // year             11
				M: pad(month),                                              // month            01
				m: month,                                                   // month             1
				A: d.m[month-1],                                            // month       January
				a: d.m[month-1].toLowerCase(),                              // month       january
				B: this.getMonth3Names(lang)[month-1],                      // month           Jan
				b: this.getMonth3Names(lang)[month-1].toLowerCase(),        // month           jan
				C: this.getMonth2Names(lang)[month-1].toUpperCase(),        // month            JA
				c: this.getMonth2Names(lang)[month-1],                      // month            Ja
				D: pad(day),                                                // day              02
				d: day,                                                     // day               2
				e: this.getDayNames(lang)[day-1],                           // day             2nd
				W: d.w[weekday],                                            // weekday      Sunday
				w: d.w[weekday].toLowerCase(),                              // weekday      sunday
				X: this.getWeekday3Names(lang)[weekday],                    // weekday         Sun
				x: this.getWeekday3Names(lang)[weekday].toLowerCase(),      // weekday         sun
				Z: this.getWeekday2Names(lang)[weekday],                    // weekday          Su
				z: this.getWeekday2Names(lang)[weekday].toLowerCase(),      // weekday          su
				H: pad(hours),                                              // hour             15
				h: hours,                                                   // hour             15
				K: pad(hours12),                                            // hour             03 
				k: hours12,                                                 // hour              3
				p: (hoursAmPm) ? 'pm' : 'am',                               // hour             pm
				I: pad(minutes),                                            // minute           04
				i: minutes,                                                 // minute            4
				S: pad(seconds),                                            // second           05
				s: seconds                                                  // second            5
			}
		;

		for (var i in data) {
			format = format.replace(new RegExp('%'+i,'g'),data[i]);
		}

		return format;
	};


	/**
	* Get a relative time expression from a specific datetime.
	*
	* @method formatRelative
	* @param {Date} time Specific datetime object.
	* @param {Date} [now=NOW] Comparative datetime object to calculate the time difference.
	* @param {String} [lang=CURRENT_ENV_LANG] A two character language code.
	* @return {String} The relative time expression
	* @example
	*	kafe.date.formatRelative(new Date('2013-07-19 6:00:00'), new Date('2013-07-19 20:00:00'), 'en');
	*	// returns "14 hours ago"
	* @example
	*	kafe.date.formatRelative(new Date('2013-05-19'), new Date('2013-07-19'), 'en');
	*	// returns "2 months ago"
	*/
	date.formatRelative = function(time, now, lang) {
		now = (now) ? now : new Date();

		var
			d     = _dict[_lang(lang)].r,
			delta = now.getTime() - time.getTime()
		;

		if (delta <= 0) {
			return d[0];
		} else if (delta < date.MINUTE) {
			return d[1];
		} else if(delta < 2*date.MINUTE) {
			return d[2];
		} else if(delta < date.HOUR) {
			return d[3].replace('%n', Math.floor(delta/date.MINUTE));
		} else if(delta < 2*date.HOUR) {
			return d[4];
		} else if(delta < date.DAY) {
			return d[5].replace('%n', Math.floor(delta/date.HOUR));
		} else if(delta < 2*date.DAY) {
			return d[6];
		} else if(delta < 3*date.DAY) {
			return d[7];
		} else if(delta < date.WEEK) {
			return d[8].replace('%n', Math.floor(delta/date.DAY));
		} else if(delta < 2*date.WEEK) {
			return d[9];
		} else if(delta < date.MONTH) {
			return d[10].replace('%n', Math.floor(delta/date.WEEK));
		} else if(delta < 2*date.MONTH) {
			return d[11];
		} else {
			return d[12].replace('%n', Math.floor(delta/date.MONTH));
		}
	};


	/**
	* Parses a given datetime string into a standard datetime object.
	*
	* @method parse
	* @param {String} dtstring Custom datetime string
	* @return {Date} The date object
	* @example
	*	kafe.date.parse('2012-08-08T12:18:00.000-04:00');
	*	// returns Wed Aug 08 2012 12:18:00 GMT-0400 (EDT)
	* @example
	*	kafe.date.parse('June 3, 2013');
	*	// returns Mon Jun 03 2013 00:00:00 GMT-0400 (EDT)
	*/
	date.parse = function(dtstring) {
		if (/^([0-9]{2,4})-([0-9]{2})-([0-9]{2})$/gi.test(dtstring)) {
			dtstring += ' 00:00:00';
		}

		var ts = Date.parse(dtstring);

		if (isNaN(ts)) {

			var
				y2y4 = function(year) {
					if (year > 69 && year < 100) {
						return Number(year) + 1900;
					} else if (year < 69) {
						return Number(year) + 2000;
					} else {
						return year;
					}
				},
				m = date.getMonth3Names('en'),
				year, month, day, hour, minute, second, delta, e, d
			;

			// ISO 8601 / 2011-03-08 09:25:15 (useless for chrome)
			if ((e = new RegExp('^([0-9]{2,4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})$','gi').exec(dtstring))) {
				year   = y2y4(e[1]);
				month  = e[2];
				day    = e[3];
				hour   = e[4];
				minute = e[5];
				second = e[6];

			// RFC 822 (rss) / Sat, 30 Oct 10 13:51:32 +0000
			} else if ((e = new RegExp('^([a-z]{3}), ([0-9]{2}) ([a-z]{3}) ([0-9]{2,4}) ([0-9]{2}):([0-9]{2}):([0-9]{2}) ([+-][0-9]{4})$','gi').exec(dtstring))) {
				year   = y2y4(e[4]);
				month  = $.inArray(e[3], m)+1;
				day    = e[2];
				hour   = e[5];
				minute = e[6];
				second = e[7];
				delta  = e[8]/100;

			// (twitter) / Mon Nov 01 01:49:22 +0000 2010
			} else if ((e = new RegExp('^([a-z]{3}) ([a-z]{3}) ([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2}) ([+-][0-9]{4}) ([0-9]{2,4})$','gi').exec(dtstring))) {
				year   = y2y4(e[8]);
				month  = $.inArray(e[2], m)+1;
				day    = e[3];
				hour   = e[4];
				minute = e[5];
				second = e[6];
				delta  = e[7]/100;

			// ISO 8601 / 2012-08-08T12:18:00.000-04:00 (useless for chrome/safari)
			} else if ((e = new RegExp('^([0-9]{2,4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})\\.([0-9]{3})([+-])([0-9]{2}):([0-9]{2})$','gi').exec(dtstring))) {
				year   = y2y4(e[1]);
				month  = e[2];
				day    = e[3];
				hour   = e[4];
				minute = e[5];
				second = e[6];
				delta  = (Number(e[9]) + (Number(e[10])/60)) * ((e[8] == '-') ? -1 : 1);
			}

			d = new Date(year, month-1, day, hour, minute, second, 0);
			return (delta !== undefined) ? new Date(d - ( (d.getTimezoneOffset() + (Number(delta)*60) ) * 60 * 1000)) : d;

		} else {
			return new Date(ts);
		}
	};


	/**
	* Refreshes a dropdown containing the days of a given year/month combination.
	*
	* @method refreshSelectDays
	* @param {DOMElement} obj The &lt;select&gt; element
	* @param {Number} month The month 
	* @param {Number} year The year
	* @example
	*	$('.select-month').on('change', function(e) {
	*		kafe.date.refreshSelectDays('.select-day', $(this).val(), $('.select-year').val());
	*	})
	*/
	date.refreshSelectDays = function(obj, month, year) {

		// if a title in the dropdown
		var
			dp = (Number(obj.options[0].value)) ? 0 : 1,
			dn = -dp,
			nb = this.getMaxMonth(year)[month-1]
		;

		// if there are less day in the new month
		if (obj.length+dn > nb) {

			// if a impossible day for the new days is selected
			if (obj.selectedIndex+1 > nb+dn) {
				obj.selectedIndex = nb-1+dp;
			}
			obj.length = nb+dp;

		// if there are more days in the new month
		} else if ( obj.length+dn < nb ) {

			var curr = obj.length;
			obj.length = nb+dp;

			// rebuild the new days
			for (var i=curr; i<nb+dp; ++i) {
				obj.options[i].text = i+1+dn;
				obj.options[i].value = i+1+dn;
			}
		}
	};


	/**
	* Creates an html table calendar for a given month/year combination. You can also provide specific dates with destination url to be included in the rendered source.
	*
	* @method makeMonthCalendar
	* @param {Number} year The year
	* @param {Number} month The month 
	* @param {Object} [links] The links by date
	*	@param {Array} links.YYYY-MM-DD The links
	* @return {String} The rendered HTML
	* @example
	*	kafe.date.makeMonthCalendar(2013, 4, {'2013-04-03':'http://mybirthday.com/'});
	*	// returns "<table data-month="2013-04"><caption>Avril 2013</caption><thead><tr><th>Dim</th><th>Lun</th><th>Mar</th><th>Mer</th><th>Jeu</th><th>Ven</th><th>Sam</th></thead><tbody><tr><td>&nbsp;</td><td data-date="2013-04-01"><span>1</span></td><td data-date="2013-04-02"><span>2</span></td><td data-date="2013-04-03"><a href="http://mybirthday.com/">3</a></td><td data-date="2013-04-04"><span>4</span></td><td data-date="2013-04-05"><span>5</span></td><td data-date="2013-04-06"><span>6</span></td></tr><tr><td data-date="2013-04-07"><span>7</span></td><td data-date="2013-04-08"><span>8</span></td><td data-date="2013-04-09"><span>9</span></td><td data-date="2013-04-10"><span>10</span></td><td data-date="2013-04-11"><span>11</span></td><td data-date="2013-04-12"><span>12</span></td><td data-date="2013-04-13"><span>13</span></td></tr><tr><td data-date="2013-04-14"><span>14</span></td><td data-date="2013-04-15"><span>15</span></td><td data-date="2013-04-16"><span>16</span></td><td data-date="2013-04-17"><span>17</span></td><td data-date="2013-04-18"><span>18</span></td><td data-date="2013-04-19"><span>19</span></td><td data-date="2013-04-20"><span>20</span></td></tr><tr><td data-date="2013-04-21"><span>21</span></td><td data-date="2013-04-22"><span>22</span></td><td data-date="2013-04-23"><span>23</span></td><td data-date="2013-04-24"><span>24</span></td><td data-date="2013-04-25"><span>25</span></td><td data-date="2013-04-26"><span>26</span></td><td data-date="2013-04-27"><span>27</span></td></tr><tr><td data-date="2013-04-28"><span>28</span></td><td data-date="2013-04-29"><span>29</span></td><td data-date="2013-04-30"><span>30</span></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table>"
	*/
	date.makeMonthCalendar = function(year, month, links) {
		links = links || {};
		--m;

		var
			i,
			weekdays = date.getWeekday3Names(),
			max      = date.getMaxMonth(year)[month],
			firstDay = new Date(year,month,1).getDay(),
			week     = 0,
			today    = date.format('%Y-%M-%D', new Date()),
			html     = '<table data-month="'+date.format('%Y-%M', new Date(year,month,1))+'"><caption>'+date.getMonthNames()[month]+' '+year+'</caption><thead><tr>'
		;

		// weekdays
		for (i in weekdays) {
			html += '<th>'+weekdays[i]+'</th>';
		}

		html += '</thead><tbody><tr>';

		// start padding
		for (i=0; i<firstDay; ++i) {
			html += '<td>&nbsp;</td>';
			++week;
		}

		// days
		for (i=1; i<=max; ++i) {
			if (week == 7) {
				html += '</tr><tr>';
				week = 0;
			}

			var thisDate = date.format('%Y-%M-%D', new Date(year,month,i));
			html += '<td data-date="'+thisDate+'"'+((thisDate == today) ? ' class="Today"' : '')+'>' + ((links[thisDate]) ? '<a href="'+links[thisDate]+'">'+i+'</a>' : '<span>'+i+'</span>') + '</td>';
			++week;
		}

		// end padding
		for (i=week; i<7; ++i) {
			html += '<td>&nbsp;</td>';
		}

		return html+'</tr></tbody></table>';
	};


	return date;

})(window.kafe)});
window.kafe.bonify({name:'style', version:'1.3', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	/**
	* ### Version 1.3
	* Common adjustment and manipulation methods for html layouts.
	*
	* @module kafe
	* @class kafe.style 
	*/
	var style = {};

	/**
	* Equalizes the height css property of every element in a selector. If no height is currently present, the method computes the height values before equalizing. Elements must be visible at the time or will be considered as having a height of 0.
	*
	* @method equalHeight
	* @param {String|jQueryObject|DOMElement} selector The affected elements.
	* @param {Object} [options] Additional options.
	*	@param {Number} [options.nbPerRow=0] Allows the elements to be compared in groups of a given number.
	*	@param {Boolean} [options.resetHeight=false] Resets css height of all elements to 'auto' before comparing.
	*	@param {Boolean} [options.borderBox=false] If true, heights will be computed as if the elements had the 'box-sizing' css attribute to 'border-box'.
	* @example
	*	kafe.style.equalHeight('.products', { nbPerRow: 3, resetHeight: true });
	* @example
	*	$('.products').kafe('style.equalHeight', { nbPerRow: 3, resetHeight: true });
	*/
	style.equalHeight = function() {
		var
			$o          = $(arguments[0]),
			options     = arguments[1] || {},
			nbPerRow    = options.nbPerRow,
			resetHeight = !!options.resetHeight,
			borderBox   = !!options.borderBox,

			_doIt = function() {
				var
					$z = $(arguments[0]),
					maxOuterHeight = Math.max.apply(Math, $z.map(function(){ return $(this).outerHeight(); }).get())
				;
				$z.each(function() {
					var $this = $(this);
					$this.height( (borderBox) ? maxOuterHeight : (maxOuterHeight - ($this.outerHeight() - $this.height())) );
				});
			}
		;


		if (resetHeight) {
			$o.height('auto');
		}

		if (!!nbPerRow) {
			var max = Math.ceil($o.length / nbPerRow);
			for (var i=0; i<max; ++i) {
				_doIt($($o.splice(0, nbPerRow)));
			}
		} else {
			_doIt($o);
		}
	};


	/**
	* Replaces &lt;hr&gt; tags into &lt;div class="hr"&gt;&lt;/div&gt; tags to eliminate styling restrictions.
	*
	* @method replaceHr
	* @param {String|jQueryObject|DOMElement} [selector='hr'] Restricts the process to a specific context.
	* @example
	*	kafe.style.replaceHr('.page-content');
	* @example
	*	$('.page-content').kafe('style.replaceHr');
	*/
	style.replaceHr = function() {
		var $e = (arguments[0]) ? $('hr:not(.kafe-replacehr-processed)', $(arguments[0])) : $('hr');
		$e.addClass('kafe-replacehr-processed').hide().wrap('<div class="hr"></div>');
	};


	/**
	* Vertically align an element inside its parent. Elements must be visible at the time or positioning calculations will fail.
	*
	* @method vAlign
	* @param {String|jQueryObject|DOMElement} selector Affected elements.
	* @param {String|jQueryObject|DOMElement} [parent=DIRECT_PARENT] Container in which we want to be centered.
	* @example
	*	kafe.style.vAlign('.menu-items > .label');
	* @example
	*	$('.menu-items > .label').kafe('style.vAlign');
	*/
	style.vAlign = function(e, parent) {
		$(e).each(function(){
			var
				$this   = $(this),
				$parent = (parent) ? $(parent) : $this.parent()
			;
			$this.css({display: 'block', marginTop: Math.floor(($parent.height() - $this.height()) / 2) + 'px'});
		});
	};


	// Add as jQuery plugin
	kafe.fn.plugIntojQuery('', {
		'style.equalHeight': function(obj, parameters) {
			style.equalHeight(obj, parameters[0]);
		},
		'style.replaceHr': function(obj, parameters) {
			style.replaceHr(obj);
		},
		'style.vAlign': function(obj, parameters) {
			style.replaceHr(obj, parameters[0]);
		}
	});


	return style;

})(window.kafe)});
window.kafe.bonify({name:'form', version:'1.4.1', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	/**
	* ### Version 1.4.1
	* Utilitary methods for html forms and related interactions.
	*
	* @module kafe
	* @class kafe.form
	*/
	var form = {};


	/**
	* Adds support for the placeholder attribute for older browsers (Older than IE10). If applied, a "Placeholder" class will also be present when the placeholder text is shown.
	*
	* @method placeholder
	* @param {String} [selector] Selector of text-based form elements. Defaults to 'input&#91;placeholder&#93;, textarea&#91;placeholder&#93;' when left undefined.
	* @example
	*	kafe.form.placeholder('.search-field');
	* @example
	*	$('.search-field').kafe('form.placeholder');
	*/
	form.placeholder = function() {
		var test = document.createElement('input'), placeholderSupport = false;
		if ('placeholder' in test) placeholderSupport = true;

		if (!placeholderSupport) {

			var
				_isEmpty = function () {
					return (arguments[0].replace(/^\s*|\s*$/g, '').replace(/^\t*|\t*$/g, '') === '');
				},
				selector  = 'input[placeholder], textarea[placeholder]'
			;

			$('body')
				.on({
					focus: function() {
						var $this = $(this);
						if (_isEmpty($this.val()) || $this.val() == $this.attr('placeholder')) {
							$this.one('keydown', function() {
								$this.removeClass('Placeholder').val('');
							});
						}
					},
					blur: function() {
						var $this = $(this);
						if (_isEmpty($this.val()) || $this.val() == $this.attr('placeholder')) {
							$this.addClass('Placeholder').val($this.attr('placeholder'));
						}
					},
					change: function() {
						var $this = $(this);
						if (_isEmpty($this.val()) || $this.val() == $this.attr('placeholder')) {
							$this.addClass('Placeholder').val($this.attr('placeholder'));
						} else {
							$this.removeClass('Placeholder');
						}
					}
				}, selector)
				.on({
					submit: function() {
						$(selector).filter('.Placeholder').each(function() {
							$(this).val('');
						});
					}
				}, 'form');

			$(selector).trigger('blur');
		}
	};


	/**
	* Detects the RETURN key, then triggers a callback.
	*
	* @method onEnter
	* @param {String|jQueryObject|DOMElement} selector Selector of text-based form elements.
	* @param {Function} callback Function to be fired by the keypress.
	* @example
	*	kafe.form.onEnter('.search-field', function(input) {
	*		$(input).parents('form').submit();
	*	});
	* @example
	*	$('.search-field').kafe('form.onEnter', function(input) {
	*		$(input).parents('form').submit();
	*	});
	*/
	form.onEnter = function(selector,callback) {
		$(selector).on('keypress', function(e) {
			if (((!!e.which) ? e.which : e.keyCode) == 13) {
				e.preventDefault();
				callback(this);
			}
		});
	};


	/**
	* Automaticaly jump the focus to the next field once the maxlength has been reached.
	*
	* @method autofocusOnNext
	* @param {String|jQueryObject|DOMElement} selector Selector of text-based form elements.
	* @example
	*	kafe.form.autofocusOnNext('.first-name, .last-name, .email');
	* @example
	*	$('.first-name, .last-name, .email').kafe('form.autofocusOnNext');
	*/
	form.autofocusOnNext = function(selector) {
		$(selector).on('keyup',function(e) {
			var
				$this = $(this),
				key   = (!!e.which) ? e.which : e.keyCode
			;

			// tab / alt+tab / arrows
			if (key != 9 && key != 16 && !(key >=36 && key <=40) && $this.val().length == $this.attr('maxlength')) {
				var inputs = $('input, textarea, select');
				inputs.eq( inputs.index(this)+1 ).focus().select();
			}
		});
	};


	/**
	* Adds a simulated maxlength support for textarea elements.
	*
	* @method maxLength
	* @param {String|jQueryObject|DOMElement} selector Selector of text-based form elements.
	* @param {Integer} max Maximum number of characters.
	* @param {Boolean} [block=false] Prevent further character entry once the limit is reached.
	* @param {Function} [callback] Callback triggered when the character limit is reached. The current number of characters is provided as the first argument of the callback.
	* @example
	*	kafe.form.maxLength('.twitter-post', 140, false, function(count) {
	*		console.log(count);
	*	});
	* @example
	*	$('.twitter-post').kafe('form.maxLength', 140, false, function(count) {
	*		console.log(count);
	*	});
	*/
	form.maxLength = function(selector, max, block, callback) {
		$(selector)
			.on('input paste cut keyup',function(e) {

				var
					$this = $(this),
					delay = (kafe.env('ie') && kafe.env('ie') < 9) ? 1 : 0
				;

				setTimeout(function(){
					var
						val   = $this.val(),
						nb    = max - val.length
					;

					if (!!block && nb < 0) {
						$this.val(val.toString().substr(0,max));
						nb = 0;
					}

					if ($.isFunction(callback)) {
						callback(nb);
					}

				},delay);
			})
			.trigger('keyup')
		;
	};


	/**
	* Calculates the password strength value of given fields.
	*
	* @method passwordStrength
	* @param {String|jQueryObject|DOMElement} selector Selector of text-based form elements.
	* @param {Function} [callback] Callback triggered when the value is changed. The calculated strengh value is provided as the first argument of the callback.
	* @example
	*	kafe.form.passwordStrength('.password', function(strengh) {
	*		console.log(strengh);
	*	});
	* @example
	*	$('.password').kafe('form.passwordStrength', function(strengh) {
	*		console.log(strengh);
	*	});
	*/
	form.passwordStrength = function(selector, callback) {

		var
			_countRegexp = function (val, rex) {
				var match = val.match(rex);
				return match ? match.length : 0;
			},

			_getStrength = function (val, minLength) {
				var len = val.length;

				// too short =(
				if (len < minLength) {
					return 0;
				}

				var
					nums = _countRegexp(val, /\d/g),
					lowers = _countRegexp(val, /[a-z]/g),
					uppers = _countRegexp(val, /[A-Z]/g),
					specials = len - nums - lowers - uppers
				;

				// just one type of characters =(
				if (nums == len || lowers == len || uppers == len || specials == len) {
					return 1;
				}

				var strength = 0;
				if (nums) { strength += 2; }
				if (lowers) { strength += uppers ? 4 : 3; }
				if (uppers) { strength += lowers ? 4 : 3; }
				if (specials) { strength += 5; }
				if (len > 10) { strength += 1; }

				return strength;
			},

			_getStrengthLevel = function(val, minLength) {
				var
					strength = _getStrength(val, minLength),
					lvl = 1
				;
				if (strength <= 0) {
					lvl = 1;
				} else if (strength > 0 && strength <= 4) {
					lvl = 2;
				} else if (strength > 4 && strength <= 8) {
					lvl = 3;
				} else if (strength > 8 && strength <= 12) {
					lvl = 4;
				} else if (strength > 12) {
					lvl = 5;
				}

				return lvl;
			},

			min_length = 6
		;

		$(selector)
			.on('input paste cut keyup',function(e) {

				var
					$this = $(this),
					delay = (kafe.env('ie') && kafe.env('ie') < 9) ? 1 : 0
				;

				setTimeout(function(){
					var
						val = $this.val(),
						strength = _getStrengthLevel(val, min_length)
					;

					if ($.isFunction(callback)) {
						callback(strength);
					}
				},delay);
			})
		;
	};


	/**
	* Sanitize form text entry for .NET validator.
	*
	* @method sanitizeFormData
	* @param {String|jQueryObject|DOMElement} selector Reference to the current .NET form.
	* @example
	*	kafe.form.sanitizeFormData('#Form1');
	* @example
	*	$('#Form1').form('form.sanitizeFormData');
	*/
	form.sanitizeFormData = function(selector) {
		var
			$form = $(selector),
			data  = $this.serializeArray()
		;

		for (var i in data) {
			$form.find('input[type="text"][name="'+data[i].name+'"],textarea[name="'+data[i].name+'"]').val(
				data[i].value.toString()
					.replace(/\\</g,'&lt;')
					.replace(/\\>/g,'&gt;')
			);
		}
	};


	/**
	* Replace elements with a submit button
	*
	* @method replaceSubmit
	* @param {String|jQueryObject|DOMElement} [selector='input:submit'] Elements to replace
	* @example
	*	kafe.form.replaceSubmit();
	* @example
	*	$('.Search input:submit').kafe('form.replaceSubmit');
	*/
	form.replaceSubmit = function(selector) {
		( (selector) ? $(selector) : $('input:submit') ).each(function() {
				var $this = $(this);
				$this
					.hide()
					.after( $('<button type="submit" data-kafe-replacesubmit-processed="true" class="'+ $this.attr('class') +'">'+ $this.val() +'</button>').on('click', function(e) { e.preventDefault(); $this.trigger('click'); }) )
				;
		});
	};


	// Add as jQuery plugin
	kafe.fn.plugIntojQuery('', {
		'form.placeholder': function(obj, parameters) {
			form.placeholder(obj);
		},
		'form.onEnter': function(obj, parameters) {
			form.onEnter(obj, parameters[0]);
		},
		'form.autofocusOnNext': function(obj, parameters) {
			form.autofocusOnNext(obj);
		},
		'form.maxLength': function(obj, parameters) {
			form.maxLength(obj, parameters[0]);
		},
		'form.passwordStrength': function(obj, parameters) {
			form.passwordStrength(obj, parameters[0]);
		},
		'form.sanitizeFormData': function(obj, parameters) {
			form.sanitizeFormData(obj);
		},
		'form.replaceSubmit': function(obj, parameters) {
			form.replaceSubmit(obj);
		}
	});


	return form;

})(window.kafe)});
/*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));

/**
 * jQuery JSON plugin 2.4.0
 *
 * @author Brantley Harris, 2009-2011
 * @author Timo Tijhof, 2011-2012
 * @source This plugin is heavily influenced by MochiKit's serializeJSON, which is
 *         copyrighted 2005 by Bob Ippolito.
 * @source Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
 *         website's http://www.json.org/json2.js, which proclaims:
 *         "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 *         I uphold.
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 */
(function ($) {
	'use strict';

	var escape = /["\\\x00-\x1f\x7f-\x9f]/g,
		meta = {
			'\b': '\\b',
			'\t': '\\t',
			'\n': '\\n',
			'\f': '\\f',
			'\r': '\\r',
			'"' : '\\"',
			'\\': '\\\\'
		},
		hasOwn = Object.prototype.hasOwnProperty;

	/**
	 * jQuery.toJSON
	 * Converts the given argument into a JSON representation.
	 *
	 * @param o {Mixed} The json-serializable *thing* to be converted
	 *
	 * If an object has a toJSON prototype, that will be used to get the representation.
	 * Non-integer/string keys are skipped in the object, as are keys that point to a
	 * function.
	 *
	 */
	$.toJSON = typeof JSON === 'object' && JSON.stringify ? JSON.stringify : function (o) {
		if (o === null) {
			return 'null';
		}

		var pairs, k, name, val,
			type = $.type(o);

		if (type === 'undefined') {
			return undefined;
		}

		// Also covers instantiated Number and Boolean objects,
		// which are typeof 'object' but thanks to $.type, we
		// catch them here. I don't know whether it is right
		// or wrong that instantiated primitives are not
		// exported to JSON as an {"object":..}.
		// We choose this path because that's what the browsers did.
		if (type === 'number' || type === 'boolean') {
			return String(o);
		}
		if (type === 'string') {
			return $.quoteString(o);
		}
		if (typeof o.toJSON === 'function') {
			return $.toJSON(o.toJSON());
		}
		if (type === 'date') {
			var month = o.getUTCMonth() + 1,
				day = o.getUTCDate(),
				year = o.getUTCFullYear(),
				hours = o.getUTCHours(),
				minutes = o.getUTCMinutes(),
				seconds = o.getUTCSeconds(),
				milli = o.getUTCMilliseconds();

			if (month < 10) {
				month = '0' + month;
			}
			if (day < 10) {
				day = '0' + day;
			}
			if (hours < 10) {
				hours = '0' + hours;
			}
			if (minutes < 10) {
				minutes = '0' + minutes;
			}
			if (seconds < 10) {
				seconds = '0' + seconds;
			}
			if (milli < 100) {
				milli = '0' + milli;
			}
			if (milli < 10) {
				milli = '0' + milli;
			}
			return '"' + year + '-' + month + '-' + day + 'T' +
				hours + ':' + minutes + ':' + seconds +
				'.' + milli + 'Z"';
		}

		pairs = [];

		if ($.isArray(o)) {
			for (k = 0; k < o.length; k++) {
				pairs.push($.toJSON(o[k]) || 'null');
			}
			return '[' + pairs.join(',') + ']';
		}

		// Any other object (plain object, RegExp, ..)
		// Need to do typeof instead of $.type, because we also
		// want to catch non-plain objects.
		if (typeof o === 'object') {
			for (k in o) {
				// Only include own properties,
				// Filter out inherited prototypes
				if (hasOwn.call(o, k)) {
					// Keys must be numerical or string. Skip others
					type = typeof k;
					if (type === 'number') {
						name = '"' + k + '"';
					} else if (type === 'string') {
						name = $.quoteString(k);
					} else {
						continue;
					}
					type = typeof o[k];

					// Invalid values like these return undefined
					// from toJSON, however those object members
					// shouldn't be included in the JSON string at all.
					if (type !== 'function' && type !== 'undefined') {
						val = $.toJSON(o[k]);
						pairs.push(name + ':' + val);
					}
				}
			}
			return '{' + pairs.join(',') + '}';
		}
	};

	/**
	 * jQuery.evalJSON
	 * Evaluates a given json string.
	 *
	 * @param str {String}
	 */
	$.evalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {
		/*jshint evil: true */
		return eval('(' + str + ')');
	};

	/**
	 * jQuery.secureEvalJSON
	 * Evals JSON in a way that is *more* secure.
	 *
	 * @param str {String}
	 */
	$.secureEvalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {
		var filtered =
			str
			.replace(/\\["\\\/bfnrtu]/g, '@')
			.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
			.replace(/(?:^|:|,)(?:\s*\[)+/g, '');

		if (/^[\],:{}\s]*$/.test(filtered)) {
			/*jshint evil: true */
			return eval('(' + str + ')');
		}
		throw new SyntaxError('Error parsing JSON, source is not valid.');
	};

	/**
	 * jQuery.quoteString
	 * Returns a string-repr of a string, escaping quotes intelligently.
	 * Mostly a support function for toJSON.
	 * Examples:
	 * >>> jQuery.quoteString('apple')
	 * "apple"
	 *
	 * >>> jQuery.quoteString('"Where are we going?", she asked.')
	 * "\"Where are we going?\", she asked."
	 */
	$.quoteString = function (str) {
		if (str.match(escape)) {
			return '"' + str.replace(escape, function (a) {
				var c = meta[a];
				if (typeof c === 'string') {
					return c;
				}
				c = a.charCodeAt();
				return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
			}) + '"';
		}
		return '"' + str + '"';
	};

}(jQuery));



window.kafe.bonify({name:'string', version:'1.2', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	/**
	* ### Version 1.2
	* Additionnal methods for string manipulation and generation.
	*
	* @module kafe
	* @class kafe.string
	*/
	var string = {};

	/**
	* Removes accented charaters from a string.
	*
	* @method removeAccent
	* @param {String} string
	* @return {String} The unaccented string.
	* @example
	*	kafe.string.removeAccent('Kafe signifie café en créole.');
	*	// returns "Kafe signifie cafe en creole."
	*/
	string.removeAccent = function() {
		return arguments[0]
			.replace(/[àáâãäå]/g, 'a') .replace(/[ÀÁÂÃÄÅ]/g, 'A')
			.replace(/æ/g, 'ae')       .replace(/Æ/g, 'AE')
			.replace(/ç/g, 'c')        .replace(/Ç/g, 'C')
			.replace(/[èéêë]/g, 'e')   .replace(/[ÈÉÊË]/g, 'E')
			.replace(/[ìíîï]/g, 'i')   .replace(/[ÌÍÎÏ]/g, 'I')
			.replace(/ñ/g, 'n')        .replace(/Ñ/g, 'N')
			.replace(/[òóôõö]/g, 'o')  .replace(/[ÒÓÔÕÖ]/g, 'O')
			.replace(/œ/g, 'oe')       .replace(/Œ/g, 'OE')
			.replace(/[ùúûü]/g, 'u')   .replace(/[ÙÚÛÜ]/g, 'U')
			.replace(/[ýÿ]/g, 'y')     .replace(/[ÝŸ]/g, 'Y')
		;
	};


	/**
	* Transforms a JSON string into a javascript object.
	*
	* @method toObject
	* @param {String} string A JSON string.
	* @return {Object} A valid javascript object.
	* @example
	*	kafe.string.toObject('{"UserId":"456","Items":["first", "second", "last"],"State":true,"TotalAmount":52,"Taxes":[]}');
	*	// returns Object {UserId: "456", Items: Array[3], State: true, TotalAmount: 52, Taxes: Array[0]}
	*/
	string.toObject = function(s) {

		var cast = function(o) {
			for (var i in o) {
				// object
				if (typeof(o[i]) == 'object') {
					o[i] = cast(o[i]);

				// date
				} else if (/^\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/.test(o[i])) {
					o[i] = new Date(o[i]);
				}
			}
			return o;
		};

		return cast($.evalJSON(s));
	};


	/**
	* Generates a .NET random GUID/UUID. (Version 4, random)
	*
	* @method generateGuid
	* @return {String} A random valid GUID/UUID.
	* @example
	*	kafe.string.generateGuid();
	*	// returns "c573f4f3-982a-4046-818a-083757f98804"
	*/
	string.generateGuid = function() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
			return v.toString(16);
		});
	};


	return string;

})(window.kafe)});

window.kafe.bonify({name:'storage', version:'1.1', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	var
		Modernizr = kafe.dependencies.Modernizr,

		LOCAL   = 1,
		SESSION = 2,


		// if storage type is available
		_isAvailable = function() {
			return (arguments[0] == LOCAL) ? Modernizr.localstorage : Modernizr.sessionstorage;
		},


		// get storage obj
		_getStorageObj = function() {
			return (arguments[0] == LOCAL) ? localStorage : sessionStorage;
		},



		// get data from storage
		_get = function(type, key) {
			if (_isAvailable(type)) {
				var
					sData = _getStorageObj(type).getItem(key),
					data = (sData) ? kafe.string.toObject(sData) : undefined
				;
				if (!!data) {

					if (!!data.expires && _.isDate(data.expires) && data.expires < new Date()) {
						_remove(type,key);

					} else if (!!data.expires && _.isString(data.expires)) {

						if (data.cookie != $.cookie(data.expires)) {
							_remove(type,key);

						} else {
							return data.data;
						}
					} else {
						return data.data;
					}
				}
			}
			return undefined;
		},


		// set data in storage
		_set = function(type,key,value,options) {
			if (_isAvailable(type)) {
				options = options || {};
				var data = {
					//modified: new Date(),
					data: value
				};

				if (!!options.expires) {
					if (_.isString(options.expires)) {
						data.cookie = $.cookie(options.expires);
						data.expires = options.expires;
					} else {
						data.expires = new Date( new Date().getTime()+(options.expires * 1000) );
					}
				}

				_getStorageObj(type).setItem(key, $.toJSON(data));
			}
		},



		// remove data from storage
		_remove = function(type,key) {
			if (_isAvailable(type)) {
				_getStorageObj(type).removeItem(key);
			}
		},


		// get namespace keys from storage
		_getNamespaceKeys = function(type,name) {
			if (_isAvailable(type)) {
				var
					data = [],
					root = _get(type, name),
					s    = _getStorageObj(type),
					r    = new RegExp('^'+name+':')
				;

				if (root !== undefined) {
					data.push(name);
				}

				for (var i in s) {
					if (r.test(i)) {
						if (_get(type,i) !== undefined) {
							data.push(i);
						}
					}
				}

				return data;
			}
			return undefined;
		},


		// get namespace data from storage
		_getNamespaceItems = function(type,name) {
			if (_isAvailable(type)) {

				var
					data = [],
					root = _get(type, name),
					s    = _getStorageObj(type),
					r    = new RegExp('^'+name+':')
				;
				if (root !== undefined) {
					data[name] = root;
				}

				for (var i in s) {
					if (r.test(i)) {
						var d = _get(type,i);
						if (d !== undefined) {
							data[i] = d;
						}
					}
				}

				return data;
			}
			return undefined;
		},


		// remove namespace data from storage
		_removeNamespace = function(type,name) {
			if (_isAvailable(type)) {

				_remove(type,name);

				var
					s = _getStorageObj(type),
					r = new RegExp('^'+name+':')
				;
				for (var i in s) {
					if (r.test(i)) {
						_remove(type,i);
					}
				}
			}
		},




		// get all keys from storage
		_getAllKeys = function(type) {
			if (_isAvailable(type)) {
				var
					data = [],
					s    = _getStorageObj(type)
				;
				for (var i in s) {
					if (_get(type,i) !== undefined) {
						data.push(i);
					}
				}

				return data;
			}
			return undefined;
		},


		// get all data from storage
		_getAllItems = function(type) {
			if (_isAvailable(type)) {
				var
					data = {},
					s    = _getStorageObj(type)
				;
				for (var i in s) {
					var d = _get(type,i);
					if (d !== undefined) {
						data[i] = d;
					}
				}

				return data;
			}
			return undefined;
		},


		// remove all data from storage
		_removeAll = function(type) {
			if (_isAvailable(type)) {
				_getStorageObj(type).clear();
			}
		}
	;




	/**
	* ### Version 1.1
	* Easily access, sort and manipulate local and session storage values.
	*
	* @module kafe
	* @class kafe.storage 
	*/
	var storage = {};

	/**
	* Returns the local value for a specific key.
	*
	* @method getPersistentItem
	* @param {String} key
	* @return {String} If not expiration flag was trigged (cookie or datetime), returns the local storage value. Otherwise, returns *undefined*.
	* @example
	*	kafe.storage.getPersistentItem('history:last-visit');
	*/
	storage.getPersistentItem = function(key) {
		return _get(LOCAL,key);
	};


	/**
	* Returns the session value for a specific key.
	*
	* @method getSessionItem
	* @param {String} key
	* @return {String} If not expiration flag was trigged (cookie or datetime), returns the session storage value. Otherwise, returns *undefined*.
	* @example
	*	kafe.storage.getSessionItem('user:first-name');
	*/
	storage.getSessionItem = function(key) {
		return _get(SESSION,key);
	};


	/**
	* Sets the local value for a specific key with or without an expiration flag. Namespacing can be defined by using the ':' character.
	*
	* @method setPersistentItem
	* @param {String} key
	* @param {String} value
	* @param {Object} [options] Expiration parameters
	*	@param {String} [options.expires] Sets a cookie of the specified key as the expiration flag. Changes to the cookie's value will flag the local storage value for the provided key as expired.
	*	@param {Number} [options.expires] Sets a time based expiration flag in *seconds*. After that time period, the local storage value for the provided key will be flagged as expired.
	* @example
	*	kafe.storage.setPersistentItem('history:last-visit', '2013-07-21', { expires: 3600 });
	*	// The local storage value will return undefined in one hour.
	* @example
	*	kafe.storage.setPersistentItem('history:last-visit', '2013-07-21', { expires: 'last-visit-cookie' });
	*	// The local storage value will return undefined if the value of the cookie 'last-visit-cookie' is changed.
	*/
	storage.setPersistentItem = function(key,value,options) {
		_set(LOCAL,key,value,options);
	};


	/**
	* Sets the session value for a specific key with or without an expiration flag. Namespacing can be defined by using the ':' character.
	*
	* @method setSessionItem
	* @param {String} key
	* @param {String} value
	* @param {Object} [options] Expiration parameters
	*	@param {String} [options.expires] Sets a cookie of the specified key as the expiration flag. Changes to the cookie's value will flag the session storage value for the provided key as expired.
	*	@param {Number} [options.expires] Sets a time based expiration flag in *seconds*. After that time period, the session storage value for the provided key will be flagged as expired.
	* @example
	*	kafe.storage.setSessionItem('user:first-name', 'John', { expires: 3600 });
	*	// The session storage value will return undefined in one hour.
	* @example
	*	kafe.storage.setSessionItem('user:first-name', 'John', { expires: 'logged-user' });
	*	// The session storage value will return undefined if the value of the cookie 'logged-user' is changed.
	*/
	storage.setSessionItem = function(key,value,options) {
		_set(SESSION,key,value,options);
	};


	/**
	* Removes the local storage value for a specific key.
	*
	* @method removePersistentItem
	* @param {String} key
	* @example
	*	kafe.storage.removePersistentItem('history:last-visit');
	*/
	storage.removePersistentItem = function(key) {
		_remove(LOCAL,key);
	};


	/**
	* Removes the session storage value for a specific key.
	*
	* @method removeSessionItem
	* @param {String} key
	* @example
	*	kafe.storage.removeSessionItem('user:first-name');
	*/
	storage.removeSessionItem = function(key) {
		_remove(SESSION,key);
	};


	/**
	* Returns an array of local storage keys for a specific namespace.
	*
	* @method getPersistentNamespaceKeys
	* @param {String} namespace
	* @return {Array(String)} A list of keys.
	* @example
	*	kafe.storage.setPersistentItem('history:last-visit', '2013-07-21');
	*	kafe.storage.setPersistentItem('history:last-page', '/about-us');
	*	
	*	kafe.storage.getPersistentNamespaceKeys('history');
	*	// returns ["history:last-page", "history:last-visit"]
	*/
	storage.getPersistentNamespaceKeys = function(name) {
		return _getNamespaceKeys(LOCAL,name);
	};


	/**
	* Returns an array of session storage keys for a specific namespace.
	*
	* @method getSessionNamespaceKeys
	* @param {String} namespace
	* @return {Array(String)} A list of keys.
	* @example
	*	kafe.storage.setSessionItem('user:first-name', 'John');
	*	kafe.storage.setSessionItem('user:last-name', 'Doe');
	*	
	*	kafe.storage.getSessionNamespaceKeys('user');
	*	// returns ["user:first-name", "user:last-name"]
	*/
	storage.getSessionNamespaceKeys = function(name) {
		return _getNamespaceKeys(SESSION,name);
	};


	/**
	* Returns all local storage key values for a specific namespace.
	*
	* @method getPersistentNamespaceItems
	* @param {String} namespace
	* @return {Object} An object containing all local key/value combinations for the namespace.
	* @example
	*	kafe.storage.setPersistentItem('history:last-visit', '2013-07-21');
	*	kafe.storage.setPersistentItem('history:last-page', '/about-us');
	*	
	*	kafe.storage.getPersistentNamespaceItems('history');
	*	// returns { "history:last-page": "/about-us", "history:last-visit": "2013-07-21" }
	*/
	storage.getPersistentNamespaceItems = function(name) {
		return _getNamespaceItems(LOCAL,name);
	};


	/**
	* Returns all session storage key values for a specific namespace.
	*
	* @method getSessionNamespaceItems
	* @param {String} namespace
	* @return {Object} An object containing all session key/value combinations for the namespace.
	* @example
	*	kafe.storage.setSessionItem('user:first-name', 'John');
	*	kafe.storage.setSessionItem('user:last-name', 'Doe');
	*	
	*	kafe.storage.getSessionNamespaceItems('user');
	*	// returns { "user:first-name": "John", "user:last-name": "Doe" }
	*/
	storage.getSessionNamespaceItems = function(name) {
		return _getNamespaceItems(SESSION,name);
	};


	/**
	* Removes all local storage keys of a specific namespace.
	*
	* @method removePersistentNamespace
	* @param {String} namespace
	* @example
	*	kafe.storage.removePersistentNamespace('history');
	*/
	storage.removePersistentNamespace = function(name) {
		_removeNamespace(LOCAL,name);
	};


	/**
	* Removes all session storage keys of a specific namespace.
	*
	* @method removeSessionNamespace
	* @param {String} namespace
	* @example
	*	kafe.storage.removeSessionNamespace('user');
	*/
	storage.removeSessionNamespace = function(name) {
		_removeNamespace(SESSION,name);
	};


	/**
	* Returns an array of all local storage keys.
	*
	* @method getAllPersistentKeys
	* @return {Array(String)} A list of keys.
	* @example
	*	kafe.storage.setPersistentItem('history:last-visit', '2013-07-21');
	*	kafe.storage.setPersistentItem('website:show-ads', 'true');
	*	
	*	kafe.storage.getAllPersistentKeys();
	*	// returns ["history:last-visit", "website:show-ads"]
	*/
	storage.getAllPersistentKeys = function() {
		return _getAllKeys(LOCAL);
	};


	/**
	* Returns an array of all session storage keys.
	*
	* @method getAllSessionKeys
	* @return {Array(String)} A list of keys.
	* @example
	*	kafe.storage.setSessionItem('user:first-name', 'John');
	*	kafe.storage.setSessionItem('preferences:tutorials', 'false');
	*	
	*	kafe.storage.getAllSessionKeys();
	*	// returns ["user:first-name", "preferences:tutorials"]
	*/
	storage.getAllSessionKeys = function() {
		return _getAllKeys(SESSION);
	};


	/**
	* Returns all local storage key values.
	*
	* @method getAllPersistentItems
	* @return {Object} An object containing all local key/value combinations.
	* @example
	*	kafe.storage.setPersistentItem('history:last-visit', '2013-07-21');
	*	kafe.storage.setPersistentItem('website:show-ads', 'true');
	*	
	*	kafe.storage.getAllPersistentItems();
	*	// returns { "history:last-visit": "2013-07-21", "settings:show-ads": "true" }
	*/
	storage.getAllPersistentItems = function() {
		return _getAllItems(LOCAL);
	};


	/**
	* Returns all session storage key values.
	*
	* @method getAllSessionItems
	* @return {Object} An object containing all session key/value combinations.
	* @example
	*	kafe.storage.setSessionItem('user:first-name', 'John');
	*	kafe.storage.setSessionItem('preferences:tutorials', 'false');
	*	
	*	kafe.storage.getAllSessionItems();
	*	// returns { "preferences:tutorials": "false", "user:first-name": "John" }
	*/
	storage.getAllSessionItems = function() {
		return _getAllItems(SESSION);
	};


	/**
	* Removes all local storage keys.
	*
	* @method removeAllPersistent
	* @example
	*	kafe.storage.removeAllPersistent();
	*/
	storage.removeAllPersistent = function() {
		_removeAll(LOCAL);
	};


	/**
	* Removes all session storage keys.
	*
	* @method removeAllSession
	* @example
	*	kafe.storage.removeAllSession();
	*/
	storage.removeAllSession = function() {
		_removeAll(SESSION);
	};


	/**
	* Get the JSON response of a webservice and keep it in the session storage with or without an expiration flag. Use this shorthand method to prevent unnecessary communication with the server on ajax heavy websites. All session keys used with this method are part of the *kafestorage-getJSON* namespace.
	*
	* @method getJSON
	* @param {String} url URL address of the webservice.
	* @param {Object} [options] Other parameters
	*	@param {String} [options.expires] Sets a cookie of the specified key as the expiration flag. Changes to the cookie's value will force a new call to the webservice on the next use.
	*	@param {Number} [options.expires] Sets a time based expiration flag in *seconds*. After that time period, the next use will call the webservice instead of using the session storage.
	*	@param {Function} [options.callback] Callback triggered if the response is successful or a session stored value exists. The response (or stored value) is passed as the first argument.
	* @example
	*	kafe.storage.getJSON('/UserServices/GetUserInfos?username=john_doe', { expires: 3600 });
	*	// Using this same line will use the session stored value instead of calling the service unless one hour has passed.
	*/
	storage.getJSON = function() {
		if (_isAvailable(SESSION)) {
			var
				url      = arguments[0],
				options  = (typeof(arguments[1]) != 'function') ? arguments[1] : {expires:600},
				callback = (typeof(arguments[1]) != 'function') ? arguments[2] : arguments[1],
				key      = 'kafestorage-getJSON:'+url.toLowerCase().replace(/[^a-z0-9]+/g, '-'),
				cache    = storage.getSessionItem(key)
			;

			if (cache !== undefined) {
				callback(cache);
			} else {
				$.getJSON(url, function(data) {
					storage.setSessionItem(key, data, options);
					callback(data);
				});
			}
		}
	};


	return storage;

})(window.kafe)});
window.kafe.bonify({name:'url', version:'1.0', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	var
		// parse url
		_parseIt = function(str,type) {
			switch (type) {
				case 'params':
					var
						data  = {},
						pairs = str.toString().split('&')
					;
					for (var i in pairs) {
						var e = pairs[i].toString().split('=');
						data[e[0]] = decodeURI(e[1]);
					}
					return data;

				case 'path':
					return str.toString().split('/');
			}
		}
	;


	/**
	* ### Version 1.0
	* Manipulation tools for route-based urls.
	*
	* @module kafe
	* @class kafe.url
	*/
	var url = {};

	/**
	* Parses a querystring as a key/value list and creates a javascript object.
	*
	* @method parseSearchParams
	* @param {String} [querystring=CURRENT_LOCATION_SEARCH]
	* @return {Object} An object represention of the querystring.
	* @example
	*	kafe.url.parseSearchParams('?group=players&team=blue&ranking=3');
	*	// returns Object {group: "players", team: "blue", ranking: "3"}
	*/
	url.parseSearchParams = function(s) {
		s = (s) ? s : window.location.search;
		return _parseIt(s.toString().substring(1), 'params');
	};


	/**
	* Parses a querystring as a path and creates an ordered array.
	*
	* @method parseSearchPath
	* @param {String} [querystring=CURRENT_LOCATION_SEARCH]
	* @return {Array(String)} An array represention of the querystring path.
	* @example
	*	kafe.url.parseSearchPath('?/Players/Teams/Blue');
	*	// returns ["Players", "Teams", "Blue"]
	*/
	url.parseSearchPath = function(s) {
		s = (s) ? s : window.location.search;
		return (s.toString().substring(1,2) == '/') ? _parseIt(s.toString().substring(2), 'path') : [];
	};


	/**
	* Parses a hash string as a key/value list and creates a javascript object.
	*
	* @method parseHashParams
	* @param {String} [hash=CURRENT_LOCATION_HASH]
	* @return {Object} An object represention of the hash string.
	* @example
	*	kafe.url.parseHashParams('#color=blue&size=large&extras=false');
	*	// returns Object {color: "blue", size: "large", extras: "false"}
	*/
	url.parseHashParams = function(s) {
		s = (s) ? s : window.location.hash;
		return _parseIt(s.toString().substring(1), 'params');
	};


	/**
	* Parses a hash string as a path and creates an ordered array.
	*
	* @method parseHashPath
	* @param {String} [hash=CURRENT_LOCATION_HASH]
	* @return {Array(String)} An array represention of the hash path.
	* @example
	*	kafe.url.parseHashPath('#/clothing/man/shirts');
	*	// returns ["clothing", "man", "shirts"]
	*/
	url.parseHashPath = function(s) {
		s = (s) ? s : window.location.hash;
		return (s.toString().substring(1,2) == '/') ? _parseIt(s.toString().substring(2), 'path') : [];
	};


	/**
	* Parses a hashbang (#!) as a key/value list and creates a javascript object.
	*
	* @method parseAjaxParams
	* @param {String} [hashbang=CURRENT_LOCATION_HASH]
	* @return {Object} An object represention of the hashbang.
	* @example
	*	kafe.url.parseAjaxParams('#!color=blue&size=large&extras=false');
	*	// returns Object {color: "blue", size: "large", extras: "false"}
	*/
	url.parseAjaxParams = function(s) {
		s = (s) ? s : window.location.hash;
		return (s.toString().substring(1,2) == '!') ? _parseIt(s.toString().substring(2), 'params') : {};
	};


	/**
	* Parses a hashbang (#!) as a path and creates an ordered array.
	*
	* @method parseAjaxPath
	* @param {String} [hashbang=CURRENT_LOCATION_HASH]
	* @return {Array(String)} An array represention of the hashbang path.
	* @example
	*	kafe.url.parseAjaxPath('#!/clothing/man/shirts');
	*	// returns ["clothing", "man", "shirts"]
	*/
	url.parseAjaxPath = function(s) {
		s = (s) ? s : window.location.hash;
		return (s.toString().substring(1,3) == '!/') ? _parseIt(s.toString().substring(3), 'path') : [];
	};


	return url;

})(window.kafe)});
/*!
	Colorbox v1.4.36 - 2014-02-01
	jQuery lightbox and modal window plugin
	(c) 2014 Jack Moore - http://www.jacklmoore.com/colorbox
	license: http://www.opensource.org/licenses/mit-license.php
*/
(function ($, document, window) {
	var
	// Default settings object.
	// See http://jacklmoore.com/colorbox for details.
	defaults = {
		// data sources
		html: false,
		photo: false,
		iframe: false,
		inline: false,

		// behavior and appearance
		transition: "elastic",
		speed: 300,
		fadeOut: 300,
		width: false,
		initialWidth: "600",
		innerWidth: false,
		maxWidth: false,
		height: false,
		initialHeight: "450",
		innerHeight: false,
		maxHeight: false,
		scalePhotos: true,
		scrolling: true,
		href: false,
		title: false,
		rel: false,
		opacity: 0.9,
		preloading: true,
		className: false,
		overlayClose: true,
		escKey: true,
		arrowKey: true,
		top: false,
		bottom: false,
		left: false,
		right: false,
		fixed: false,
		data: undefined,
		closeButton: true,
		fastIframe: true,
		open: false,
		reposition: true,
		loop: true,
		slideshow: false,
		slideshowAuto: true,
		slideshowSpeed: 2500,
		slideshowStart: "start slideshow",
		slideshowStop: "stop slideshow",
		photoRegex: /\.(gif|png|jp(e|g|eg)|bmp|ico|webp)((#|\?).*)?$/i,

		// alternate image paths for high-res displays
		retinaImage: false,
		retinaUrl: false,
		retinaSuffix: '@2x.$1',

		// internationalization
		current: "image {current} of {total}",
		previous: "previous",
		next: "next",
		close: "close",
		xhrError: "This content failed to load.",
		imgError: "This image failed to load.",

		// accessbility
		returnFocus: true,
		trapFocus: true,

		// callbacks
		onOpen: false,
		onLoad: false,
		onComplete: false,
		onCleanup: false,
		onClosed: false
	},
	
	// Abstracting the HTML and event identifiers for easy rebranding
	colorbox = 'colorbox',
	prefix = 'cbox',
	boxElement = prefix + 'Element',
	
	// Events
	event_open = prefix + '_open',
	event_load = prefix + '_load',
	event_complete = prefix + '_complete',
	event_cleanup = prefix + '_cleanup',
	event_closed = prefix + '_closed',
	event_purge = prefix + '_purge',

	// Cached jQuery Object Variables
	$overlay,
	$box,
	$wrap,
	$content,
	$topBorder,
	$leftBorder,
	$rightBorder,
	$bottomBorder,
	$related,
	$window,
	$loaded,
	$loadingBay,
	$loadingOverlay,
	$title,
	$current,
	$slideshow,
	$next,
	$prev,
	$close,
	$groupControls,
	$events = $('<a/>'), // $([]) would be prefered, but there is an issue with jQuery 1.4.2
	
	// Variables for cached values or use across multiple functions
	settings,
	interfaceHeight,
	interfaceWidth,
	loadedHeight,
	loadedWidth,
	element,
	index,
	photo,
	open,
	active,
	closing,
	loadingTimer,
	publicMethod,
	div = "div",
	className,
	requests = 0,
	previousCSS = {},
	init;

	// ****************
	// HELPER FUNCTIONS
	// ****************
	
	// Convenience function for creating new jQuery objects
	function $tag(tag, id, css) {
		var element = document.createElement(tag);

		if (id) {
			element.id = prefix + id;
		}

		if (css) {
			element.style.cssText = css;
		}

		return $(element);
	}
	
	// Get the window height using innerHeight when available to avoid an issue with iOS
	// http://bugs.jquery.com/ticket/6724
	function winheight() {
		return window.innerHeight ? window.innerHeight : $(window).height();
	}

	// Determine the next and previous members in a group.
	function getIndex(increment) {
		var
		max = $related.length,
		newIndex = (index + increment) % max;
		
		return (newIndex < 0) ? max + newIndex : newIndex;
	}

	// Convert '%' and 'px' values to integers
	function setSize(size, dimension) {
		return Math.round((/%/.test(size) ? ((dimension === 'x' ? $window.width() : winheight()) / 100) : 1) * parseInt(size, 10));
	}
	
	// Checks an href to see if it is a photo.
	// There is a force photo option (photo: true) for hrefs that cannot be matched by the regex.
	function isImage(settings, url) {
		return settings.photo || settings.photoRegex.test(url);
	}

	function retinaUrl(settings, url) {
		return settings.retinaUrl && window.devicePixelRatio > 1 ? url.replace(settings.photoRegex, settings.retinaSuffix) : url;
	}

	function trapFocus(e) {
		if ('contains' in $box[0] && !$box[0].contains(e.target)) {
			e.stopPropagation();
			$box.focus();
		}
	}

	// Assigns function results to their respective properties
	function makeSettings() {
		var i,
			data = $.data(element, colorbox);
		
		if (data == null) {
			settings = $.extend({}, defaults);
			if (console && console.log) {
				console.log('Error: cboxElement missing settings object');
			}
		} else {
			settings = $.extend({}, data);
		}
		
		for (i in settings) {
			if ($.isFunction(settings[i]) && i.slice(0, 2) !== 'on') { // checks to make sure the function isn't one of the callbacks, they will be handled at the appropriate time.
				settings[i] = settings[i].call(element);
			}
		}
		
		settings.rel = settings.rel || element.rel || $(element).data('rel') || 'nofollow';
		settings.href = settings.href || $(element).attr('href');
		settings.title = settings.title || element.title;
		
		if (typeof settings.href === "string") {
			settings.href = $.trim(settings.href);
		}
	}

	function trigger(event, callback) {
		// for external use
		$(document).trigger(event);

		// for internal use
		$events.triggerHandler(event);

		if ($.isFunction(callback)) {
			callback.call(element);
		}
	}


	var slideshow = (function(){
		var active,
			className = prefix + "Slideshow_",
			click = "click." + prefix,
			timeOut;

		function clear () {
			clearTimeout(timeOut);
		}

		function set() {
			if (settings.loop || $related[index + 1]) {
				clear();
				timeOut = setTimeout(publicMethod.next, settings.slideshowSpeed);
			}
		}

		function start() {
			$slideshow
				.html(settings.slideshowStop)
				.unbind(click)
				.one(click, stop);

			$events
				.bind(event_complete, set)
				.bind(event_load, clear);

			$box.removeClass(className + "off").addClass(className + "on");
		}

		function stop() {
			clear();
			
			$events
				.unbind(event_complete, set)
				.unbind(event_load, clear);

			$slideshow
				.html(settings.slideshowStart)
				.unbind(click)
				.one(click, function () {
					publicMethod.next();
					start();
				});

			$box.removeClass(className + "on").addClass(className + "off");
		}

		function reset() {
			active = false;
			$slideshow.hide();
			clear();
			$events
				.unbind(event_complete, set)
				.unbind(event_load, clear);
			$box.removeClass(className + "off " + className + "on");
		}

		return function(){
			if (active) {
				if (!settings.slideshow) {
					$events.unbind(event_cleanup, reset);
					reset();
				}
			} else {
				if (settings.slideshow && $related[1]) {
					active = true;
					$events.one(event_cleanup, reset);
					if (settings.slideshowAuto) {
						start();
					} else {
						stop();
					}
					$slideshow.show();
				}
			}
		};

	}());


	function launch(target) {
		if (!closing) {
			
			element = target;
			
			makeSettings();
			
			$related = $(element);
			
			index = 0;
			
			if (settings.rel !== 'nofollow') {
				$related = $('.' + boxElement).filter(function () {
					var data = $.data(this, colorbox),
						relRelated;

					if (data) {
						relRelated =  $(this).data('rel') || data.rel || this.rel;
					}
					
					return (relRelated === settings.rel);
				});
				index = $related.index(element);
				
				// Check direct calls to Colorbox.
				if (index === -1) {
					$related = $related.add(element);
					index = $related.length - 1;
				}
			}
			
			$overlay.css({
				opacity: parseFloat(settings.opacity),
				cursor: settings.overlayClose ? "pointer" : "auto",
				visibility: 'visible'
			}).show();
			

			if (className) {
				$box.add($overlay).removeClass(className);
			}
			if (settings.className) {
				$box.add($overlay).addClass(settings.className);
			}
			className = settings.className;

			if (settings.closeButton) {
				$close.html(settings.close).appendTo($content);
			} else {
				$close.appendTo('<div/>');
			}

			if (!open) {
				open = active = true; // Prevents the page-change action from queuing up if the visitor holds down the left or right keys.
				
				// Show colorbox so the sizes can be calculated in older versions of jQuery
				$box.css({visibility:'hidden', display:'block'});
				
				$loaded = $tag(div, 'LoadedContent', 'width:0; height:0; overflow:hidden');
				$content.css({width:'', height:''}).append($loaded);

				// Cache values needed for size calculations
				interfaceHeight = $topBorder.height() + $bottomBorder.height() + $content.outerHeight(true) - $content.height();
				interfaceWidth = $leftBorder.width() + $rightBorder.width() + $content.outerWidth(true) - $content.width();
				loadedHeight = $loaded.outerHeight(true);
				loadedWidth = $loaded.outerWidth(true);

				// Opens inital empty Colorbox prior to content being loaded.
				settings.w = setSize(settings.initialWidth, 'x');
				settings.h = setSize(settings.initialHeight, 'y');
				$loaded.css({width:'', height:settings.h});
				publicMethod.position();

				trigger(event_open, settings.onOpen);
				
				$groupControls.add($title).hide();

				$box.focus();
				
				if (settings.trapFocus) {
					// Confine focus to the modal
					// Uses event capturing that is not supported in IE8-
					if (document.addEventListener) {

						document.addEventListener('focus', trapFocus, true);
						
						$events.one(event_closed, function () {
							document.removeEventListener('focus', trapFocus, true);
						});
					}
				}

				// Return focus on closing
				if (settings.returnFocus) {
					$events.one(event_closed, function () {
						$(element).focus();
					});
				}
			}
			load();
		}
	}

	// Colorbox's markup needs to be added to the DOM prior to being called
	// so that the browser will go ahead and load the CSS background images.
	function appendHTML() {
		if (!$box && document.body) {
			init = false;
			$window = $(window);
			$box = $tag(div).attr({
				id: colorbox,
				'class': $.support.opacity === false ? prefix + 'IE' : '', // class for optional IE8 & lower targeted CSS.
				role: 'dialog',
				tabindex: '-1'
			}).hide();
			$overlay = $tag(div, "Overlay").hide();
			$loadingOverlay = $([$tag(div, "LoadingOverlay")[0],$tag(div, "LoadingGraphic")[0]]);
			$wrap = $tag(div, "Wrapper");
			$content = $tag(div, "Content").append(
				$title = $tag(div, "Title"),
				$current = $tag(div, "Current"),
				$prev = $('<button type="button"/>').attr({id:prefix+'Previous'}),
				$next = $('<button type="button"/>').attr({id:prefix+'Next'}),
				$slideshow = $tag('button', "Slideshow"),
				$loadingOverlay
			);

			$close = $('<button type="button"/>').attr({id:prefix+'Close'});
			
			$wrap.append( // The 3x3 Grid that makes up Colorbox
				$tag(div).append(
					$tag(div, "TopLeft"),
					$topBorder = $tag(div, "TopCenter"),
					$tag(div, "TopRight")
				),
				$tag(div, false, 'clear:left').append(
					$leftBorder = $tag(div, "MiddleLeft"),
					$content,
					$rightBorder = $tag(div, "MiddleRight")
				),
				$tag(div, false, 'clear:left').append(
					$tag(div, "BottomLeft"),
					$bottomBorder = $tag(div, "BottomCenter"),
					$tag(div, "BottomRight")
				)
			).find('div div').css({'float': 'left'});
			
			$loadingBay = $tag(div, false, 'position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;');
			
			$groupControls = $next.add($prev).add($current).add($slideshow);

			$(document.body).append($overlay, $box.append($wrap, $loadingBay));
		}
	}

	// Add Colorbox's event bindings
	function addBindings() {
		function clickHandler(e) {
			// ignore non-left-mouse-clicks and clicks modified with ctrl / command, shift, or alt.
			// See: http://jacklmoore.com/notes/click-events/
			if (!(e.which > 1 || e.shiftKey || e.altKey || e.metaKey || e.ctrlKey)) {
				e.preventDefault();
				launch(this);
			}
		}

		if ($box) {
			if (!init) {
				init = true;

				// Anonymous functions here keep the public method from being cached, thereby allowing them to be redefined on the fly.
				$next.click(function () {
					publicMethod.next();
				});
				$prev.click(function () {
					publicMethod.prev();
				});
				$close.click(function () {
					publicMethod.close();
				});
				$overlay.click(function () {
					if (settings.overlayClose) {
						publicMethod.close();
					}
				});
				
				// Key Bindings
				$(document).bind('keydown.' + prefix, function (e) {
					var key = e.keyCode;
					if (open && settings.escKey && key === 27) {
						e.preventDefault();
						publicMethod.close();
					}
					if (open && settings.arrowKey && $related[1] && !e.altKey) {
						if (key === 37) {
							e.preventDefault();
							$prev.click();
						} else if (key === 39) {
							e.preventDefault();
							$next.click();
						}
					}
				});

				if ($.isFunction($.fn.on)) {
					// For jQuery 1.7+
					$(document).on('click.'+prefix, '.'+boxElement, clickHandler);
				} else {
					// For jQuery 1.3.x -> 1.6.x
					// This code is never reached in jQuery 1.9, so do not contact me about 'live' being removed.
					// This is not here for jQuery 1.9, it's here for legacy users.
					$('.'+boxElement).live('click.'+prefix, clickHandler);
				}
			}
			return true;
		}
		return false;
	}

	// Don't do anything if Colorbox already exists.
	if ($.colorbox) {
		return;
	}

	// Append the HTML when the DOM loads
	$(appendHTML);


	// ****************
	// PUBLIC FUNCTIONS
	// Usage format: $.colorbox.close();
	// Usage from within an iframe: parent.jQuery.colorbox.close();
	// ****************
	
	publicMethod = $.fn[colorbox] = $[colorbox] = function (options, callback) {
		var $this = this;
		
		options = options || {};
		
		appendHTML();

		if (addBindings()) {
			if ($.isFunction($this)) { // assume a call to $.colorbox
				$this = $('<a/>');
				options.open = true;
			} else if (!$this[0]) { // colorbox being applied to empty collection
				return $this;
			}
			
			if (callback) {
				options.onComplete = callback;
			}
			
			$this.each(function () {
				$.data(this, colorbox, $.extend({}, $.data(this, colorbox) || defaults, options));
			}).addClass(boxElement);
			
			if (($.isFunction(options.open) && options.open.call($this)) || options.open) {
				launch($this[0]);
			}
		}
		
		return $this;
	};

	publicMethod.position = function (speed, loadedCallback) {
		var
		css,
		top = 0,
		left = 0,
		offset = $box.offset(),
		scrollTop,
		scrollLeft;
		
		$window.unbind('resize.' + prefix);

		// remove the modal so that it doesn't influence the document width/height
		$box.css({top: -9e4, left: -9e4});

		scrollTop = $window.scrollTop();
		scrollLeft = $window.scrollLeft();

		if (settings.fixed) {
			offset.top -= scrollTop;
			offset.left -= scrollLeft;
			$box.css({position: 'fixed'});
		} else {
			top = scrollTop;
			left = scrollLeft;
			$box.css({position: 'absolute'});
		}

		// keeps the top and left positions within the browser's viewport.
		if (settings.right !== false) {
			left += Math.max($window.width() - settings.w - loadedWidth - interfaceWidth - setSize(settings.right, 'x'), 0);
		} else if (settings.left !== false) {
			left += setSize(settings.left, 'x');
		} else {
			left += Math.round(Math.max($window.width() - settings.w - loadedWidth - interfaceWidth, 0) / 2);
		}
		
		if (settings.bottom !== false) {
			top += Math.max(winheight() - settings.h - loadedHeight - interfaceHeight - setSize(settings.bottom, 'y'), 0);
		} else if (settings.top !== false) {
			top += setSize(settings.top, 'y');
		} else {
			top += Math.round(Math.max(winheight() - settings.h - loadedHeight - interfaceHeight, 0) / 2);
		}

		$box.css({top: offset.top, left: offset.left, visibility:'visible'});
		
		// this gives the wrapper plenty of breathing room so it's floated contents can move around smoothly,
		// but it has to be shrank down around the size of div#colorbox when it's done.  If not,
		// it can invoke an obscure IE bug when using iframes.
		$wrap[0].style.width = $wrap[0].style.height = "9999px";
		
		function modalDimensions() {
			$topBorder[0].style.width = $bottomBorder[0].style.width = $content[0].style.width = (parseInt($box[0].style.width,10) - interfaceWidth)+'px';
			$content[0].style.height = $leftBorder[0].style.height = $rightBorder[0].style.height = (parseInt($box[0].style.height,10) - interfaceHeight)+'px';
		}

		css = {width: settings.w + loadedWidth + interfaceWidth, height: settings.h + loadedHeight + interfaceHeight, top: top, left: left};

		// setting the speed to 0 if the content hasn't changed size or position
		if (speed) {
			var tempSpeed = 0;
			$.each(css, function(i){
				if (css[i] !== previousCSS[i]) {
					tempSpeed = speed;
					return;
				}
			});
			speed = tempSpeed;
		}

		previousCSS = css;

		if (!speed) {
			$box.css(css);
		}

		$box.dequeue().animate(css, {
			duration: speed || 0,
			complete: function () {
				modalDimensions();
				
				active = false;
				
				// shrink the wrapper down to exactly the size of colorbox to avoid a bug in IE's iframe implementation.
				$wrap[0].style.width = (settings.w + loadedWidth + interfaceWidth) + "px";
				$wrap[0].style.height = (settings.h + loadedHeight + interfaceHeight) + "px";
				
				if (settings.reposition) {
					setTimeout(function () {  // small delay before binding onresize due to an IE8 bug.
						$window.bind('resize.' + prefix, publicMethod.position);
					}, 1);
				}

				if (loadedCallback) {
					loadedCallback();
				}
			},
			step: modalDimensions
		});
	};

	publicMethod.resize = function (options) {
		var scrolltop;
		
		if (open) {
			options = options || {};
			
			if (options.width) {
				settings.w = setSize(options.width, 'x') - loadedWidth - interfaceWidth;
			}

			if (options.innerWidth) {
				settings.w = setSize(options.innerWidth, 'x');
			}

			$loaded.css({width: settings.w});
			
			if (options.height) {
				settings.h = setSize(options.height, 'y') - loadedHeight - interfaceHeight;
			}

			if (options.innerHeight) {
				settings.h = setSize(options.innerHeight, 'y');
			}

			if (!options.innerHeight && !options.height) {
				scrolltop = $loaded.scrollTop();
				$loaded.css({height: "auto"});
				settings.h = $loaded.height();
			}

			$loaded.css({height: settings.h});

			if(scrolltop) {
				$loaded.scrollTop(scrolltop);
			}
			
			publicMethod.position(settings.transition === "none" ? 0 : settings.speed);
		}
	};

	publicMethod.prep = function (object) {
		if (!open) {
			return;
		}
		
		var callback, speed = settings.transition === "none" ? 0 : settings.speed;

		$loaded.empty().remove(); // Using empty first may prevent some IE7 issues.

		$loaded = $tag(div, 'LoadedContent').append(object);
		
		function getWidth() {
			settings.w = settings.w || $loaded.width();
			settings.w = settings.mw && settings.mw < settings.w ? settings.mw : settings.w;
			return settings.w;
		}
		function getHeight() {
			settings.h = settings.h || $loaded.height();
			settings.h = settings.mh && settings.mh < settings.h ? settings.mh : settings.h;
			return settings.h;
		}
		
		$loaded.hide()
		.appendTo($loadingBay.show())// content has to be appended to the DOM for accurate size calculations.
		.css({width: getWidth(), overflow: settings.scrolling ? 'auto' : 'hidden'})
		.css({height: getHeight()})// sets the height independently from the width in case the new width influences the value of height.
		.prependTo($content);
		
		$loadingBay.hide();
		
		// floating the IMG removes the bottom line-height and fixed a problem where IE miscalculates the width of the parent element as 100% of the document width.
		
		$(photo).css({'float': 'none'});

		callback = function () {
			var total = $related.length,
				iframe,
				frameBorder = 'frameBorder',
				allowTransparency = 'allowTransparency',
				complete;
			
			if (!open) {
				return;
			}
			
			function removeFilter() { // Needed for IE7 & IE8 in versions of jQuery prior to 1.7.2
				if ($.support.opacity === false) {
					$box[0].style.removeAttribute('filter');
				}
			}
			
			complete = function () {
				clearTimeout(loadingTimer);
				$loadingOverlay.hide();
				trigger(event_complete, settings.onComplete);
			};

			
			$title.html(settings.title).add($loaded).show();
			
			if (total > 1) { // handle grouping
				if (typeof settings.current === "string") {
					$current.html(settings.current.replace('{current}', index + 1).replace('{total}', total)).show();
				}
				
				$next[(settings.loop || index < total - 1) ? "show" : "hide"]().html(settings.next);
				$prev[(settings.loop || index) ? "show" : "hide"]().html(settings.previous);
				
				slideshow();
				
				// Preloads images within a rel group
				if (settings.preloading) {
					$.each([getIndex(-1), getIndex(1)], function(){
						var src,
							img,
							i = $related[this],
							data = $.data(i, colorbox);

						if (data && data.href) {
							src = data.href;
							if ($.isFunction(src)) {
								src = src.call(i);
							}
						} else {
							src = $(i).attr('href');
						}

						if (src && isImage(data, src)) {
							src = retinaUrl(data, src);
							img = document.createElement('img');
							img.src = src;
						}
					});
				}
			} else {
				$groupControls.hide();
			}
			
			if (settings.iframe) {
				iframe = $tag('iframe')[0];
				
				if (frameBorder in iframe) {
					iframe[frameBorder] = 0;
				}
				
				if (allowTransparency in iframe) {
					iframe[allowTransparency] = "true";
				}

				if (!settings.scrolling) {
					iframe.scrolling = "no";
				}
				
				$(iframe)
					.attr({
						src: settings.href,
						name: (new Date()).getTime(), // give the iframe a unique name to prevent caching
						'class': prefix + 'Iframe',
						allowFullScreen : true, // allow HTML5 video to go fullscreen
						webkitAllowFullScreen : true,
						mozallowfullscreen : true
					})
					.one('load', complete)
					.appendTo($loaded);
				
				$events.one(event_purge, function () {
					iframe.src = "//about:blank";
				});

				if (settings.fastIframe) {
					$(iframe).trigger('load');
				}
			} else {
				complete();
			}
			
			if (settings.transition === 'fade') {
				$box.fadeTo(speed, 1, removeFilter);
			} else {
				removeFilter();
			}
		};
		
		if (settings.transition === 'fade') {
			$box.fadeTo(speed, 0, function () {
				publicMethod.position(0, callback);
			});
		} else {
			publicMethod.position(speed, callback);
		}
	};

	function load () {
		var href, setResize, prep = publicMethod.prep, $inline, request = ++requests;
		
		active = true;
		
		photo = false;
		
		element = $related[index];
		
		makeSettings();
		
		trigger(event_purge);
		
		trigger(event_load, settings.onLoad);
		
		settings.h = settings.height ?
				setSize(settings.height, 'y') - loadedHeight - interfaceHeight :
				settings.innerHeight && setSize(settings.innerHeight, 'y');
		
		settings.w = settings.width ?
				setSize(settings.width, 'x') - loadedWidth - interfaceWidth :
				settings.innerWidth && setSize(settings.innerWidth, 'x');
		
		// Sets the minimum dimensions for use in image scaling
		settings.mw = settings.w;
		settings.mh = settings.h;
		
		// Re-evaluate the minimum width and height based on maxWidth and maxHeight values.
		// If the width or height exceed the maxWidth or maxHeight, use the maximum values instead.
		if (settings.maxWidth) {
			settings.mw = setSize(settings.maxWidth, 'x') - loadedWidth - interfaceWidth;
			settings.mw = settings.w && settings.w < settings.mw ? settings.w : settings.mw;
		}
		if (settings.maxHeight) {
			settings.mh = setSize(settings.maxHeight, 'y') - loadedHeight - interfaceHeight;
			settings.mh = settings.h && settings.h < settings.mh ? settings.h : settings.mh;
		}
		
		href = settings.href;
		
		loadingTimer = setTimeout(function () {
			$loadingOverlay.show();
		}, 100);
		
		if (settings.inline) {
			// Inserts an empty placeholder where inline content is being pulled from.
			// An event is bound to put inline content back when Colorbox closes or loads new content.
			$inline = $tag(div).hide().insertBefore($(href)[0]);

			$events.one(event_purge, function () {
				$inline.replaceWith($loaded.children());
			});

			prep($(href));
		} else if (settings.iframe) {
			// IFrame element won't be added to the DOM until it is ready to be displayed,
			// to avoid problems with DOM-ready JS that might be trying to run in that iframe.
			prep(" ");
		} else if (settings.html) {
			prep(settings.html);
		} else if (isImage(settings, href)) {

			href = retinaUrl(settings, href);

			photo = document.createElement('img');

			$(photo)
			.addClass(prefix + 'Photo')
			.bind('error',function () {
				settings.title = false;
				prep($tag(div, 'Error').html(settings.imgError));
			})
			.one('load', function () {
				var percent;

				if (request !== requests) {
					return;
				}

				$.each(['alt', 'longdesc', 'aria-describedby'], function(i,val){
					var attr = $(element).attr(val) || $(element).attr('data-'+val);
					if (attr) {
						photo.setAttribute(val, attr);
					}
				});

				if (settings.retinaImage && window.devicePixelRatio > 1) {
					photo.height = photo.height / window.devicePixelRatio;
					photo.width = photo.width / window.devicePixelRatio;
				}

				if (settings.scalePhotos) {
					setResize = function () {
						photo.height -= photo.height * percent;
						photo.width -= photo.width * percent;
					};
					if (settings.mw && photo.width > settings.mw) {
						percent = (photo.width - settings.mw) / photo.width;
						setResize();
					}
					if (settings.mh && photo.height > settings.mh) {
						percent = (photo.height - settings.mh) / photo.height;
						setResize();
					}
				}
				
				if (settings.h) {
					photo.style.marginTop = Math.max(settings.mh - photo.height, 0) / 2 + 'px';
				}
				
				if ($related[1] && (settings.loop || $related[index + 1])) {
					photo.style.cursor = 'pointer';
					photo.onclick = function () {
						publicMethod.next();
					};
				}

				photo.style.width = photo.width + 'px';
				photo.style.height = photo.height + 'px';

				setTimeout(function () { // A pause because Chrome will sometimes report a 0 by 0 size otherwise.
					prep(photo);
				}, 1);
			});
			
			setTimeout(function () { // A pause because Opera 10.6+ will sometimes not run the onload function otherwise.
				photo.src = href;
			}, 1);
		} else if (href) {
			$loadingBay.load(href, settings.data, function (data, status) {
				if (request === requests) {
					prep(status === 'error' ? $tag(div, 'Error').html(settings.xhrError) : $(this).contents());
				}
			});
		}
	}
		
	// Navigates to the next page/image in a set.
	publicMethod.next = function () {
		if (!active && $related[1] && (settings.loop || $related[index + 1])) {
			index = getIndex(1);
			launch($related[index]);
		}
	};
	
	publicMethod.prev = function () {
		if (!active && $related[1] && (settings.loop || index)) {
			index = getIndex(-1);
			launch($related[index]);
		}
	};

	// Note: to use this within an iframe use the following format: parent.jQuery.colorbox.close();
	publicMethod.close = function () {
		if (open && !closing) {
			
			closing = true;
			
			open = false;
			
			trigger(event_cleanup, settings.onCleanup);
			
			$window.unbind('.' + prefix);
			
			$overlay.fadeTo(settings.fadeOut || 0, 0);
			
			$box.stop().fadeTo(settings.fadeOut || 0, 0, function () {
			
				$box.add($overlay).css({'opacity': 1, cursor: 'auto'}).hide();
				
				trigger(event_purge);
				
				$loaded.empty().remove(); // Using empty first may prevent some IE7 issues.
				
				setTimeout(function () {
					closing = false;
					trigger(event_closed, settings.onClosed);
				}, 1);
			});
		}
	};

	// Removes changes Colorbox made to the document, but does not remove the plugin.
	publicMethod.remove = function () {
		if (!$box) { return; }

		$box.stop();
		$.colorbox.close();
		$box.stop().remove();
		$overlay.remove();
		closing = false;
		$box = null;
		$('.' + boxElement)
			.removeData(colorbox)
			.removeClass(boxElement);

		$(document).unbind('click.'+prefix);
	};

	// A method for fetching the current element Colorbox is referencing.
	// returns a jQuery object.
	publicMethod.element = function () {
		return $(element);
	};

	publicMethod.settings = defaults;

}(jQuery, document, window));


window.kafe.bonify({name:'ext.colorbox', version:'1.2.1', obj:(function(kafe,undefined){

	var $ = kafe.dependencies.jQuery;

	var
		_params = {
			theme:        '',
			opacity:      0.5,
			transition:   'none',
			overlayClose: true,
			escKey:       true,
			scrolling:    false
		},

		_open = function(options, obj) {
			options = colorbox.getParams(options);

			if (options.theme) {
				colorbox.changeTheme(options.theme);
				delete options.theme;
			}

			if ($obj !== undefined) {
				return $(obj).colorbox(options);
			} else {
				$.colorbox(options);
			}
		}
	;

	// bind theme changer class removing
	$(document).on('cbox_closed', function(){
		var
			$body = $('body'),
			classes = $body.attr('class') || ''
		;
		classes = classes.toString().split(' ');
		for (var i in classes) {
			if (/^kafecolorbox-theme-/.test(classes[i])) {
				$body.removeClass(classes[i]);
			}
		}
	});

	// change controls text
	if (kafe.env('lang') == 'fr') {
		$.extend($.colorbox.settings, {
			current:        'image {current} sur {total}',
			previous:       'pr&eacute;c&eacute;dente',
			next:           'suivante',
			close:          'fermer',
			xhrError:       'Impossible de charger ce contenu.',
			imgError:       'Impossible de charger cette image.',
			slideshowStart: 'd&eacute;marrer la pr&eacute;sentation',
			slideshowStop:  'arr&ecirc;ter la pr&eacute;sentation'
		});
	}


	/**
	* ### Version 1.2.1
	* Extra methods for the colorbox jQuery plugin.
	*
	* @module kafe.ext
	* @class kafe.ext.colorbox
	*/
	var colorbox = {};


	/**
	* Move the colorbox markup into .NET Webform
	*
	* @method moveInForm
	*/
	colorbox.moveInForm = function() {
		$('#colorbox').appendTo('form');
	};


	/**
	* Get the default params with optional extra params.
	*
	* @method getParams
	* @param {Object} [options] Options
	* @return {Object} The default colorbox params.
	*/
	colorbox.getParams = function() {
		return $.extend({}, _params, (!!arguments[0]) ? arguments[0] : {});
	};


	/**
	* Set the default params.
	*
	* @method setParams
	* @param {Object} options Options
	*/
	colorbox.setParams = function() {
		$.extend(_params, arguments[0]);
	};


	/**
	* Change the default theme, which is a class on the body with the name `kafecolorbox-theme-THEME`.
	*
	* @method changeTheme
	* @param {String} theme Theme name.
	*/
	colorbox.changeTheme = function(theme) {
		var $body = $('body');

		if (!$body.hasClass('kafecolorbox-theme-'+theme)) {

			var classes = $body.attr('class') || '';
			classes = classes.toString().split(' ');
			for (var i in classes) {
				if (/^kafecolorbox-theme-/.test(classes[i])) {
					$body.removeClass(classes[i]);
				}
			}

			$body.addClass('kafecolorbox-theme-'+theme);
			$.colorbox.remove();
			$.colorbox.init();
		}
	};


	/**
	* Calls $.colorbox() with the default params including theme.
	*
	* @method open
	* @param {Object} options The colorbox params.
	*/
	colorbox.open = function(options) {
		_open(options);
	};


	/**
	* Calls $.colorbox() with as content a rendered jsrender tmpl.
	*
	* @method tmpl
	* @param {JSRenderTemplate} tmpl The cached JSRender template.
	* @param {Object} [data] The JSRender template data.
	* @param {Object} [options] The colorbox params.
	*/
	colorbox.tmpl = function(tmpl, data, options) {
		options = (!!options) ? options : {};
		$.extend(options, { html:tmpl.render(data) });
		colorbox.open(options);
	};


	/**
	* Calls $.colorbox() with an inline content.
	*
	* @method inline
	* @param {String} selector The content selector.
	* @param {Object} [options] The colorbox params.
	*/
	colorbox.inline = function(selector, options) {
		options = (!!options) ? options : {};
		$.extend(options, { inline:true, href:selector });
		colorbox.open(options);
	};


	/**
	* Calls $.colorbox() with an ajax content.
	*
	* @method ajax
	* @param {String} url The content url.
	* @param {Object} [options] The colorbox params.
	*/
	colorbox.ajax = function(url, options) {
		options = (!!options) ? options : {};
		$.extend(options, { href:url });
		colorbox.open(options);
	};


	/**
	* Opens a message window with custom buttons.
	*
	* @method dialog
	* @param {String} content Message
	* @param {Array(Object)} [commands] The buttons
	*	@param {String} commands.label The button label
	*	@param {Function} [commands.callback] The callback called on button click, closes the colorbox if not specified
	*/
	colorbox.dialog = function( content, commands  ) {

		var html = '<div id="kafecolorbox-dialog">' + content;

		if (commands === undefined || commands.length === 0) {
			commands = [{ label:'OK', callback:function(){ $.colorbox.close(); } }];
		}
		html += '<div class="Commands" style="white-space:nowrap;">';
		$.each(commands, function(i, btn){
			html += '<a href="#" class="Btn">' + btn.label + '</a>';
		});
		html += '</div></div>';

		content = $(html);
		$.each(commands, function(i, btn){
			content.find('.Btn:eq(' + i + ')').on('click', function(e) {
				e.preventDefault();
				if (typeof btn.callback === 'function') {
					btn.callback();
				} else {
					$.colorbox.close();
				}
			});
		});

		colorbox.open({html:content});
	};


	/**
	* Simulate a confirm() behavior on a &lt;a&gt; link, using colorbox.dialog().
	*
	* @method confirm
	* @param {String|jQueryObject|DOMElement} selector Link
	* @param {String} message Message
	* @param {String} OKLabel The label for the OK button
	* @param {String} CancelLabel The label for the Cancel button
	*/
	colorbox.confirm = function( selector, message, OKLabel, CancelLabel ) {
		$(function(){
			$(selector).on('click', function(e) {
				e.preventDefault();
				colorbox.dialog( message, [
					{ label:OKLabel , callback: function() {
						eval($(this).attr('href'));
						$.colorbox.close();
					}},
					{ label:CancelLabel }
				]);
			});
		});
	};


	// Add as jQuery plugin
	kafe.fn.plugIntojQuery('Colorbox', {

		/**
		* Binds $(selector).colorbox() with the default params including theme.
		*
		* @method $.kafeColorbox('init')
		* @param {Object} [options] The colorbox params.
		* @example
		*	$('.picture').kafeColorbox('init', { theme:'Alternate' })
		*/
		'init': function(obj, parameters) {
			return _open(parameters[0], obj);
		}
	});

	return colorbox;

})(window.kafe)});

/*!
 * jquery.customSelect() - v0.4.1
 * http://adam.co/lab/jquery/customselect/
 * 2013-05-13
 *
 * Copyright 2013 Adam Coulombe
 * @license http://www.opensource.org/licenses/mit-license.html MIT License
 * @license http://www.gnu.org/licenses/gpl.html GPL2 License
 */
(function(a){a.fn.extend({customSelect:function(c){if(typeof document.body.style.maxHeight==="undefined"){return this}var e={customClass:"customSelect",mapClass:true,mapStyle:true},c=a.extend(e,c),d=c.customClass,f=function(h,k){var g=h.find(":selected"),j=k.children(":first"),i=g.html()||"&nbsp;";j.html(i);if(g.attr("disabled")){k.addClass(b("DisabledOption"))}else{k.removeClass(b("DisabledOption"))}setTimeout(function(){k.removeClass(b("Open"));a(document).off("mouseup."+b("Open"))},60)},b=function(g){return d+g};return this.each(function(){var g=a(this),i=a("<span />").addClass(b("Inner")),h=a("<span />");g.after(h.append(i));h.addClass(d);if(c.mapClass){h.addClass(g.attr("class"))}if(c.mapStyle){h.attr("style",g.attr("style"))}g.addClass("hasCustomSelect").on("update",function(){f(g,h);var k=parseInt(g.outerWidth(),10)-(parseInt(h.outerWidth(),10)-parseInt(h.width(),10));h.css({display:"inline-block"});var j=h.outerHeight();if(g.attr("disabled")){h.addClass(b("Disabled"))}else{h.removeClass(b("Disabled"))}i.css({width:k,display:"inline-block"});g.css({"-webkit-appearance":"menulist-button",width:h.outerWidth(),position:"absolute",opacity:0,height:j,fontSize:h.css("font-size")})}).on("change",function(){h.addClass(b("Changed"));f(g,h)}).on("keyup",function(j){if(!h.hasClass(b("Open"))){g.blur();g.focus()}else{if(j.which==13||j.which==27){f(g,h)}}}).on("mousedown",function(j){h.removeClass(b("Changed"))}).on("mouseup",function(j){if(!h.hasClass(b("Open"))){if(a("."+b("Open")).not(h).length>0&&typeof InstallTrigger!=="undefined"){g.focus()}else{h.addClass(b("Open"));j.stopPropagation();a(document).one("mouseup."+b("Open"),function(k){if(k.target!=g.get(0)&&a.inArray(k.target,g.find("*").get())<0){g.blur()}else{f(g,h)}})}}}).focus(function(){h.removeClass(b("Changed")).addClass(b("Focus"))}).blur(function(){h.removeClass(b("Focus")+" "+b("Open"))}).hover(function(){h.addClass(b("Hover"))},function(){h.removeClass(b("Hover"))}).trigger("update")})}})})(jQuery);
/* Chosen v1.1.0 | (c) 2011-2013 by Harvest | MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md */
!function(){var a,AbstractChosen,Chosen,SelectParser,b,c={}.hasOwnProperty,d=function(a,b){function d(){this.constructor=a}for(var e in b)c.call(b,e)&&(a[e]=b[e]);return d.prototype=b.prototype,a.prototype=new d,a.__super__=b.prototype,a};SelectParser=function(){function SelectParser(){this.options_index=0,this.parsed=[]}return SelectParser.prototype.add_node=function(a){return"OPTGROUP"===a.nodeName.toUpperCase()?this.add_group(a):this.add_option(a)},SelectParser.prototype.add_group=function(a){var b,c,d,e,f,g;for(b=this.parsed.length,this.parsed.push({array_index:b,group:!0,label:this.escapeExpression(a.label),children:0,disabled:a.disabled}),f=a.childNodes,g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(this.add_option(c,b,a.disabled));return g},SelectParser.prototype.add_option=function(a,b,c){return"OPTION"===a.nodeName.toUpperCase()?(""!==a.text?(null!=b&&(this.parsed[b].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:a.value,text:a.text,html:a.innerHTML,selected:a.selected,disabled:c===!0?c:a.disabled,group_array_index:b,classes:a.className,style:a.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1):void 0},SelectParser.prototype.escapeExpression=function(a){var b,c;return null==a||a===!1?"":/[\&\<\>\"\'\`]/.test(a)?(b={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},c=/&(?!\w+;)|[\<\>\"\'\`]/g,a.replace(c,function(a){return b[a]||"&amp;"})):a},SelectParser}(),SelectParser.select_to_array=function(a){var b,c,d,e,f;for(c=new SelectParser,f=a.childNodes,d=0,e=f.length;e>d;d++)b=f[d],c.add_node(b);return c.parsed},AbstractChosen=function(){function AbstractChosen(a,b){this.form_field=a,this.options=null!=b?b:{},AbstractChosen.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers())}return AbstractChosen.prototype.set_default_values=function(){var a=this;return this.click_test_action=function(b){return a.test_active_click(b)},this.activate_action=function(b){return a.activate_field(b)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text?this.options.allow_single_deselect:!1,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null!=this.options.enable_split_word_search?this.options.enable_split_word_search:!0,this.group_search=null!=this.options.group_search?this.options.group_search:!0,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=null!=this.options.single_backstroke_delete?this.options.single_backstroke_delete:!0,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1,this.display_selected_options=null!=this.options.display_selected_options?this.options.display_selected_options:!0,this.display_disabled_options=null!=this.options.display_disabled_options?this.options.display_disabled_options:!0},AbstractChosen.prototype.set_default_text=function(){return this.default_text=this.form_field.getAttribute("data-placeholder")?this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.options.placeholder_text_multiple||this.options.placeholder_text||AbstractChosen.default_multiple_text:this.options.placeholder_text_single||this.options.placeholder_text||AbstractChosen.default_single_text,this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||AbstractChosen.default_no_result_text},AbstractChosen.prototype.mouse_enter=function(){return this.mouse_on_container=!0},AbstractChosen.prototype.mouse_leave=function(){return this.mouse_on_container=!1},AbstractChosen.prototype.input_focus=function(){var a=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return a.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},AbstractChosen.prototype.input_blur=function(){var a=this;return this.mouse_on_container?void 0:(this.active_field=!1,setTimeout(function(){return a.blur_test()},100))},AbstractChosen.prototype.results_option_build=function(a){var b,c,d,e,f;for(b="",f=this.results_data,d=0,e=f.length;e>d;d++)c=f[d],b+=c.group?this.result_add_group(c):this.result_add_option(c),(null!=a?a.first:void 0)&&(c.selected&&this.is_multiple?this.choice_build(c):c.selected&&!this.is_multiple&&this.single_set_selected_text(c.text));return b},AbstractChosen.prototype.result_add_option=function(a){var b,c;return a.search_match?this.include_option_in_results(a)?(b=[],a.disabled||a.selected&&this.is_multiple||b.push("active-result"),!a.disabled||a.selected&&this.is_multiple||b.push("disabled-result"),a.selected&&b.push("result-selected"),null!=a.group_array_index&&b.push("group-option"),""!==a.classes&&b.push(a.classes),c=document.createElement("li"),c.className=b.join(" "),c.style.cssText=a.style,c.setAttribute("data-option-array-index",a.array_index),c.innerHTML=a.search_text,this.outerHTML(c)):"":""},AbstractChosen.prototype.result_add_group=function(a){var b;return a.search_match||a.group_match?a.active_options>0?(b=document.createElement("li"),b.className="group-result",b.innerHTML=a.search_text,this.outerHTML(b)):"":""},AbstractChosen.prototype.results_update_field=function(){return this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.results_build(),this.results_showing?this.winnow_results():void 0},AbstractChosen.prototype.reset_single_select_options=function(){var a,b,c,d,e;for(d=this.results_data,e=[],b=0,c=d.length;c>b;b++)a=d[b],a.selected?e.push(a.selected=!1):e.push(void 0);return e},AbstractChosen.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},AbstractChosen.prototype.results_search=function(){return this.results_showing?this.winnow_results():this.results_show()},AbstractChosen.prototype.winnow_results=function(){var a,b,c,d,e,f,g,h,i,j,k,l,m;for(this.no_results_clear(),e=0,g=this.get_search_text(),a=g.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),d=this.search_contains?"":"^",c=new RegExp(d+a,"i"),j=new RegExp(a,"i"),m=this.results_data,k=0,l=m.length;l>k;k++)b=m[k],b.search_match=!1,f=null,this.include_option_in_results(b)&&(b.group&&(b.group_match=!1,b.active_options=0),null!=b.group_array_index&&this.results_data[b.group_array_index]&&(f=this.results_data[b.group_array_index],0===f.active_options&&f.search_match&&(e+=1),f.active_options+=1),(!b.group||this.group_search)&&(b.search_text=b.group?b.label:b.html,b.search_match=this.search_string_match(b.search_text,c),b.search_match&&!b.group&&(e+=1),b.search_match?(g.length&&(h=b.search_text.search(j),i=b.search_text.substr(0,h+g.length)+"</em>"+b.search_text.substr(h+g.length),b.search_text=i.substr(0,h)+"<em>"+i.substr(h)),null!=f&&(f.group_match=!0)):null!=b.group_array_index&&this.results_data[b.group_array_index].search_match&&(b.search_match=!0)));return this.result_clear_highlight(),1>e&&g.length?(this.update_results_content(""),this.no_results(g)):(this.update_results_content(this.results_option_build()),this.winnow_results_set_highlight())},AbstractChosen.prototype.search_string_match=function(a,b){var c,d,e,f;if(b.test(a))return!0;if(this.enable_split_word_search&&(a.indexOf(" ")>=0||0===a.indexOf("["))&&(d=a.replace(/\[|\]/g,"").split(" "),d.length))for(e=0,f=d.length;f>e;e++)if(c=d[e],b.test(c))return!0},AbstractChosen.prototype.choices_count=function(){var a,b,c,d;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,d=this.form_field.options,b=0,c=d.length;c>b;b++)a=d[b],a.selected&&(this.selected_option_count+=1);return this.selected_option_count},AbstractChosen.prototype.choices_click=function(a){return a.preventDefault(),this.results_showing||this.is_disabled?void 0:this.results_show()},AbstractChosen.prototype.keyup_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),b){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:if(a.preventDefault(),this.results_showing)return this.result_select(a);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},AbstractChosen.prototype.clipboard_event_checker=function(){var a=this;return setTimeout(function(){return a.results_search()},50)},AbstractChosen.prototype.container_width=function(){return null!=this.options.width?this.options.width:""+this.form_field.offsetWidth+"px"},AbstractChosen.prototype.include_option_in_results=function(a){return this.is_multiple&&!this.display_selected_options&&a.selected?!1:!this.display_disabled_options&&a.disabled?!1:a.empty?!1:!0},AbstractChosen.prototype.search_results_touchstart=function(a){return this.touch_started=!0,this.search_results_mouseover(a)},AbstractChosen.prototype.search_results_touchmove=function(a){return this.touch_started=!1,this.search_results_mouseout(a)},AbstractChosen.prototype.search_results_touchend=function(a){return this.touch_started?this.search_results_mouseup(a):void 0},AbstractChosen.prototype.outerHTML=function(a){var b;return a.outerHTML?a.outerHTML:(b=document.createElement("div"),b.appendChild(a),b.innerHTML)},AbstractChosen.browser_is_supported=function(){return"Microsoft Internet Explorer"===window.navigator.appName?document.documentMode>=8:/iP(od|hone)/i.test(window.navigator.userAgent)?!1:/Android/i.test(window.navigator.userAgent)&&/Mobile/i.test(window.navigator.userAgent)?!1:!0},AbstractChosen.default_multiple_text="Select Some Options",AbstractChosen.default_single_text="Select an Option",AbstractChosen.default_no_result_text="No results match",AbstractChosen}(),a=jQuery,a.fn.extend({chosen:function(b){return AbstractChosen.browser_is_supported()?this.each(function(){var c,d;c=a(this),d=c.data("chosen"),"destroy"===b&&d?d.destroy():d||c.data("chosen",new Chosen(this,b))}):this}}),Chosen=function(c){function Chosen(){return b=Chosen.__super__.constructor.apply(this,arguments)}return d(Chosen,c),Chosen.prototype.setup=function(){return this.form_field_jq=a(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex,this.is_rtl=this.form_field_jq.hasClass("chosen-rtl")},Chosen.prototype.set_up_html=function(){var b,c;return b=["chosen-container"],b.push("chosen-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&b.push(this.form_field.className),this.is_rtl&&b.push("chosen-rtl"),c={"class":b.join(" "),style:"width: "+this.container_width()+";",title:this.form_field.title},this.form_field.id.length&&(c.id=this.form_field.id.replace(/[^\w]/g,"_")+"_chosen"),this.container=a("<div />",c),this.is_multiple?this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>'):this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chosen-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chosen-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chosen-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chosen-search").first(),this.selected_item=this.container.find(".chosen-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior(),this.form_field_jq.trigger("chosen:ready",{chosen:this})},Chosen.prototype.register_observers=function(){var a=this;return this.container.bind("mousedown.chosen",function(b){a.container_mousedown(b)}),this.container.bind("mouseup.chosen",function(b){a.container_mouseup(b)}),this.container.bind("mouseenter.chosen",function(b){a.mouse_enter(b)}),this.container.bind("mouseleave.chosen",function(b){a.mouse_leave(b)}),this.search_results.bind("mouseup.chosen",function(b){a.search_results_mouseup(b)}),this.search_results.bind("mouseover.chosen",function(b){a.search_results_mouseover(b)}),this.search_results.bind("mouseout.chosen",function(b){a.search_results_mouseout(b)}),this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",function(b){a.search_results_mousewheel(b)}),this.search_results.bind("touchstart.chosen",function(b){a.search_results_touchstart(b)}),this.search_results.bind("touchmove.chosen",function(b){a.search_results_touchmove(b)}),this.search_results.bind("touchend.chosen",function(b){a.search_results_touchend(b)}),this.form_field_jq.bind("chosen:updated.chosen",function(b){a.results_update_field(b)}),this.form_field_jq.bind("chosen:activate.chosen",function(b){a.activate_field(b)}),this.form_field_jq.bind("chosen:open.chosen",function(b){a.container_mousedown(b)}),this.form_field_jq.bind("chosen:close.chosen",function(b){a.input_blur(b)}),this.search_field.bind("blur.chosen",function(b){a.input_blur(b)}),this.search_field.bind("keyup.chosen",function(b){a.keyup_checker(b)}),this.search_field.bind("keydown.chosen",function(b){a.keydown_checker(b)}),this.search_field.bind("focus.chosen",function(b){a.input_focus(b)}),this.search_field.bind("cut.chosen",function(b){a.clipboard_event_checker(b)}),this.search_field.bind("paste.chosen",function(b){a.clipboard_event_checker(b)}),this.is_multiple?this.search_choices.bind("click.chosen",function(b){a.choices_click(b)}):this.container.bind("click.chosen",function(a){a.preventDefault()})},Chosen.prototype.destroy=function(){return a(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.search_field[0].tabIndex&&(this.form_field_jq[0].tabIndex=this.search_field[0].tabIndex),this.container.remove(),this.form_field_jq.removeData("chosen"),this.form_field_jq.show()},Chosen.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field_jq[0].disabled,this.is_disabled?(this.container.addClass("chosen-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus.chosen",this.activate_action),this.close_field()):(this.container.removeClass("chosen-disabled"),this.search_field[0].disabled=!1,this.is_multiple?void 0:this.selected_item.bind("focus.chosen",this.activate_action))},Chosen.prototype.container_mousedown=function(b){return this.is_disabled||(b&&"mousedown"===b.type&&!this.results_showing&&b.preventDefault(),null!=b&&a(b.target).hasClass("search-choice-close"))?void 0:(this.active_field?this.is_multiple||!b||a(b.target)[0]!==this.selected_item[0]&&!a(b.target).parents("a.chosen-single").length||(b.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),a(this.container[0].ownerDocument).bind("click.chosen",this.click_test_action),this.results_show()),this.activate_field())},Chosen.prototype.container_mouseup=function(a){return"ABBR"!==a.target.nodeName||this.is_disabled?void 0:this.results_reset(a)},Chosen.prototype.search_results_mousewheel=function(a){var b;return a.originalEvent&&(b=-a.originalEvent.wheelDelta||a.originalEvent.detail),null!=b?(a.preventDefault(),"DOMMouseScroll"===a.type&&(b=40*b),this.search_results.scrollTop(b+this.search_results.scrollTop())):void 0},Chosen.prototype.blur_test=function(){return!this.active_field&&this.container.hasClass("chosen-container-active")?this.close_field():void 0},Chosen.prototype.close_field=function(){return a(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chosen-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},Chosen.prototype.activate_field=function(){return this.container.addClass("chosen-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},Chosen.prototype.test_active_click=function(b){var c;return c=a(b.target).closest(".chosen-container"),c.length&&this.container[0]===c[0]?this.active_field=!0:this.close_field()},Chosen.prototype.results_build=function(){return this.parsing=!0,this.selected_option_count=null,this.results_data=SelectParser.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.single_set_selected_text(),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chosen-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chosen-container-single-nosearch"))),this.update_results_content(this.results_option_build({first:!0})),this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.parsing=!1},Chosen.prototype.result_do_highlight=function(a){var b,c,d,e,f;if(a.length){if(this.result_clear_highlight(),this.result_highlight=a,this.result_highlight.addClass("highlighted"),d=parseInt(this.search_results.css("maxHeight"),10),f=this.search_results.scrollTop(),e=d+f,c=this.result_highlight.position().top+this.search_results.scrollTop(),b=c+this.result_highlight.outerHeight(),b>=e)return this.search_results.scrollTop(b-d>0?b-d:0);if(f>c)return this.search_results.scrollTop(c)}},Chosen.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},Chosen.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.container.addClass("chosen-with-drop"),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results(),this.form_field_jq.trigger("chosen:showing_dropdown",{chosen:this}))},Chosen.prototype.update_results_content=function(a){return this.search_results.html(a)},Chosen.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:hiding_dropdown",{chosen:this})),this.results_showing=!1},Chosen.prototype.set_tab_index=function(){var a;return this.form_field.tabIndex?(a=this.form_field.tabIndex,this.form_field.tabIndex=-1,this.search_field[0].tabIndex=a):void 0},Chosen.prototype.set_label_behavior=function(){var b=this;return this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=a("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0?this.form_field_label.bind("click.chosen",function(a){return b.is_multiple?b.container_mousedown(a):b.activate_field()}):void 0},Chosen.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},Chosen.prototype.search_results_mouseup=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c.length?(this.result_highlight=c,this.result_select(b),this.search_field.focus()):void 0},Chosen.prototype.search_results_mouseover=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c?this.result_do_highlight(c):void 0},Chosen.prototype.search_results_mouseout=function(b){return a(b.target).hasClass("active-result")?this.result_clear_highlight():void 0},Chosen.prototype.choice_build=function(b){var c,d,e=this;return c=a("<li />",{"class":"search-choice"}).html("<span>"+b.html+"</span>"),b.disabled?c.addClass("search-choice-disabled"):(d=a("<a />",{"class":"search-choice-close","data-option-array-index":b.array_index}),d.bind("click.chosen",function(a){return e.choice_destroy_link_click(a)}),c.append(d)),this.search_container.before(c)},Chosen.prototype.choice_destroy_link_click=function(b){return b.preventDefault(),b.stopPropagation(),this.is_disabled?void 0:this.choice_destroy(a(b.target))},Chosen.prototype.choice_destroy=function(a){return this.result_deselect(a[0].getAttribute("data-option-array-index"))?(this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.search_field.val().length<1&&this.results_hide(),a.parents("li").first().remove(),this.search_field_scale()):void 0},Chosen.prototype.results_reset=function(){return this.reset_single_select_options(),this.form_field.options[0].selected=!0,this.single_set_selected_text(),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change"),this.active_field?this.results_hide():void 0},Chosen.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},Chosen.prototype.result_select=function(a){var b,c;return this.result_highlight?(b=this.result_highlight,this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.is_multiple?b.removeClass("active-result"):this.reset_single_select_options(),c=this.results_data[b[0].getAttribute("data-option-array-index")],c.selected=!0,this.form_field.options[c.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(c):this.single_set_selected_text(c.text),(a.metaKey||a.ctrlKey)&&this.is_multiple||this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[c.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,this.search_field_scale())):void 0},Chosen.prototype.single_set_selected_text=function(a){return null==a&&(a=this.default_text),a===this.default_text?this.selected_item.addClass("chosen-default"):(this.single_deselect_control_build(),this.selected_item.removeClass("chosen-default")),this.selected_item.find("span").text(a)},Chosen.prototype.result_deselect=function(a){var b;return b=this.results_data[a],this.form_field.options[b.options_index].disabled?!1:(b.selected=!1,this.form_field.options[b.options_index].selected=!1,this.selected_option_count=null,this.result_clear_highlight(),this.results_showing&&this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[b.options_index].value}),this.search_field_scale(),!0)},Chosen.prototype.single_deselect_control_build=function(){return this.allow_single_deselect?(this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chosen-single-with-deselect")):void 0},Chosen.prototype.get_search_text=function(){return this.search_field.val()===this.default_text?"":a("<div/>").text(a.trim(this.search_field.val())).html()},Chosen.prototype.winnow_results_set_highlight=function(){var a,b;return b=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),a=b.length?b.first():this.search_results.find(".active-result").first(),null!=a?this.result_do_highlight(a):void 0},Chosen.prototype.no_results=function(b){var c;return c=a('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>'),c.find("span").first().html(b),this.search_results.append(c),this.form_field_jq.trigger("chosen:no_results",{chosen:this})},Chosen.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},Chosen.prototype.keydown_arrow=function(){var a;return this.results_showing&&this.result_highlight?(a=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(a):void 0:this.results_show()},Chosen.prototype.keyup_arrow=function(){var a;return this.results_showing||this.is_multiple?this.result_highlight?(a=this.result_highlight.prevAll("li.active-result"),a.length?this.result_do_highlight(a.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},Chosen.prototype.keydown_backstroke=function(){var a;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(a=this.search_container.siblings("li.search-choice").last(),a.length&&!a.hasClass("search-choice-disabled")?(this.pending_backstroke=a,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},Chosen.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},Chosen.prototype.keydown_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),8!==b&&this.pending_backstroke&&this.clear_backstroke(),b){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(a),this.mouse_on_container=!1;break;case 13:a.preventDefault();break;case 38:a.preventDefault(),this.keyup_arrow();break;case 40:a.preventDefault(),this.keydown_arrow()}},Chosen.prototype.search_field_scale=function(){var b,c,d,e,f,g,h,i,j;if(this.is_multiple){for(d=0,h=0,f="position:absolute; left: -1000px; top: -1000px; display:none;",g=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"],i=0,j=g.length;j>i;i++)e=g[i],f+=e+":"+this.search_field.css(e)+";";return b=a("<div />",{style:f}),b.text(this.search_field.val()),a("body").append(b),h=b.width()+25,b.remove(),c=this.container.outerWidth(),h>c-10&&(h=c-10),this.search_field.css({width:h+"px"})}},Chosen}(AbstractChosen)}.call(this);

// ------------------------------------------------------

/*------------------------------------------------------------------------------------//
// COMMON
//------------------------------------------------------------------------------------*/

(function compileTemplates() {
	window.nwayo_jshtml=window.nwayo_jshtml||{};
	nwayo_jshtml['confirm_dialog']=window.kafe.dependencies.jQuery.templates('<aside class="base-block confirm-dialog"><div class="header"><h2 class="title">{{:title}}</h2></div><div class="content"><div class="editable"><p>{{:message}}</p></div><div class="commands"><button class="base-button" data-action="confirm" data-l10n-id="ok">OK</button>&nbsp;&nbsp;<button class="base-button" data-action="cancel" data-l10n-id="cancel">Cancel</button></div></div></aside>');
	nwayo_jshtml['css_theme']=window.kafe.dependencies.jQuery.templates('/* base-color : {{:baseColor}} *//* light-base-color : {{:lightBaseColor}} *//* alt-color : {{:altColor}} *//* light-alt-color : {{:lightAltColor}} *//* lighter-alt-color : {{:lighterAltColor}} *//*-- vendor/chosen.less --*/.chosen-container .chosen-results li.highlighted { background-color:{{:lightBaseColor}}; }/*-- base-block.less --*/.base-block.themed { background-color:{{:lightAltColor}}; }.base-block.themed > .header { background-color:{{:altColor}}; }.base-block.themed > .header .title { color:#ffffff; }.base-block.themed > .content { background-color:{{:lighterAltColor}}; }/*-- base-platform-schema.less --*/.platform-schema .back .hub-nodes .hub-node .content.on { background-color:{{:altColor}}; }.platform-schema .front .nodes .node .content.on { background-color:{{:lightAltColor}}; }.platform-schema .front .psus .psu .content.on { background-color:{{:altColor}}; }/*-- base-listing.less --*/.base-grid caption { background-color:{{:altColor}}; border-color:{{:altColor}}; }.base-grid thead th, .base-grid thead th:first-child { background-color:{{:lightAltColor}}; border-bottom-color:{{:lightAltColor}}; }.base-grid thead th:first-child { border-left-color:{{:lightAltColor}}; }.base-grid thead th:last-child { border-right-color:{{:lightAltColor}}; }.base-grid tbody tr td { border-color:{{:lightAltColor}}; }.base-grid tbody tr td:first-child { border-left-color:{{:lighterAltColor}}; }.base-grid tbody tr td:last-child { border-right-color:{{:lighterAltColor}}; }.base-grid tfoot td, .base-grid tfoot td:first-child, .base-grid tfoot td:last-child { background-color:{{:lighterAltColor}}; border-color:{{:lighterAltColor}}; }/*-- base-form.less --*/.base-button.colored { background-color:{{:lightBaseColor}}; }.base-button.colored:hover, .base-button.colored:active { background-color:{{:baseColor}}; }.base-block.themed .base-button.link { color:{{:lightBaseColor}}; }.base-block.themed .base-button.link:hover, .base-block.themed .base-button.link:active { color:{{:baseColor}}; }.base-progress-bar span { background-color:{{:lightBaseColor}}; }/*-- core.less --*/a { color:{{:lightBaseColor}}; }a:hover { color:{{:baseColor}}; }.page-header { background-color:{{:baseColor}}; }.page-header .drawer-menu .handle.open { background-color:{{:lightBaseColor}}; }.page-header .drawer-menu .drawer { background-color:{{:lightBaseColor}}; }/*.page-header .drawer-menu .drawer ul li:before { color:{{:lightBaseColor}}; }*//*.page-header .drawer-menu .drawer ul li a { color:{{:lightAltColor}}; }*/.page-footer { background-color:{{:baseColor}}; }/*.page-footer .links li:before { color:{{:lightBaseColor}}; }*//*.page-footer .links li a { color:{{:lightAltColor}}; }*//*-- misc.less --*/.breadcrumb li { color:{{:lightBaseColor}}; }.breadcrumb li a { color:{{:lightBaseColor}}; }.breadcrumb li a:hover { color:{{:baseColor}}; }/*-- dashboard.less --*/.dashboard-shortcuts .content a:after { color:{{:lightBaseColor}}; }.dashboard-shortcuts .content a:hover:after { color:{{:baseColor}}; }.dashboard-tools .content a:before { color:{{:lightBaseColor}}; }.dashboard-tools .content a:hover:before { color:{{:baseColor}}; }/*-- monitor.less --*/.monitor-multi-tree .content .multi-tree .component > .header > .expand { color:{{:lightBaseColor}}; }.monitor-multi-tree .content .multi-tree .component.on > .header > .expand { color:{{:baseColor}}; }.monitor-multi-tree .content .multi-tree .component > .header:before { color:{{:lightBaseColor}}; }.monitor-component-subcomponents .component > .header:hover { background-color:{{:lightAltColor}}; }.monitor-component-fans .fan-speed-meter .meter-bg .center { fill:{{:lighterAltColor}}; }.monitor-component-fans .fan-speed-meter .meter-bg .middle { fill:{{:lightAltColor}}; }.monitor-component-fans .fan-speed-meter .meter-bg .edge { fill:{{:altColor}}; }/*-- upgrade.less --*/');
	nwayo_jshtml['platform_schema']=window.kafe.dependencies.jQuery.templates('<div class="platform-schema" data-behavior="platform-schema" data-platform="{{:~parentHash}}"><div class="back"><ul class="hub-nodes"><li class="hub-node" data-index-hubnode="10"><div class="content navigation"></li><li class="hub-node" data-index-hubnode="11"><div class="content navigation"></li></ul></div><div class="front"><ul class="deco"><li><div class="content">&nbsp;</div></li><li><div class="content">&nbsp;</div></li></ul><ul class="nodes"><li class="node" data-index-node="1"><div class="content navigation"></div></li><li class="node" data-index-node="2"><div class="content navigation"></div></li><li class="node" data-index-node="3"><div class="content navigation"></div></li><li class="node" data-index-node="4"><div class="content navigation"></div></li><li class="node" data-index-node="5"><div class="content navigation"></div></li><li class="node" data-index-node="6"><div class="content navigation"></div></li><li class="node" data-index-node="7"><div class="content navigation"></div></li><li class="node" data-index-node="8"><div class="content navigation"></div></li><li class="node" data-index-node="9"><div class="content navigation"></div></li></ul><ul class="psus"><li class="psu" data-index-psu="2"><div class="content navigation"></li><li class="psu" data-index-psu="1"><div class="content navigation"></li></ul></div></div>');
	nwayo_jshtml['version_dialog']=window.kafe.dependencies.jQuery.templates('<aside class="base-block version-dialog" data-behavior="version-dialog"><div class="header"><h2 class="title" data-l10n-id="system_monitor_version_information">Version Information</h2></div><div class="content"><div class="editable"><p><strong>System Monitor :</strong> {{:SystemMonitor}}</p><p><strong>System Manager :</strong> {{:SystemManager}}</p><p><strong>Current API :</strong> {{:Version}}</p><p><strong>Supported APIs : </strong>{{for SupportedAPIs ~RequestLen=SupportedAPIs.length}}<span>{{:#data}}{{if ~RequestLen > 1 && (#index + 1) != ~RequestLen}}<span>, </span>{{/if}}</span>{{/for}}</p></div></div></aside>');
	nwayo_jshtml['dashboard_multi_platform']=window.kafe.dependencies.jQuery.templates('<ul>{{for components}}<li><a href="monitor.html#!/{{:id}}"><span class="health-icon {{:status.health}}"></span>{{:description.name}}</a></li>{{/for}}</ul>');
	nwayo_jshtml['monitor_component_subcomponent']=window.kafe.dependencies.jQuery.templates('<li class="component" data-component-id="{{:~hashToId(~parentHash)}}-{{:id}}"><a class="header type-{{:type}}" href="monitor.html#!{{:~parentHash}}/{{:id}}">{{if status.health}}<span class="health-icon {{:status.health}}"></span>{{/if}}<span class="name">{{:description.name}}</span>{{for routing.networkInterfaces[0]}}<span class="ip">{{toIp:ip}}</span>{{/for}}</a></li>');
	nwayo_jshtml['monitor_component_view']=window.kafe.dependencies.jQuery.templates('<nav class="monitor-component-tools" data-behavior="drawer-menu"><div class="handle" title="Tools" data-action="open" data-l10n-id="tools">Tools</div><div class="drawer"><ul><li class="debug"><a href="{{:context.API_URL}}/v2/Platform/{{:context.description.number}}/SystemInformation.txt" data-l10n-id="platform_system_information">Platform System Information</a></li><li class="debug"><a href="{{:context.API_URL}}/v2/Platform/{{:context.description.number}}/Logs" data-l10n-id="log_files_bundle">Log Files Bundle</a></li>{{if component.type=="platform"}}<li class="upgrade"><a href="oneclick-upgrade.html?platform={{:context.description.number}} data-l10n-id="upgrade_software"">Upgrade Software</a></li>{{else component.type=="node" || component.type=="hubnode" || component.type=="nodeLB"}}<li class="upgrade"><a href="oneclick-upgrade.html?platform={{:context.description.number}}&component={{:component.id}}&model={{:component.description.model}} data-l10n-id="upgrade_software"">Upgrade Software</a></li>{{else component.parent.type == "node" || component.parent.type=="hubnode" || component.parent.type=="nodeLB"}}<li class="upgrade"><a href="oneclick-upgrade.html?platform={{:context.description.number}}&component={{:component.parent.id}}&model={{:component.parent.model}} data-l10n-id="upgrade_software"">Upgrade Software</a></li>{{/if}}<!-- <li class="configure"><a href="#">Configure</a></li> --><!-- <li class="debug"><a href="#">Download Debug Log</a></li> --><!-- <li class="command"><a href="#">Command Line Interface</a></li> --></ul></div></nav>{{include tmpl=~platformSchema ~contentView=~contentView ~parentHash=context.id ~model=context.components /}}<div class="base-block themed monitor-component-general" data-behavior="component-general"><div class="header"><h2 class="title" data-l10n-id="general_information">General Information</h2></div><div class="content"><div class="base-attributes"><div class="attribute"><div class="name" data-l10n-id="name">Name:</div><div class="value">{{:component.description.name}}</div></div>{{if component.type=="platform"}}<div class="attribute"><div class="name" data-l10n-id="platform_num">Platform Number:</div><div class="value">{{:component.description.number}}</div></div>{{/if}}{{if component.description.model}}<div class="attribute"><div class="name" data-l10n-id="api_node_num">API Node number:</div><div class="value"><span class="api_number">{{:component.description.number}}</span></div></div><div class="attribute"><div class="name" data-l10n-id="model">Model:</div><div class="value"><span class="model">{{:component.description.model}}</span></div></div>{{/if}}{{if component.status.hotswap}}<div class="attribute"><div class="name" data-l10n-id="board_status">Board Status:</div><div class="value"><span class="hotswap">{{:component.status.hotswap.text}}, {{:component.status.hotswap.state}}</span></div></div>{{/if}}{{if component.routing}}{{if component.routing.managementIp}}<div class="attribute"><div class="name" data-l10n-id="management">Management&nbsp;IP:</div><div class="value"><span class="ip">{{:component.routing.managementIp}}</span></div></div>{{/if}}{{/if}}{{if component.status.health}}<div class="attribute"><div class="name" data-l10n-id="health">Health:</div><div class="value"><span class="health-icon {{:component.status.health}}"></span></div></div>{{/if}}{{if component.status.global}}<div class="attribute"><div class="name" data-l10n-id="ha_status">HA Status:</div><div class="value"><span class="ha_status">{{:component.status.global}}</span></div></div>{{/if}}</div></div></div>{{if component.description.fru}}<div class="base-block themed monitor-component-fru" data-behavior="fru-information"><div class="header"><h2 class="title" data-l10n-id="board_information">Board Information</h2></div><div class="content"><div class="base-attributes">{{props component.description.fru}}<div class="attribute"><div class="name">{{>key}}:</div><div class="value {{>key}}">{{>prop}}</div></div>{{/props}}</div></div></div>{{/if}}{{if component.fans}}<div class="base-block themed monitor-component-fans"><div class="header"><h2 class="title" data-l10n-id="fan_speeds">Fan Speeds</h2></div><div class="content">{{for component.fans tmpl=~fanSpeed /}}</div></div>{{/if}}{{if component.type=="platform" && component.hubModel && component.hubModel == "MSH8900" }}<div class="base-block themed monitor-component-switch-speed" data-behavior="switch-speed"><div class="header"><h2 class="title" data-l10n-id="switch_speed">Switch Speed</h2><div class="name" data-l10n-id="switch_speed_modification_warning">Upon modifying these settings, you must power cycle the chassis</div></div><div class="content base-form" data-behavior="base-form"><div class="field"><label><strong data-l10n-id="slot_7_speed">Slot 7 Speed :</strong></label><input type="radio" id="slot-7-speed-1" name="slot-7" value="1" /><label for="slot-7-speed-1">1 Gb/s</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type="radio" id="slot-7-speed-10" name="slot-7" value="10" /><label for="slot-7-speed-10">10 Gb/s</label></div><div class="field"><label><strong data-l10n-id="slot_9_speed">Slot 9 Speed :</strong></label><input type="radio" id="slot-9-speed-1" name="slot-9" value="1" /><label for="slot-9-speed-1">1 Gb/s</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type="radio" id="slot-9-speed-10" name="slot-9" value="10" /><label for="slot-9-speed-10">10 Gb/s</label></div><div><button class="base-button" data-command="save" data-platform="{{:component.description.number}}" data-l10n-id="save_changes">Save changes</button></div></div></div>{{/if}}{{if component.type=="platform" && component.hubModel && (component.hubModel == "MSH8910" || component.hubModel == "MSH8911") }}<div class="base-block themed monitor-component-fabric-port-mode-config" data-behavior="fabric-default-port-mode"><div class="header"><h2 class="title">Fabric Port Mode Configuration</h2><div style="display: flex;"><div class="name" style="min-width:180px;">Current Fabric Port Mode:</div><div class="name">This indicates the currently configured mode in the switch. This may be different from the "Default Fabric Port Mode" since System Monitor prepares the switch based on installed nodes at power up.</div></div><div style="display: flex;"><div class="name" style="min-width:180px;">Default Fabric Port Mode:</div><div class="name">Port mode to be configured at system power-up for empty slots. This is to pre-configure the switch for nodes that will get installed in a running system. Some node models are compatible with multiple configuration options. Switch Factory Default mode is model dependant:<br>MSH8910: Single Port / Quad Lane<br>MSH8911: Dual Port</div></div><div class="name">NOTE: A switch reset is required for default mode changes to take effect.</div></div><div class="content base-form" data-behavior="base-form"><div class="field"><label><strong>Slot 1</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_1" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_1"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 2</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_2" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_2"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 3</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_3" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_3"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 4</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_4" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_4"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 5</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_5" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_5"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 6</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_6" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_6"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 7</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_7" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_7"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 8</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_8" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_8"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div class="field"><label><strong>Slot 9</strong></label><div class="base-attributes"><div class="attribute"><div class="name">Current Fabric Port Mode:</div><input type="text" class="base-select"  style="width:425px;" data-behavior="fabric_port_mode_current_slot_9" value="Dual Port Mode" readonly></div><div class="attribute"><div class="name">Default Fabric Port Mode:</div><select class="base-select" style="width:425px;" data-behavior="fabric_port_mode_default_slot_9"><option value="0">Dual Port Mode (MSP802x, MSP804x, MSP805x)</option><option value="2">Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)</option><option value="3">Single Port / Single Lane (MSP802x, MSP804x)</option><option value="255">Switch Factory Default</option></select></div></div></div><div><button class="base-button" data-command="save" data-platform="{{:component.description.number}}">Save changes</button></div><div class="message" data-context="monitor-component-fabric-port-mode-config"></div></div></div>{{/if}}{{if component.versions}}<div class="base-block themed monitor-component-hpm"><div class="header"><h2 class="title" data-l10n-id="software_versions">Software Versions</h2></div><div class="content"><div class="base-attributes">{{for component.versions}}<div class="attribute"><div class="name">{{:name}}:</div><div class="value">{{:major}}.{{:minor}}.{{:revision}}</div></div>{{else}}<em data-l10n-id="no_version_information">No version information available.</em>{{/for}}</div><!-- <a href="#" class="base-button arrow-right">Upgrade Software</a> --></div></div>{{/if}}{{if component.type!="platform" && component.type!="psu-group" && component.components}}<div class="base-block themed monitor-component-subcomponents"><div class="header">{{if component.type=="node"}}<h2 class="title" data-l10n-id="servers">Servers</h2>{{else}}<h2 class="title" data-l10n-id="switch">Switch</h2>{{/if}}</div><div class="content"><ul>{{for component.components tmpl=~subComponent ~parentHash=~getHashPath() /}}</ul></div></div>{{/if}}{{if component.routing && component.routing.networkInterfaces}}{{if component.parent.model == "MSP8020"}}<div class="base-block themed monitor-component-kvmpassword"><div class="header"><h2 class="title" data-l10n-id="remote_access_password">KVM password</h2></div><div class="message" data-context="network-saved-message"></div><div class="content"><div class="name" data-l10n-id="password_requirements">Password must be 8 characters long, contain at least 1 upper case and 1 lower case letter, at least 1 number and 1 symbol</div><input type="text" value="" class="monitor-kvmpassword" /><div class="btn-save-kvm-password-div"><button class="base-button btn-save-kvmpassword" data-behavior="save-kvmpassword" data-platform="{{:context.description.number}}" data-l10n-id="save">Save</button></div></div></div>{{/if}}<div class="base-block themed grid monitor-component-ip"><div class="header">{{if component.parent.model == "MSP8020" || component.parent.model == "MSP8000" || component.parent.model == "MSP8001" }}<h2 class="title" data-l10n-id="network_interfaces_mac">Network Interfaces MAC : {{:component.routing.networkInterfaces[0].mac}}</h2>{{else}}<h2 class="title" data-l10n-id="network_interfaces">Network Interfaces</h2>{{/if}}</div><div class="message" data-context="network-saved-message"></div><div><table class="base-grid"><thead>{{if component.type == "switch"}}<tr><th>IP</th></tr>{{else}}<tr><th data-l10n-id="source">Source</th><th>IP</th><th data-l10n-id="netmask">Netmask</th><th data-l10n-id="gateway">Gateway</th></tr>{{/if}}</thead><tbody>{{if component.type == "switch" }}{{for component.routing.networkInterfaces[0]}}<tr><td><input type="hidden" value="{{:ipSource}}" class="monitor-server-source" /><input type="text" value="{{toIp:ip}}" class="monitor-server-ip" /><input type="hidden" value="{{:netmask}}" class="monitor-server-netmask" /><input type="hidden" value="{{toIp:gateway}}" class="monitor-server-gateway"/></td></tr>{{/for}}{{else component.type == "server" }}{{for component.routing.networkInterfaces[0]}}<tr><td><input type="hidden" value="{{:id}}" class="monitor-server-nicid" /><select class="base-select with-search monitor-server-source" data-action="change-network-source" style="width:100px;" name="graph-data" ><option value="static" {{if ipSource == "static"}}selected{{/if}} data-l10n-id="static">Static</option><option value="dhcp" {{if ipSource == "dhcp"}}selected{{/if}} >DHCP</option></select></td><td><input type="text" value="{{toIp:ip}}" class="monitor-server-ip"/></td><td><input type="text" value="{{:netmask}}" class="monitor-server-netmask"/></td><td><input type="text" value="{{toIp:gateway}}" class="monitor-server-gateway"/></td></tr>{{/for}}{{else}}{{for component.routing.networkInterfaces[0]}}<tr><td>{{:ipSource}}<br/></td><td>{{toIp:ip}}<br/></td><td>{{:netmask}}<br/></td><td>{{toIp:gateway}}<br/></td></tr>{{/for}}{{/if}}</tbody></table></div><div class="btn-save-provision-network-div">{{if component.type == \'server\' }}<button class="base-button btn-save-network" data-behavior="save-network" data-platform="{{:context.description.number}}" data-server="{{:component.description.number}}" data-l10n-id="save">Save</button>{{if component.parent.model == \'MSP8020\'}}<button class="base-button btn-provision" data-behavior="provision" data-platform="{{:context.description.number}}" data-node="{{:component.parent.number}}" data-server="{{:component.description.number }}" data-l10n-id="provision">Provision</button>{{else}}{{for component.routing.networkInterfaces[0]}}<button class="base-button btn-config-page" data-behavior="config-page" data-ip="{{toIp:ip}}" data-l10n-id="config_page">Configuration Page</button>{{/for}}{{/if}}{{else component.type == "switch" }}<button class="base-button btn-save-network" data-behavior="save-network" data-platform="{{:context.description.number}}" data-server="{{:component.description.number}}" data-l10n-id="save">Save</button>{{for component.routing.networkInterfaces[0]}}<button class="base-button btn-config-page" data-behavior="config-page" data-ip="{{toIp:ip}}" data-l10n-id="config_page">Configuration Page</button>{{/for}}{{/if}}</div></div>{{/if}}{{if component.routing && component.routing.networkInterfaces && (component.parent.model == \'MSP8000\' || component.parent.model == \'MSP8001\'|| component.parent.model == "MSP803x" || component.parent.model == "MSP804x") }}<div class="base-block themed grid monitor-component-ip"><div class="header"><h2 class="title" data-l10n-id="remote_access">Remote Access</h2></div><div class="content"><div class="btn-remote-access-div"></div></div></div>{{/if}}{{if component.type=="psu-group"}}<aside class="base-block themed power-consumption-graph"><div class="header"><h2 class="title" data-l10n-id="power_consumption_graph">Power Consumption Graph / <em data-l10n-id="last_hour">Last hour</em></h2></div><div class="content"><div id="power-consumption-graph" data-behavior="platform-power-consumption-graph"></div><div class="legend" data-behavior="platform-power-consumption-graph-legend"></div><!-- <a href="#" class="base-button link arrow-right">View details power consumption</a> --></div></aside><div class="base-columns two" data-behavior="psu-table">{{for component.components}}<div class="col"><div class="base-block themed monitor-component-consumption"><div class="header"><h2 class="title">{{:description.name}}</h2></div><table class="base-grid {{:id}}"><tbody><tr class="odd"><td class="snug nowrap" data-l10n-id="inlet_temp">Inlet Temperature:</td><td><span class="inlet">{{:consumption.inletTemperature}}</span> &deg;C</td></tr><tr class="even"><td class="snug nowrap" data-l10n-id="outlet_temp">Outlet Temperature:</td><td><span class="outlet">{{:consumption.outletTemperature}}</span> &deg;C</td></tr><tr class="odd"><td class="snug nowrap" data-l10n-id="input_voltage">Input Voltage:</td><td data-l10n-id="volts"><span class="input">{{:consumption.inputVoltage}}</span> Volts</td></tr><tr class="even"><td class="snug nowrap" data-l10n-id="power_out">Power Out:</td><td data-l10n-id="watts"><span class="power">{{:consumption.powerOut}}</span> Watts</td></tr><tr class="odd"><td class="snug nowrap" data-l10n-id="peak_consumption">Peak Consumption:</td><td data-l10n-id="watts"><span class="peak">{{:consumption.peak}}</span> Watts</td></tr><tr class="even"><td class="snug nowrap" data-l10n-id="average_consumption">Average Consumption:</td><td data-l10n-id="watts"><span class="average">{{:consumption.average}}</span> Watts</td></tr></tbody></table></div></div>{{/for}}</div><div class="base-block themed monitor-component-power-commands"><div class="header"><h2 class="title" data-l10n-id="reset_peak_and_average_values">Reset peak and average values</h2></div><div class="content"><button class="base-button" data-behavior="reset-peak" data-command="reset-peak" data-platform="{{:context.description.number}}" data-l10n-id="reset_peak_and_average">Reset Peak/Average</button></div></div>{{/if}}{{if component.type=="node" || component.type=="nodeLB" || component.type == "server" || component.type == "switch"}}<div class="base-block themed monitor-component-power-commands"><div class="header"><h2 class="title" data-l10n-id="power_commands">Power Commands</h2></div><div class="content">{{if component.type == "server"}}<button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.parent.number}}" data-command="activate" data-payload="{{:component.description.number}}" data-type="server" data-l10n-id="activate">Activate</button>&nbsp;<button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.parent.number}}" data-command="deactivate" data-payload="{{:component.description.number}}" data-type="server" data-l10n-id="deactivate">Deactivate</button>&nbsp;<button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.parent.number}}" data-command="reset" data-payload="{{:component.description.number}}" data-type="server" data-l10n-id="reset">Reset</button>&nbsp;{{else component.type == "switch"}}<button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.parent.number}}" data-command="reset" data-payload="{{:component.description.number}}" data-type="switch" data-l10n-id="reset">Reset</button>&nbsp;{{else}}<div class="name" data-l10n-id="command_baseboard">Command will be executed on baseboard and all servers it contains</div></br><button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.description.number}}" data-command="activate" data-payload="" data-l10n-id="activate">Activate</button>&nbsp;<button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.description.number}}" data-command="deactivate" data-payload="" data-l10n-id="deactivate">Deactivate</button>&nbsp;<button class="base-button" data-behavior="power-command" data-platform="{{:context.description.number}}" data-node="{{:component.description.number}}" data-command="reset" data-payload="" data-l10n-id="reset">Reset</button>&nbsp;{{/if}}</div></div>{{/if}}');
	nwayo_jshtml['monitor_fan_speed']=window.kafe.dependencies.jQuery.templates('<div class="fan-speed-meter" data-behavior="fan-speed"><svg version="1.1" class="meter-bg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="112px" height="56px" viewBox="-40 -12 112 56" enable-background="new -40 -12 112 56" xml:space="preserve"><path class="center" d="M16,30.6c-7.4,0-13.5,6-13.5,13.5h27C29.5,36.6,23.5,30.6,16,30.6z"/><path class="middle" d="M16,30.6c7.4,0,13.4,6,13.4,13.4h33.7C62.9,17.9,41.8-3.1,16-3.1C-9.9-3.1-30.9,17.9-31.1,44H2.6C2.6,36.6,8.6,30.6,16,30.6z"/><path class="edge" d="M67.7,23.1l-4.2,2.2c-0.9,0.5-2.1,0.1-2.5-0.8c-0.4-0.9-0.1-2.1,0.8-2.5l4.3-2.2c-3.9-7.9-9.4-14.7-16.3-20L47.6,3C47,3.9,45.8,4.1,45,3.5c-0.9-0.6-1.1-1.8-0.5-2.6l2.4-3.4C38.5-8.2,28-11.6,18-12v3.9c0,1-1,1.8-2,1.8s-2-0.8-2-1.8V-12C4-11.6-6.3-8.4-14.6-2.8l2.1,3.1c0.6,0.9,0.4,2-0.5,2.6c-0.9,0.6-2,0.4-2.6-0.5l-2.1-3.1C-24.5,4.5-30.1,11.3-34,19l4.2,2.1c0.9,0.5,1.3,1.6,0.8,2.5c-0.5,0.9-1.6,1.3-2.5,0.8l-4.1-2.1c-2.8,6.7-4.3,14.6-4.4,21.7h9C-30.8,17.9-9.8-3.1,16-3.1c25.8,0,46.8,21.1,47,47.1h9C71.9,36.9,70.4,29.6,67.7,23.1z"/></svg><div class="meter"><div class="needle"><div class="tip"></div></div></div><div class="name">{{:name}}</div><div class="speed" data-l10n-id="rounds_per_min"><span>{{:rpm}}</span> RPM</div></div>');
	nwayo_jshtml['monitor_multi_view']=window.kafe.dependencies.jQuery.templates('{{for components}}<article class="monitor-platform-view" data-platform-view="{{:id}}"><h2 class="base-subtitle" data-behavior="platform-header"><a href="monitor.html#!/{{:id}}">{{:description.name}}</a> <span class="health-icon {{:status.health}}"></span></h2>{{include tmpl=~platformSchema ~contentView=~contentView ~parentHash=id ~model=components /}}</article>{{/for}}');
	nwayo_jshtml['monitor_multi_view_component_content']=window.kafe.dependencies.jQuery.templates('<a class="content navigation {{:~getSelectedComponentClass(~model.id)}}" href="monitor.html#!/{{:~parentHash}}/{{if ~model.type == \'psu\'}}psu-group{{else}}{{:~model.id}}{{/if}}" data-component-id="{{:~model.id}}">{{if ~model.status.health && ~model.status.health != "green"}}<span class="health-icon {{:~model.status.health}}"></span>{{else}}<span class="health-icon "></span>{{/if}}<span class="name">{{:~model.description.name}}{{if !(~model.type == \'psu\')}}</span><span class="model"> : {{:~model.description.model}}</span>{{/if}}</a>');
	nwayo_jshtml['multi_tree_branch']=window.kafe.dependencies.jQuery.templates('{{if ~parentHash}}<li class="component {{if !components}}leaf{{/if}}" data-component-id="{{:~hashToId(~parentHash)}}-{{:id}}" data-id="{{:id}}" data-type="{{:type}}" data-model="{{:description.model}}">{{else}}<li class="component {{if !components}}leaf{{/if}}" data-component-id="{{:id}}" data-type="{{:type}}" data-id="{{:id}}" data-model="{{:description.model}}">{{/if}}<div class="header type-{{:type}}" data-action="expand">{{if components && type!="psu-group"}}<span class="expand"></span>{{/if}}<span class="health-icon {{:status.health}}"></span>{{if ~parentHash}}<a href="monitor.html#!{{:~parentHash}}/{{:id}}" class="name" data-action="select">{{:description.name}}</a>{{if type == "node" || type == "hubnode"}}<span class="model">{{:description.model}}</span>{{/if}}{{else}}<a href="monitor.html#!/{{:id}}" class="name" data-action="select">{{:description.name}}</a>{{/if}}{{if routing}}{{if routing.managementIp}}<span class="ip">{{:routing.managementIp}}</span>{{/if}}{{if routing.networkInterfaces}}<span class="ip">{{toIp:routing.networkInterfaces[0].ip}}</span>{{/if}}{{/if}}</div>{{if components && type!="psu-group"}}{{if ~parentHash ~componentHash=~parentHash+"/"+id}}<ul class="components">{{for components tmpl=~subComponents ~parentHash=~componentHash /}}</ul>{{else ~componentHash="/"+id}}<ul class="components">{{for components tmpl=~subComponents ~parentHash=~componentHash /}}</ul>{{/if}}{{/if}}</li>');
	nwayo_jshtml['provision_dialog']=window.kafe.dependencies.jQuery.templates('<aside class="base-block provision-dialog" data-behavior="provision-dialog"><div class="header"><h2 class="title" data-l10n-id="network_provisioning">Network Provisioning</h2></div><div class="content"><div><p data-l10n-id="provisioning_description">Configuration will be applied to the server and it will be rebooted.</p><p data-l10n-id="provisioning_time">This provisioning process will require 3-5 minutes before KVM activation.</p><br/><p data-l10n-id="are_you_sure">Are you sure?</p></div><div class="btn-provision-proceed-cancel"><button class="base-button btn-provision-proceed" data-behavior="provision-proceed" data-platform="{{:platform}}" data-node="{{:node}}" data-server="{{:server}}" data-l10n-id="ok">OK</button><button class="base-button btn-provision-cancel" data-behavior="provision-cancel data-l10n-id="cancel"">Cancel</button></div></div></aside>');
	nwayo_jshtml['network_configuration_ipmi_over_lan_row']=window.kafe.dependencies.jQuery.templates('<tr class="nowrap" data-platform="{{:~currentPlatform}}" data-node="{{:~currentNode}}" >{{if ~isRoot}}<td>Platform&nbsp;#{{:~currentPlatform}}</td>{{/if}}<td>{{:description.name}}</td><td><select class="base-select with-search switch-ipsource" data-context="ipmi-over-lan-ipsource" data-action="switch-ipsource"><option value="static" selected data-l10n-id="static">Static</option><option value="dhcp">DHCP</option><option value="other" disabled style="display: none;">Auto</option></select></td><td><input type="text" value="" class="ipmi-over-lan-ip" data-action="validateIP"/ ><label value="" class="ipmi-over-lan-ip" / ></td><td><input type="text" value="" class="ipmi-over-lan-netmask" data-action="validateIP"/><label value="" class="ipmi-over-lan-netmask" / ></td><td><input type="text" value="" class="ipmi-over-lan-gateway" data-action="validateIP"/><label value="" class="ipmi-over-lan-gateway" / ></td><td class="vlan-td"><input type="text" value="" class="ipmi-over-lan-vlan" data-action="validateVLAN"/><span class="status-icon"><span class="loader"/><span class="health-icon red" /></span></td></tr>');
	nwayo_jshtml['network_configuration_platforms_view']=window.kafe.dependencies.jQuery.templates('{{if components}}{{for components}}<li class="component leaf" data-component-id="{{:id}}" data-type="{{:type}}" data-id="{{:id}}" data-model="{{:description.model}}"><div class="header type-{{:type}}"><span class="health-icon {{:status.health}}"></span><a href="network-configuration.html#!/{{:id}}" class="name" data-action="select-platform">{{:description.name}}</a></div></li>{{/for}}{{else}}<span class="name" data-l10n-id="no_platforms_available">No platforms available</span>{{/if}}');
	nwayo_jshtml['network_configuration_shared_ip_row']=window.kafe.dependencies.jQuery.templates('<tr data-platform="{{:~currentPlatform}}" data-context="system-monitor" >{{if ~isRoot}}<td>Platform&nbsp;#{{:~currentPlatform}}</td>{{/if}}<!-- Not implemented yet<td><select class="base-select with-search source-select" data-action="change-network-source" ><option value="static" selected data-l10n-id="static">Static</option><option value="dhcp">DHCP</option></select></td>--><td><input type="text" value="" class="system-monitor-ip" data-action="validateSharedIP"></td><td><input type="text" value="" class="system-monitor-netmask" data-action="validateCIDR"/><div class="status-icon"><span class="loader"/><span class="health-icon red" /></div></td><!-- Not implemented yet<td><input type="text" value="" class="system-monitor-gateway" /></td><td><input type="text" value="" class="system-monitor-vlan" /></td>--></tr>');
	nwayo_jshtml['network_configuration_view']=window.kafe.dependencies.jQuery.templates('{{if isRoot}}<h2 class="base-subtitle" data-behavior="platform-header"><a href="network-configuration.html" data-l10n-id="all_platforms">All Platforms</a></h2>{{else}}<h2 class="base-subtitle" data-behavior="platform-header"><a href="network-configuration.html">Platform&nbsp;#{{:platform}}</a></h2>{{/if}}<div class="base-block themed"><div class="header"><h2 class="title platform-id" data-l10n-id="system_monitor_shared_ip">System Monitor Shared IP</h2></div><div class="message" data-behavior="system-monitor-update-message" id="sharedIPmessage"></div><div><table class="base-grid"><thead><tr>{{if isRoot}}<th data-l10n-id="platform">Platform</th>{{/if}}<!-- Not implemented yet<th data-l10n-id="source">Source</th>--><th>Base IP</th><th data-l10n-id="netmask">Netmask</th><!-- Not implemented yet<th data-l10n-id="gateway">Gateway</th><th>VLAN</th>--></tr></thead><tbody class="system-monitor-table">{{if isRoot}}{{for model.components ~isRoot=isRoot}}{{include tmpl=~sharedIpRow ~currentPlatform=description.number/}}{{/for}}{{else}}{{include tmpl=~sharedIpRow ~isRoot=isRoot ~currentPlatform=platform /}}{{/if}}</tbody></table><button class="base-button btn-save-network" data-action="save-system-monitor-ip" data-l10n-id="save">Save</button></div></div><div class="base-block themed grid ipmi-over-lan"><div class="header"><h2 class="title platform-id" data-l10n-id="ipmi_over_lan_config">IPMI Over Lan Configuration</h2></div><div class="message" id="networkMessage" data-behavior="ipmi-over-lan-update-message"></div><div><div class="field"><label><strong data-l10n-id="settings_for_all_nodes_and_hubs">Settings for all nodes and hubs: </strong></label>&nbsp;&nbsp;&nbsp;&nbsp;<input type="radio" value="manual" id="ipmi-over-lan-manual-radio" name="ipsource-radio" checked="checked" data-action="common-switch-ipsource"/><label for="ipmi-over-lan-manual-radio" data-l10n-id="manual">Manual</label>&nbsp;&nbsp;&nbsp;&nbsp;<input type="radio" value="dhcp" id="ipmi-over-lan-dhcp-radio" name="ipsource-radio" data-action="common-switch-ipsource"/><label for="ipmi-over-lan-dhcp-radio">DHCP</label></div><table class="base-grid ipmi-over-lan-table"><thead><tr>{{if isRoot}}<th data-l10n-id="platform">Platform</th>{{/if}}<th data-l10n-id="hub_node">Hub/Node</th><th data-l10n-id="source">Source</th><th>Base IP</th><th data-l10n-id="netmask">Netmask</th><th data-l10n-id="gateway">Gateway</th><th>VLAN</th></tr></thead><tbody class="ipmi-over-lan-table-body">{{for model.components ~isRoot=isRoot ~selectedPlatform=platform}}{{for components}}{{if (~isRoot || ~selectedPlatform == parent.number) && (type == "hubnode" || type == "node")}}{{include tmpl=~ipmiOverLanRow  ~currentPlatform=parent.number ~currentNode=description.number /}}{{/if}}{{/for}}{{/for}}</tbody></table><button class="base-button btn-save-network" data-action="save-ipmi-over-lan" data-l10n-id="save">Save</button></div></div>');
	nwayo_jshtml['remote_tree_branch']=window.kafe.dependencies.jQuery.templates('{{if ~parentHash}}<li class="component {{if !components}}leaf{{/if}}" data-component-id="{{:~hashToId(~parentHash)}}-{{:id}}" data-type="{{:type}}" data-model="{{:description.model}}" {{if routing}}data-management-ip="{{:routing.managementIp}}" {{/if}} {{if routing && routing.networkInterfaces}} data-ip="{{:routing.networkInterfaces[0].ip.join(\'.\')}}" {{/if}} >{{else}}<li class="component {{if !components}}leaf{{/if}}" data-component-id="{{:id}}" data-model="{{:description.model}}" data-type="{{:type}}" {{if routing}}data-management-ip="{{:routing.managementIp}}" {{/if}} {{if routing && routing.networkInterfaces}} data-ip="{{:routing.networkInterfaces[0].ip.join(\'.\')}}" {{/if}} >{{/if}}<div class="header type-{{:type}}" data-action="expand">{{if components}}<span class="expand"></span>{{/if}}{{if ~parentHash}}<span class="name expand_no_ico">{{:description.name}}</span>{{if type == "node" || type == "hubnode"}}<span class="model">{{:description.model}}</span>{{/if}}{{else}}<span class="name expand_no_ico" >{{:description.name}}</span>{{/if}}{{if routing}}{{if routing.managementIp}}<span class="ip">{{:routing.managementIp}}</span>{{/if}}{{if routing.networkInterfaces}}<span class="ip">{{toIp:routing.networkInterfaces[0].ip}}</span>{{/if}}{{/if}}</div>{{if components}}{{if ~parentHash ~componentHash=~parentHash+"/"+id}}<ul class="components">{{for components tmpl=~subComponents ~parentHash=~componentHash /}}</ul>{{else ~componentHash="/"+id}}<ul class="components">{{for components tmpl=~subComponents ~parentHash=~componentHash /}}</ul>{{/if}}{{/if}}</li>');
	nwayo_jshtml['security_login']=window.kafe.dependencies.jQuery.templates('<aside class="base-block security-login" data-behavior="security-login"><div class="header"><h2 class="title" data-l10n-id="connect">Connect</h2></div><div class="content"><form class="base-form" data-behavior="base-form"><div class="summary error"></div><div class="field"><!-- <label>Username:</label> --><input type="text" name="user" class="base-input-text required" placeholder="Username" /></div><div class="field"><!-- <label>Password:</label> --><input type="password" name="pass" class="base-input-text required" placeholder="Password" /></div><div class="commands"><button type="submit" class="base-button arrow-right login" data-l10n-id="login">Login</button></div></form></div></aside>');
	nwayo_jshtml['settings_interface_prefs_form']=window.kafe.dependencies.jQuery.templates('<div class="field"><label data-l10n-id="header_logo">Header Logo :</label><div style="background-color:{{:baseColor}}"><img class="preview-image" src="{{:logo}}" alt="" data-behavior="preview-image" /></div><small data-l10n-id="img_size_max"><strong data-l10n-id="img_files_only">PNG, JPG or GIF files only.</strong> Must have a height of 72px, a maximum width of 380px and a maximum size of 100 kB.</small></div><div class="field image-upload"><input type="file" name="logo" data-action="preview-image" /><button class="base-button colored" data-l10n-id="upload_image_file">Upload image file</button></div><div class="hr"></div><div class="image-favicon"><label data-l10n-id="favicon">Favicon :</label><div><img class="preview-image-favicon" src="{{:favicon}}" alt="" data-behavior="preview-favicon" width="32" height="32"/><small data-l10n-id="ico_size_max"><strong data-l10n-id="ico_files_only">ICO files only.</strong> Must have a maximum size of 100 kB.</small></div></div><div class="field image-upload"><input type="file" name="favicon" data-action="preview-favicon" /><button class="base-button colored" data-l10n-id="upload_image_file">Upload image file</button></div><div class="hr"></div><div class="base-columns three"><div class="col field"><label data-l10n-id="company_name">Company Name :</label><input type="text" class="base-input-text" name="companyName" data-behavior="companyName" value="{{:companyName}}" /></div><div class="clearer"></div><div class="col field"><label data-l10n-id="primary_color">Primary Color :</label><input type="text" class="base-input-text color" name="baseColor" value="{{:baseColor}}" data-action="preview-color" /></div><div class="col field"><label data-l10n-id="light_primary_color">Light Primary Color :</label><input type="text" class="base-input-text color" name="lightBaseColor" value="{{:lightBaseColor}}" data-action="preview-color" /></div><div class="clearer"></div><div class="col field"><label data-l10n-id="secondary_color">Secondary Color :</label><input type="text" class="base-input-text color" name="altColor" value="{{:altColor}}" data-action="preview-color" /></div><div class="col field"><label data-l10n-id="light_secondary_color">Light Secondary Color :</label><input type="text" class="base-input-text color" name="lightAltColor" value="{{:lightAltColor}}" data-action="preview-color" /></div><div class="col field"><label data-l10n-id="lighter_secondary_color">Lighter Secondary Color :</label><input type="text" class="base-input-text color" name="lighterAltColor" value="{{:lighterAltColor}}" data-action="preview-color" /></div><div class="clearer"></div></div><div class="hr"></div><div class="settings-button-div"><button class="base-button btn-save" data-action="save" data-l10n-id="save_changes">Save changes</button><button class="base-button btn-reset" data-action="reset" data-l10n-id="default">Default</button></div>');
	nwayo_jshtml['settings_users_form']=window.kafe.dependencies.jQuery.templates('<fieldset class="base-block settings-users-form"><div class="header"><h2 class="title"{{if modify}}data-l10n-id="modify_user_info">Modify user info{{else}}data-l10n-id="create_new_user">Create new user{{/if}}</h2></div><div class="content"><form class="base-form" data-context="settings-users-form" data-user="{{:user}}"><div class="field"><label  data-l10n-id="user">User: (alpha-numeric characters only)</label><input type="text" class="base-input-text required match" data-match-with="^([a-zA-Z0-9]+)$" name="user" value="{{:user}}"></div><div class="field"><label data-l10n-id="password">Password: (excluding ", \', \\\)</label><input type="password" class="base-input-text {{if !modify}}required{{/if}} match" data-match-with="^([^\'&quot;\\\\]+)$" name="password" value=""></div><div class="field"><label data-l10n-id="confirm_password">Confirm password :</label><input type="password" class="base-input-text compare" name="password2" value="" data-compare-to="password"></div><div class="field"><label data-l10n-id="role">Role :</label><select name="role" class="base-select">{{for roles}}<option value="{{:key}}" {{if key === ~root.role}}selected="selected{{/if}}">{{:text}}</option>{{/for}}</select></div><div class="hr"></div><button class="base-button" data-action="save" type="button"{{if modify}}data-l10n-id="save_changes">Save changes{{else}}data-l10n-id="create_user">Create user{{/if}}</button></form></div></fieldset>');
	nwayo_jshtml['settings_users_item']=window.kafe.dependencies.jQuery.templates('<tr data-user="{{:name}}" data-role="{{:roleKey}}"><td>{{:name}}</td><td>{{:roleText}}</td>{{if name !== ~currentUser}}<td class="snug nowrap"><a href="" data-action="modify-user" data-l10n-id="modify">Modify</a></td><td class="snug nowrap"><a href="" data-action="delete-user" data-l10n-id="delete">Delete</a></td>{{else}}<td colspan="2"></td>{{/if}}</tr>');
	nwayo_jshtml['settings_users_list']=window.kafe.dependencies.jQuery.templates('{{for users tmpl="settings_users_item" ~currentUser=~root.currentUser /}}');
	nwayo_jshtml['system_event_log_events_view']=window.kafe.dependencies.jQuery.templates('{{if log}}{{for log.records}}<tr><td>{{toDate:timestamp}} {{toTime:timestamp}}<br/></td><td>{{:recordId}}<br/></td><td>{{:generatorId}}<br/></td><td>{{:sensorNumber}}<br/></td><td>{{:sensorName}}<br/></td><td>{{:sensorType}}<br/></td><td>{{toConCatHex:eventData1 eventData2 eventData3}}<br/></td><td>{{:eventDescription}}</td></tr>{{/for}}{{/if}}');
	nwayo_jshtml['system_event_log_navigation_view']=window.kafe.dependencies.jQuery.templates('<div class="navigation-bar" data-behavior="navigation-buttons"><div class="button-bar"><span class="prev_buttons"><button class="base-button navigation-button double-arrow-left" data-page="1" data-behavior="switch-page"data-platform="{{:platform}}">1</button><button class="base-button navigation-button arrow-left" data-page="{{:page - 1}}"data-behavior="switch-page" data-platform="{{:platform}}">{{:page - 1}}</button></span><span class="page">&nbsp;{{:page}}&nbsp;</span><span class="next_buttons"><button class="base-button navigation-button arrow-right" data-page="{{:page + 1}}"data-behavior="switch-page" data-platform="{{:platform}}">{{:page + 1}}</button><button class="base-button navigation-button double-arrow-right" data-page="{{:lastPage}}" data-behavior="switch-page"data-platform="{{:platform}}">&nbsp;</button></span></div></div>');
	nwayo_jshtml['system_event_log_platforms_view']=window.kafe.dependencies.jQuery.templates('{{if components}}{{for components}}<li class="component leaf" data-component-id="{{:id}}" data-type="{{:type}}" data-id="{{:id}}" data-model="{{:description.model}}"><div class="header type-{{:type}}"><span class="health-icon {{:status.health}}"></span><a href="system-event-log.html#!/{{:id}}" class="name" data-action="select-platform">{{:description.name}}</a></div></li>{{/for}}{{else}}<span class="name" data-l10n-id="no_platforms_available">No platforms available</span>{{/if}}');
	nwayo_jshtml['system_event_log_view']=window.kafe.dependencies.jQuery.templates('<nav class="system-event-log-download-bar" data-behavior="drawer-menu"><div class="handle"  data-action="open" data-l10n-id="tools">Tools</div><div class="drawer"><ul><li class="debug"><a data-action="download-csv" data-l10n-id="download_system_event_log">Download system event log</a></li></ul></div></nav><aside class="message loading-message" data-context="system-event-log-update-message"><span class="loader" /><label data-l10n-id="loading_data" class="loader-label">Loading data...</label></aside><aside class="message csv-message" data-context="system-event-log-loading-csv-message"><span class="loader" /><label data-l10n-id="loading_csv" class="loader-label">File will be downloaded shortly...</label></aside><div class="base-block themed grid">{{include tmpl=~navigationBar ~page=~page/}}<div class="header"><h2 class="title platform-id">&nbsp;</h2></div><div><table class="base-grid" data-behavior="event-table"><thead><tr><th data-l10n-id="date_time">Date Time</th><th data-l10n-id="event_id">Event ID</th><th>Node ID</th><th data-l10n-id="sensor_num">Sensor #</th><th data-l10n-id="sensor_name">Sensor Name</th><th data-l10n-id="sensor_type">Sensor Type</th><th data-l10n-id="event_data">Event Data</th><th data-l10n-id="event_description_text">Event Description Text</th></tr></thead><tbody class="events">{{include tmpl=~eventsView ~log=~log/}}</tbody></table></div>{{include tmpl=~navigationBar ~page=~page/}}</div>');
	nwayo_jshtml['trends_monitored_sensor']=window.kafe.dependencies.jQuery.templates('');
	nwayo_jshtml['upgrade_file_upload']=window.kafe.dependencies.jQuery.templates('<div class="file-description"><span class="name"><strong>{{:name}}</strong> <em>({{toSize:loaded}} / {{toSize:total}})</em></span>{{if progress < 98}}<span class="base-progress-bar"><span style="width:{{:progress}}%;"></span></span>{{else }}<span class="base-progress-bar process"><span style="width:{{:progress}}%;"></span></span><span class="health-icon green" style="display: none"></span>{{/if}}</div>');
	nwayo_jshtml['upgrade_status']=window.kafe.dependencies.jQuery.templates('<h2 class="base-subtitle" data-l10n-id="current_update_status">Current Update Status</h2><div class="status-item has-childs" data-binding="multi" data-action="expand"><div class="expand"></div><div class="text component"><strong data-l10n-id="multi_platform_update">Multi-Platform Update</strong></div><div class="text state">{{:state}}</div><span class="health-icon {{if state=="Completed"}}green{{else state=="Failed"}}red{{/if}}"></span><span class="base-progress-bar"><span style="width:{{:totalProgress}}%;"></span></span></div><div class="childs">{{for allStatus}}<div class="status-item has-childs" data-platform="{{:platform}}" data-action="expand"><div class="expand"></div><div class="text component"><strong data-l10n-id="platform">Platform {{:platform}}</strong><span class="current"></span></div><div class="text state">{{:status.state}}</div><span class="health-icon {{if status.state=="Completed"}}green{{else status.state=="Failed"}}red{{/if}}"></span><span class="base-progress-bar"><span style="width:{{:status.totalProgress}}%;"></span></span></div><div class="childs">{{for status.allStatus}}<div class="status-item" data-store-id="{{:storeId}}"><div class="text component"><strong>{{:storeId}}</strong><span class="current"><br /><em>Currently <span class="current-action">{{toLowerCase:status.state}}</span> <span class="current-component">{{:status.component}}</span>...</em></span></div><div class="text state">{{:status.state}}</div><span class="health-icon {{if status.state=="Completed"}}green{{else status.state=="Failed"}}red{{/if}}"></span>{{if status.state=="Writing" || status.state=="Activating"}}<span class="base-progress-bar process"><span></span></span>{{else}}<span class="base-progress-bar"><span style="width:{{:status.progress}}%;"></span></span>{{/if}}</div>{{/for}}</div>{{/for}}</div>');
}());


window.kontron = (function(kafe,undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
    ;

    var App = {};
    var Local = {};

    // String prototypes
    if (!String.prototype.format) {
        String.prototype.format = function() {
            var args = arguments;
            return this.replace(/{(\d+)}/g, function(match, number) { 
                    return typeof args[number] != 'undefined' ? args[number] : match;
            });
        };
    }
    
    if (!String.prototype.endsWith) {
            String.prototype.endsWith = function(suffix) {
                    return this.indexOf(suffix, this.length - suffix.length) !== -1;
            };
    }

    // jsrender converters and helpers
    $.views.converters({
        escape: function(value) {
            return encodeURI(value);
        },
        rescape: function(value) {
            return decodeURI(value);
        },
        toConCatHex: function(data1, data2, data3) {
            return '0x' + ('00' + data1.toString(16)).slice(-2) +
                        ('00' + data2.toString(16)).slice(-2) +
                        ('00' + data3.toString(16)).slice(-2);
        },
        toIp: function(ip) {
            return [ip['0'], ip['1'], ip['2'], ip['3']].join('.');
        },
        toSize: function(size) {
            return App.Utils.FormatSize(size);
        },
        toLowerCase: function(value) {
            return value.toLowerCase();
        },
        toDate: function(timestamp) {
            return (new Date(timestamp)).toLocaleDateString();
        },
        toTime: function(timestamp) {
            return (new Date(timestamp)).toLocaleTimeString();
        }
    });
    
    $.views.helpers({
        getRowClass: function(index) {
            return (index % 2 == 1) ? 'even' : 'odd';
        },
        hashToId: function(path) {
            return App.Hash.ToId(path);
        },
        getHashPath: function() {
            return '/' + App.Hash.Path().join('/');
        }
    });

    // colorbox default params
    kafe.ext.colorbox.setParams({
        initialWidth:64, initialHeight:64, maxWidth:'90%', maxHeight:'90%',
        opacity:0.5, fadeOut:100, fixed:true, close:''
    });


    /*- Cache data -------------------------------------------------------------------*/
    Local.Cache = function() {

        // env
        App.env = {};
        App.env.culture = kafe.env('culture');
        App.env.lang = kafe.env('lang');
        App.env.page = kafe.env('page');

        App.env.servicesHttps =  'https://' + document.domain;
        App.env.servicesHttp = 'http://' + document.domain + ':9090';
        
        if (document.location.protocol == 'https:') {
            App.env.services =  App.env.servicesHttps;
        } else {
            App.env.services = App.env.servicesHttp;
        }

        // dom
        App.dom = {};
        App.dom.window = $(window);
        App.dom.document = $(document);
        App.dom.body = $('head');
        App.dom.body = $('body');
        App.dom.page_header = $('.page-header');
        App.dom.page_body = $('.page-body');
        App.dom.page_footer = $('.page-footer');
        App.dom.for = function(role, value) {
            return '[data-' + role + (!!value ? '="' + value + '"]' : ']');
        };
        App.dom.has = function(role, value, context) {
            return $(App.dom.for(role, value), context);
        };

        // tmpl
        App.tmpl = window.nwayo_jshtml;
        kafe.fn.deleteVar('window.nwayo_jshtml');

        $('script[type="text/x-jsrender"]').each(function () {
            var id = $(this).attr('id');
            App.tmpl[id.substring(7)] = $.templates('#'+id);
        });
        $.templates(App.tmpl);

    };


    /*- Url manipulation ----------------------------------------------------------------------*/

    App.Query = {};
    App.Hash = {};

    // convert hash path to unique id
    App.Hash.Path = function() {
        return _.remove(kafe.url.parseAjaxPath(), function(item) {
            return item !== '';
        });
    };
    
    App.Hash.IsRoot = function() {
        return App.Hash.Path().length === 0;
    };
    
    App.Hash.ToId = function(path) {
        var _arr = path.split('/');
        _arr.splice(0, 1);
        return _arr.join('-');
    };

    // update querystring parameters
    App.Query.Get = function(key) {
        return $.deparam.querystring()[key];
    };


    /*- Services ------------------------------------------------------------------------------*/

    App.Service = {};

    App.Service.NoActiveCalls = function() {
        return $.active === 0;
    };
    
    App.Service._manageCallErrors = function(error) {
        var $logout = false;
        var $message = '';
        var $title = "Error";
        
        if (!error) {
           $message = "Got no reply from API service.</BR> Trying to reconnect...";
        }
        else {
            switch(error.code) {
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                    $message = 'Please authenticate again to continue using the system.';
                    $logout = true;
                    break;

                case 38:
                    $title = "Warning";
                    $message = error.message;
                    break;
                    
                default:
                    $message = error.message;
                    break;
            }
        }
        
        var $tmpl = $(App.tmpl.confirm_dialog.render({
            title: $title, 
            message: $message
        }));
        
        $tmpl
            .on('click', App.dom.for('action', 'confirm'), function() {
                $.colorbox.close();
                if ($logout) {
                    App.SecurityService.Logout();
                }
                App.BaseForm.ReleaseInteractions(App.dom.document);
            })
            .find('[data-action="cancel"]').remove()
        ;

        $.colorbox(kafe.ext.colorbox.getParams({
            html: $tmpl
        }));
    };
    
    // Tolerate a certain number of time failures with error code 42 which mean that the
    // current server is not the active instance. This may occur during switchovers when
    // using Shared IP (it takes a few seconds to the IP to transfer from one node another).
    App.Service._serverNotActiveOccurences = 0;
    
    App.Service._manageCallErrorsInBackgroundPolling = function(error) {
        if (error && error.code === 42 && ++App.Service._serverNotActiveOccurences <= 2) {
            console.log("Temporarily ignoring error 42 (instance is not Active) returned by server - Assuming switchover in progress...");
        } else {
            App.Service._serverNotActiveOccurences = 0;
            App.Service._manageCallErrors(error);
        }
    };
    
    App.Service.Call = function(method, url, token, params, success, error, opt) {
        var options = opt || {};
        
        var baseUrl = options.https ?  App.env.servicesHttps :  App.env.services;
    
        var _request = {
            type: method,
            dataType: 'json',
            contentType: 'application/json',
            url: baseUrl + url,
            success: function(data){
                if(data.code && data.code !== 0 && data.code !== 23 && data.code !== 25 && data.code !== 26  ) {
                    App.Service._manageCallErrors(data);
                } else {
                    success(data);
                }
                App.Service._serverNotActiveOccurences = 0;
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.log(App.env.services + url, textStatus, errorThrown, jqXHR);
                
                App.Service._manageCallErrors(jqXHR.responseJSON);
            }
        };

        if (!!token) {
            _request.beforeSend = function(xhr) {
                xhr.setRequestHeader('Authorization', 'Basic ' + token);
            };
        }
        if (!!params) { _request.data = params; }
        if (!!error) { _request.error = error; }
        if (!!options.sync) { _request.async = !options.sync; }
        
        $.ajax(_request);
    };
    
    App.Service.Get = function(url, token, params, success, error, options) {
        App.Service.Call('GET', url, token, params, success, error, options);
    };
    App.Service.Put = function(url, token, params, success, error, options) {
        App.Service.Call('PUT', url, token, params, success, error, options);
    };
    App.Service.Post = function(url, token, params, success, error, options) {
        App.Service.Call('POST', url, token, params, success, error, options);
    };
    
    


    /*- Model conversion tools ----------------------------------------------------------------*/
    App.Models = {};

    App.Models.ToBoolean = function(data) {
        return data === '0' ? false : true;
    };
    App.Models.ToNumber = function(data) {
        return data ? parseInt(data, 10) : null;
    };


    /*- Utils ---------------------------------------------------------------------------------*/
    App.Utils = {};

    App.Utils.Exists = function(selector) {
        return $(selector).length > 0;
    };
    App.Utils.IsEnterKey = function(e) {
        return ((!!e.which) ? e.which : e.keyCode) == 13;
    };
    App.Utils.InputIsNotEmpty = function(input) {
        var $input = $(input);
        return _.str.trim($input.val()) !== '' && !$input.hasClass('Placeholder');
    };
    App.Utils.Base64 = function(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    };
    App.Utils.Debase64 = function(str) {
        return decodeURIComponent(escape(window.atob(str)));
    };
    App.Utils.ScrollTo = function(selector) {
        $.scrollTo($(selector), (Modernizr.touch) ? 0 : 200, {offset:{top:-15}});
    };
    App.Utils.FormatSize = function(bytes) {
        if (bytes > 1000000) {
            return (bytes / 1000000).toFixed(1) + ' Mb';
        } else {
            return (bytes / 1000).toFixed(1) + ' Kb';
        }
    };

    $(function() {
        Local.Cache();
    });

    return App;

})(window.kafe);


/*------------------------------------------------------------------------------------//
 // PAGE-HEADER
 //------------------------------------------------------------------------------------*/



(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    App.Models.ComponentViewModel = kafe.fn.createInstantiableObject();

    /*- constructor ----------------------------------------------------------------*/
    App.Models.ComponentViewModel.prototype.__constructor = function(data) {

        var self = this, model = (data !== undefined) ? data : {};

        self.API_URL = App.env.services;

        // core
        self.type = model.type || null;
        self.description = {
            name: model.title || model.name || model.description || null,
            number: model.number || '',
            model: model.model || null,
            fru: model.fruInfo || null
        };
        self.parent = model.parent || null;
        if( self.parent)
        {
            if(self.parent.type == "hubnode")
            {
				self.type = "switch";
            }
            else if(self.parent.type == "node")
            {
				self.type = "server";
				self.cli = "/shell/node" + self.parent.number + "/" + self.description.number + "/";
            }
            self.parent.id = self.parent.type + '-' + self.parent.number;
        }
        self.id = self.type + '-' + self.description.number;

        // PSU exception
        if (self.description.name === 'PSU') {
            self.type = 'psu-group';
            self.id = 'psu-group';
        }

        // status
        self.status = {
            health: (model.health) ? model.health.toLowerCase() : null,
            updating: (model.isUpdating) ? model.isUpdating === '1' : null,
            global: (model.status) ? model.status : null,
            power: (model.isPowerModulePresent) ? model.isPowerModulePresent === '1' : null,
            hotswap: (model.hotswapStatus) ? model.hotswapStatus : null
        };

        // routing
        self.routing = (model.managementIP || model.networkInterfaces) ? {
            managementIp: model.managementIP || null,
            networkInterfaces : model.networkInterfaces || null
            //payloadIp: model.ip || null,
            //netmask: model.netmask || null,
            //gateway: model.gateway || null
        } : null;

        // power
        self.consumption = (model.type === 'psu') ? {
            inletTemperature: App.Models.ToNumber(model.tempInlet),
            outletTemperature: App.Models.ToNumber(model.tempOutlet),
            inputVoltage: App.Models.ToNumber(model.vIn),
            powerOut: App.Models.ToNumber(model.powerOut),
            peak: App.Models.ToNumber(model.peakConsumption),
            average: App.Models.ToNumber(model.averageConsumption)
        } : null;

        // system event log
        self.system_event_log = {
            numRecords: model.numRecords,
            firstId: model.firstId,
            lastId: model.lastId,
            records: model.records
        };

        // collections
        self.fans = model.fans || null;
        self.versions = model.versions || null;
        self.components = (model.components) ? $.map(model.components, function(data) {
            return new App.Models.ComponentViewModel(data);
        }) : null;


        //Find and set hubType for platform
        if (self.type == "platform")
        {
            var hubs = App.MonitorServices.FindComponents(function(node){
                return node.type == "hubnode";
            });
            self.hubModel = hubs.length > 1 ? hubs[0].model : null;
            App.MonitorServices.SetHubModel(self.hubModel);
        }
    };


})(window.kafe, window.kontron);


/*------------------------------------------------------------------------------------//
 // SECURITY SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};

    $.views.helpers({
        isAdmin: function() {
            return App.SecurityService.IsAdmin();
        }
    });

    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$security_login = function() { return App.dom.has('behavior', 'security-login'); };

        // services
        Module.Services = {};

        Module.Services.Login = '/v2/Auth';
        Module.Services.WebsiteConfig = '/v2/Platform/0/WebsiteConfig';


        // other methods
        Module._cacheUserSession = function(data) {
            kafe.storage.setSessionItem('security:user', data);
        };
        Module._getUserSession = function() {
            return kafe.storage.getSessionItem('security:user');
        };
        Module._clearUserSession = function() {
            kafe.storage.removeSessionItem('security:user');
        };

        Module._cacheActiveUsername = function(data) {
            kafe.storage.setSessionItem('security:username', data);
        };
        Module._getActiveUsername = function() {
            return kafe.storage.getSessionItem('security:username');
        };
        Module._clearActiveUsername = function() {
            kafe.storage.removeSessionItem('security:username');
        };

        Module._cacheWebsiteConfig = function(data) {
            kafe.storage.setPersistentItem('security:website-config', data); // localstorage
        };
        Module._getCachedWebsiteConfig = function() {
            return kafe.storage.getPersistentItem('security:website-config'); // localstorage
        };
        Module._clearCachedWebsiteConfig = function() {
            kafe.storage.removePersistentItem('security:website-config'); // localstorage
        };

        Module._promptLogin = function() {
            var _template = $(App.tmpl.security_login.render());

            _template
                .on('submit', 'form', function(e) {
                    e.preventDefault();
                    var _form = $(this);
                    App.BaseForm.ValidateFields(_form, function() {

                        var _user = _form.find('[name="user"]').val();
                        var _pass = _form.find('[name="pass"]').val();

                        App.SecurityService.Login(_user, _pass);

                    });
                });

            App.dom.page_body.html(_template);
        };
        Module._getWebsiteConfig = function(callback) {
            App.Service.Get(Module.Services.WebsiteConfig, null, null, function(data) {
                Module._cacheWebsiteConfig(data);
                window.location.reload();
            });
        };

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('security:process', function(e, data) {

                App.BaseForm.BlockInteractions(Module.$security_login());

            })
            .on('security:login', function(e, data) {

                var _login = Module.$security_login();

                if (data.status === "Success") {

                    Module._cacheUserSession(data);
                    Module._getWebsiteConfig();
                    App.SecurityService.ApplyPermissions();

                } else {

                    Module._clearUserSession();
                    Module._clearActiveUsername();
                    Module._clearCachedWebsiteConfig();

                    _login.find('.summary').html('Login failed: '+ data.message).show();

                    App.BaseForm.ReleaseInteractions(_login);

                }

            })
            .on('security:website-config', function(e, data) {



            })
            .on('security:logout', function(e, data) {

                Module._clearUserSession();
                Module._clearActiveUsername();
                Module._clearCachedWebsiteConfig();
				window.location = 'index.html';
            });

    };


    /*- Public methods ---------------------------------------------------------------*/
    App.SecurityService = {};


    // User Session
    App.SecurityService.GetUser = function() {
        return Module._getUserSession();
    };
    App.SecurityService.GetUsername = function() {
        return Module._getActiveUsername();
    };
    App.SecurityService.GetSessionToken = function() {
        return App.Utils.Base64(Module._getActiveUsername() + ':' + Module._getUserSession().token);
    };
    App.SecurityService.IsAuthenticated = function() {
        return !_.isEmpty(Module._getUserSession());
    };
    App.SecurityService.IsAdmin = function() {
        return Module._getUserSession().roleKey === 'admin';
    };


    // Authentication
    App.SecurityService.Login = function(user, pass) {

        App.dom.document.trigger('security:process');
        var _token = App.Utils.Base64(user + ':' + pass);

        App.Service.Post(Module.Services.Login, _token, null, function(data) {
            Module._cacheActiveUsername(user);
            App.dom.document.trigger('security:login', data);
        });

    };
    App.SecurityService.Logout = function() {

        App.dom.document.trigger('security:logout');

    };


    // Prompts & Methods
    App.SecurityService.PromptLogin = function() {

        // block header
        App.dom.page_header.find('.main-menu .drawer, .user-menu, .help-menu').remove();

        // block footer
        App.dom.page_footer.find('.links').remove();

        // prompt login
        Module._promptLogin();

    };


    // Interface Changes
    App.SecurityService.GetCachedWebsiteConfig = function() {
        return Module._getCachedWebsiteConfig();
    };
    App.SecurityService.GetWebsiteConfig = function() {
        Module._getWebsiteConfig();
    };
    App.SecurityService.SaveWebsiteConfig = function(data) {
        var _query = { config: JSON.stringify(data) };
        App.Service.Post(Module.Services.WebsiteConfig, App.SecurityService.GetSessionToken(), _query, function(data) {
            Module._getWebsiteConfig();
        });
    };

    App.SecurityService.ApplyWebsiteConfig = function() {

        if (!!Module._getCachedWebsiteConfig()) {

            //var _colors = { baseColor: "#0063ab", lightBaseColor: "#3e8bc8", altColor: "#8ba9d6", lightAltColor: "#d5e0f2", lighterAltColor: "#eaeff8" }; // Kontron
            //var _colors = { baseColor: "#026b62", lightBaseColor: "#19a69d", altColor: "#43bfb7", lightAltColor: "#b1dedb", lighterAltColor: "#ddf3f2" }; // Turquoise
            var _css = App.tmpl.css_theme.render(Module._getCachedWebsiteConfig());
            var _head = document.head || document.getElementsByTagName('head')[0];
            var _styleTag = document.getElementById('customColors');

            App.dom.has('behavior', 'favicon').attr('href', App.SecurityService.GetCachedWebsiteConfig().favicon);

            // TODO: fort probablement changer ceci
            //document.title = document.title.substring(0, document.title.lastIndexOf('-') + 2) + App.SecurityService.GetCachedWebsiteConfig().companyName;
            $('html head').find('title').append(" - "+App.SecurityService.GetCachedWebsiteConfig().companyName);

            if (_.isNull(_styleTag)) {
                _styleTag = document.createElement('style');
                _styleTag.type = 'text/css';
                _styleTag.id = 'customColors';
            }

            if (_styleTag.styleSheet){
                _styleTag.styleSheet.cssText = _css;
            } else {
                _styleTag.appendChild(document.createTextNode(_css));
            }

            _head.appendChild(_styleTag);

        } else {

            Module._getWebsiteConfig();
        }

    };
    App.SecurityService.ApplyPermissions = function() {

        if (!App.SecurityService.IsAdmin()) {
            App.dom.has('admin-only').remove();
        }

    };




    $(function() {
        Module.Cache();
        Module.Listen();
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // SETTINGS SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};

    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // private vars
        var service_url = function(name) { return '/v2/Platform/0/'+name; };

        // services
        Module.Services = {
            GetUsers: service_url('UserList'),
            AddUser: service_url('AddUser'),
            ModifyUser: service_url('ModifyUser'),
            DeleteUser: service_url('DeleteUser'),
            HTTPSSettings: '/v2/Security/HTTPS',
            UploadCert: '/v2/Security/Certificates',
            SELSettings: service_url('SEL/Settings')
        };

        // private functions
        Module._cacheAvailableRoles = function(data) {
            kafe.storage.setSessionItem('settings-users', {'availableRoles':data} );
        };
        Module._getCachedAvailableRoles = function() {
            return kafe.storage.getSessionItem('settings-users').availableRoles;
        };
        Module._clearCachedMonitoredSensors = function() {
            kafe.storage.removeSessionItem('settings-users');
        };
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('security:logout', function(e, data) {
                Module._clearCachedMonitoredSensors();
            })
        ;

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

    };


    /*- Public methods ---------------------------------------------------------------*/
    App.SettingsServices = {};

    App.SettingsServices.GetUsers = function() {
        App.Service.Get(Module.Services.GetUsers, App.SecurityService.GetSessionToken(), null, function(data) {
            Module._cacheAvailableRoles(data.availableRoles);
            App.dom.document.trigger('settings:users:load', {users:data.userList});
        });
    };

    App.SettingsServices.GetAvailableRoles = function() {
        return Module._getCachedAvailableRoles();
    };

    App.SettingsServices.CreateUser = function(param) {
        App.Service.Post(Module.Services.AddUser, App.SecurityService.GetSessionToken(), param, function(data) {
            App.dom.document.trigger('settings:users:user_created', data);
        });
    };

    App.SettingsServices.ModifyUser = function(param) {
        App.Service.Post(Module.Services.ModifyUser, App.SecurityService.GetSessionToken(), param, function(data) {
            App.dom.document.trigger('settings:users:user_modified', data);
        });
    };

    App.SettingsServices.UpdatePassword = function(param) {
        App.Service.Post(Module.Services.ModifyUser, App.SecurityService.GetSessionToken(), param, function(data) {
            App.dom.document.trigger('settings:users:password_updated', data);
        });
    };

    App.SettingsServices.DeleteUser = function(param) {
        App.Service.Post(Module.Services.DeleteUser, App.SecurityService.GetSessionToken(), param, function(data) {
            App.dom.document.trigger('settings:users:user_deleted', data);
        });
    };

    App.SettingsServices.GetHTTPSSettings = function() {
        App.Service.Get(Module.Services.HTTPSSettings, App.SecurityService.GetSessionToken(), null, function (data) {
                App.dom.document.trigger('settings:security:https_settings_loaded', data);
            }, null, {sync: true});
    };

    App.SettingsServices.ModifyHTTPSSettings =  function(param) {
        App.Service.Post(Module.Services.HTTPSSettings, App.SecurityService.GetSessionToken(), param, function(data) {
            App.dom.document.trigger('settings:security:https_settings_modified', data);
        }, null, {});
    };

    App.SettingsServices.UploadSecurityCertificates = function(param) {
        var data = new FormData();
        data.append('cert', param.cert);
        data.append('key', param.key);
        data.append('cacert', param.cacert);

        var _request = {
            type: 'POST', dataType: 'json', contentType: false, processData: false,
            url: App.env.servicesHttps + Module.Services.UploadCert, data: data,
            beforeSend: function (xhr) {
                xhr.setRequestHeader('Authorization', 'Basic ' + App.SecurityService.GetSessionToken());
            },
            xhr: function() {
                var xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener("progress", function(e){
                    if (e.lengthComputable) {
                        var data = {
                            total: e.total,
                            loaded: e.loaded,
                            progress: (e.loaded * 100) / e.total
                        };
                        App.dom.document.trigger('settings:security:upload:progress', data);
                    }
                }, false);
                return xhr;
            },
            success: function(data) {
                App.dom.document.trigger('settings:security:upload:complete', data);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                App.dom.document.trigger('settings:security:upload:error', {
                        textStatus: textStatus,
                        errorThrown: errorThrown,
                        response: jqXHR.responseText});
                kafe.error(new Error('Service Error for ' + App.env.services + Module.Services.UploadCert));
                console.log(App.env.services + Module.Services.UploadCert);
                console.log(jqXHR);
                console.log(textStatus, errorThrown);
            }
        };

        App.dom.document.trigger('settings:security:upload:start');
        $.ajax(_request);
    };

    $(function() {
        Module.Cache();
        if (App.SecurityService.IsAuthenticated()) {
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // SYTEM EVENT LOG SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};

    $.views.helpers({
        getSelectedComponentClass: function(path) {
            var _selected = false;
            $.each(App.Hash.Path(), function(i, val) {
                if (!_selected) {
                    _selected = val === path;
                }
            });
            return _selected ? 'on' : '';
        }
    });

    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        Module.Services = {};

        //TODO: multiplatform
        Module.Services.GetPlatformSEL = '/v2/Platform/{0}/SEL/Events';
        Module.Services.GetPlatformSELCsv = '/v2/Platform/{0}/SEL/Csv';

        // private functions

    };

    /*- Public methods ---------------------------------------------------------------*/
    App.SystemEventLogServices = {};

    App.SystemEventLogServices.GetPlatformSELCsv = function(platform) {
        $.ajax({
            type: "GET", dataType: 'text', contentType: false, processData: false,
            url: App.env.services + Module.Services.GetPlatformSELCsv.format(platform),
            beforeSend: function (xhr) {
                xhr.setRequestHeader('Authorization', 'Basic ' + App.SecurityService.GetSessionToken());
            },
            data: null,
            success: function(response, status, xhr) {
                var filename = "SystemEventLog.csv";
                var type = xhr.getResponseHeader('Content-Type');
                var blob = new Blob([response], { type: type });

                App.dom.document.trigger('system-event-log:csv-load-finished', null);

                if (typeof window.navigator.msSaveBlob !== 'undefined') {
                    // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
                    window.navigator.msSaveBlob(blob, filename);
                } else {
                    var URL = window.URL || window.webkitURL;
                    var downloadUrl = URL.createObjectURL(blob);

                    // use HTML5 a[download] attribute to specify filename
                    var a = document.createElement("a");
                    // safari doesn't support this yet
                    if (typeof a.download === 'undefined') {
                        window.location = downloadUrl;
                    } else {
                        a.href = downloadUrl;
                        a.download = filename;
                        document.body.appendChild(a);
                        a.click();
                    }

                    setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                App.dom.document.trigger('system-event-log:csv-load-finished', null);
                console.log(App.env.services + url, textStatus, errorThrown, jqXHR);
                App.Service._manageCallErrors(jqXHR.responseJSON);
            }
        });
    };

    App.SystemEventLogServices.GetPlatformSEL = function(platform, page, eventsPerPage, params) {
        App.Service.Get(Module.Services.GetPlatformSEL.format(platform), App.SecurityService.GetSessionToken(), params, function(data) {
            App.dom.document.trigger('system-event-log:data-loaded', {data: data,
                    platform: platform,
                    page: page,
                    eventsPerPage: eventsPerPage});
        }, function(jqXHR) {
            App.Service._manageCallErrorsInBackgroundPolling(jqXHR.responseJSON);
        });
    };


    $(function() {
        Module.Cache();
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // VERSION SERVICES
 //------------------------------------------------------------------------------------*/



(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {
        
        //-----------------------------------------------------------KeyMod 106//
        // The following section must keep the variable names and string format.
        // The data is found and used with RegEx by SMCore to extract the web version.
        // Only the value of the Major, Minor and BuildID fields should be changed.
        // Acceptable values are any consecutive sequence of numbers.
        //-----------------------------------------------------------//
        Module._Major = "6";
        Module._Minor = "1";
        Module._BuildID = "0";
        Module._BuildDate = "$Id: core.js 5608 2016-03-24 18:08:49Z mferland $";
		//-----------------------------------------------------------//
		// End of critical version section 
		//-----------------------------------------------------------//

        // selectors
        Module.$version_dialog = function() { return App.dom.has('behavior', 'version-dialog'); };

        Module.Services = {};

        Module.Services.GetVersion = '/Version';

        // private functions
        Module._openVersionDialog = function(data) {
            var _template = $(App.tmpl.version_dialog.render(data));

            $.colorbox(kafe.ext.colorbox.getParams({
                html: _template
            }));
        };

        Module._filterDate = function(){
            var matches = Module._BuildDate.match(/([0-9]+)-([0-9]+)-([0-9]+)\s([0-9]+):([0-9]+):([0-9]+)/);
            var date = matches[1] + "-" + matches[2] + "-" + matches[3] + "_" + matches[4] + ":" + matches[5] + ":" + matches[6]; 
            return date;
        };
        
		Module._getFormattedVersion = function(){
            var version = Module._Major + "." + Module._Minor + "." + Module._BuildID + "." + Module._filterDate();
            return version;
		};
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {


    };


    /*- Public methods ---------------------------------------------------------------*/
    App.VersionServices = {};

    App.VersionServices.GetVersion = function() {
        if (!App.Utils.Exists(Module.$version_dialog())) {
            App.Service.Get(Module.Services.GetVersion, null, null, function(data) {
                data.RequestLen = data.SupportedAPIs.lenght;
                Module._openVersionDialog(data);
            });
        }
    };




    $(function() {
        Module.Cache();
        Module.Listen();
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // MONITOR SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};

    $.views.helpers({
        getSelectedComponentClass: function(path) {
            var _selected = false;
            $.each(App.Hash.Path(), function(i, val) {
                if (!_selected) {
                    _selected = val === path;
                }
            });
            return _selected ? 'on' : '';
        }
    });

    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // private vars
        Module._platformsRefreshInterval = 5000;
        Module._platformsRefreshTimer = null;
        
        Module.Services = {};

        Module.Services.GetPlatformsStore = '/v2/Multi/Store';
        Module.Services.GetPlatformStore = '/v2/Platform/{0}/Store';
        Module.Services.GetPlatformSystemInformation = '/v2/Platform/{0}/SystemInformation.txt';

        Module.Services.GetPlatformSwitchSpeed = '/v2/Platform/{0}/SwitchSpeed';
        Module.Services.GetPlatformFabricDefaultPortMode = '/v3/Platform/{0}/FabricDefaultPortMode';
        Module.Services.GetPlatformFabricCurrentPortMode = '/v3/Platform/{0}/FabricCurrentPortMode';
        Module.Services.ExecutePowerCommand = '/v2/Platform/{0}/Node/{1}/PowerCommand';

        Module.Services.Network = '/v2/Platform/{0}/Node/{1}/Payload/{2}/Network';
        Module.Services.ProvisionKVM = '/v2/Platform/{0}/Node/{1}/Payload/{2}/ProvisionKVM';
        Module.Services.KVMPassword = '/v2/Platform/{0}/KVMPassword';

        Module.Services.ResetPeakAverage = '/v2/Platform/{0}/PSU/{1}/ResetStats';

        Module.Services.HubModel = "";

        // private functions
        Module._cachePlatformsStore = function(data) {
            kafe.storage.setSessionItem('monitor', data);
        };
        Module._getPlatformsStore = function() {
            return kafe.storage.getSessionItem('monitor');
        };
        Module._clearPlatformsStore = function() {
            kafe.storage.removeSessionItem('monitor');
        };
        Module._startPlatformsStoreLoop = function() {
            Module._platformsRefreshTimer = setInterval(function() {
                App.MonitorServices.GetPlatformsStore();
            }, Module._platformsRefreshInterval);
        };
        Module._stopPlatformsStoreLoop = function() {
            clearInterval(Module._platformsRefreshTimer);
        };
        Module._findStoreComponents = function(filter, data) {

            var _root = (data !== undefined) ? data : Module._getPlatformsStore(), _results = [];

            if( _root )
            {
                $.each(_root.components, function(i, val) {
                    if (filter(val)) {
                        _results.push(val);
                    }
                    if (!_.isEmpty(val.components)) {
                        _results = _results.concat(Module._findStoreComponents(filter, val));
                    }
                });
            }

            return _results;
        };
        
        Module._setParentComponent = function(data) {
            // Object copy made to avoid circular references
            var _copy = jQuery.extend(true, {}, data);
            
            if (data.components) {
                $.each(data.components, function(i, val) {
                    Module._setParentComponent(val);
                    val.parent = _copy;
                });
            }
        };

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('security:logout', function(e, data) {

                Module._stopPlatformsStoreLoop();
                Module._clearPlatformsStore();

            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {
        // Multi status
        App.MonitorServices.GetPlatformsStore(true);
        Module._startPlatformsStoreLoop();

    };


    /*- Public methods ---------------------------------------------------------------*/
    App.MonitorServices = {};

    App.MonitorServices.GetPlatformsStoreCache = function() {
        return Module._getPlatformsStore();
    };
    
    App.MonitorServices.GetPlatformsStore = function(load) {
        App.Service.Get(Module.Services.GetPlatformsStore, App.SecurityService.GetSessionToken(), null, function(data) { 
            Module._setParentComponent(data);
            Module._cachePlatformsStore(data);
            App.dom.document.trigger('monitor:' + (load ? 'load' : 'update'), data);
        }, function(jqXHR) {
            App.Service._manageCallErrorsInBackgroundPolling(jqXHR.responseJSON);
        });
    };

    App.MonitorServices.GetPlatformSystemInformation = function(platform) {
        App.Service.Get(Module.Services.GetPlatformSystemInformation.format(platform), null, null, function(data) {
            return data;
        });
    };

    App.MonitorServices.FindComponents = function(filter, data) {
        return Module._findStoreComponents(filter, data);
    };

    App.MonitorServices.FindComponentByPath = function(path, data) {
		var nodeId = path.split('-')[3];
		var serverId = path.split('-')[5];
		filter = function(component) {
			return component.parent.type === 'node' && component.parent.number === nodeId && component.number === serverId;};
		return Module._findStoreComponents(filter, data);
    };

    App.MonitorServices.GetPlatformSwitchSpeed = function(platform, callback) {
        App.Service.Get(Module.Services.GetPlatformSwitchSpeed.format(platform), App.SecurityService.GetSessionToken(), null, callback);
    };

    App.MonitorServices.SetPlatformSwitchSpeed = function(platform, params) {
        var _query = { speedConfig: JSON.stringify(params) };
        App.Service.Post(Module.Services.GetPlatformSwitchSpeed.format(platform), App.SecurityService.GetSessionToken(), _query, function(data) {
        });
    };

    App.MonitorServices.GetPlatformFabricDefaultPortMode = function(platform, callback) {
        App.Service.Get(Module.Services.GetPlatformFabricDefaultPortMode.format(platform), App.SecurityService.GetSessionToken(), null, callback);
    };

    App.MonitorServices.GetPlatformFabricCurrentPortMode = function(platform, callback) {
        App.Service.Get(Module.Services.GetPlatformFabricCurrentPortMode.format(platform), App.SecurityService.GetSessionToken(), null, callback);
    };

    App.MonitorServices.SetPlatformFabricDefaultPortMode = function(platform, params) {
        var _query = { fabricPortModeConfig: JSON.stringify(params) };
        App.Service.Post(Module.Services.GetPlatformFabricDefaultPortMode.format(platform), App.SecurityService.GetSessionToken(), _query, function(data) {
           App.dom.document.trigger('fabric-port-mode-default:set', data);
        });
    };

    App.MonitorServices.ExecutePowerCommand = function(platform, node, command, payload) {
        var service = Module.Services.ExecutePowerCommand.format(platform, node);
        var data = { command: command };
        var message = 'This node will now execute the "' + command + '" command.';

        if( payload !== "")
        {
            data.payload = payload;
            message = 'Server ' + payload + ' will now execute the "' + command + '" command.';
        }

        App.Service.Post(service, App.SecurityService.GetSessionToken(), data, function(data) {
			
			var $tmpl = $(App.tmpl.confirm_dialog.render({
                    title: "Command: "+command, 
                    message: message
            }));
         
            $tmpl.on('click', App.dom.for('action', 'confirm'), function(e) {
                    e.preventDefault();
                    $.colorbox.close();
                })
            ;
            $.colorbox(kafe.ext.colorbox.getParams({
                html: $tmpl
            }));
				
			$('.base-button[data-action="cancel"]').hide();
			
        });
    };


    App.MonitorServices.Network = function(platform, node, server, nic, params) {
        App.Service.Post(Module.Services.Network.format(platform, node, server, nic), App.SecurityService.GetSessionToken(), params, function(data) {
            App.dom.document.trigger('network:update', data);
        });
    };

    App.MonitorServices.ProvisionKVM = function(platform, node, payload) {
        App.Service.Post(Module.Services.ProvisionKVM.format(platform, node, payload), App.SecurityService.GetSessionToken(), null, function(data) {
        });
    };

    App.MonitorServices.GetKVMPassword = function(platform) {
        App.Service.Get(Module.Services.KVMPassword.format(platform), App.SecurityService.GetSessionToken(), null, function(data) {
           App.dom.document.trigger('KVMPassword:received', $.extend(data, {platform: platform}));
        });
    };

    App.MonitorServices.SetKVMPassword = function(platform, password) {
        var _param = { password: password };
        App.Service.Post(Module.Services.KVMPassword.format(platform), App.SecurityService.GetSessionToken(), _param, function(data) {
            App.dom.document.trigger('KVMPassword:set', data);
        });
    };

    App.MonitorServices.ResetPeakAverage = function(platform) {
        App.Service.Post(Module.Services.ResetPeakAverage.format(platform, 1), App.SecurityService.GetSessionToken(), null, function(data) {
            App.dom.document.trigger('peakAverage:reset', 1);
        });
        App.Service.Post(Module.Services.ResetPeakAverage.format(platform, 2), App.SecurityService.GetSessionToken(), null, function(data) {
            App.dom.document.trigger('peakAverage:reset', 2);
        });
    };

    App.MonitorServices.SetHubModel = function(model)
    {
        Module.Services.HubModel = model;
    };

    App.MonitorServices.GetHubModel = function(model)
    {
        return Module.Services.HubModel;
    };
	
	App.MonitorServices.launchKVM = function(model, managementIp, nodeIp, password) {
		if (model === "MSP8000" || model === "MSP8001" || model === "MSP803x" || model === "MSP804x") {
			window.open('http://' + managementIp + '/kvm(' +managementIp + '@00).jnlp', '_blank');
		} else if (model === "MSP8020") {
			window.open('http://' + managementIp + '/vnc/kvm-applet-root.html?ip=' + nodeIp + '&pass=' + password, '_blank');
		}        
	};

    $(function() {
        Module.Cache();
        if (App.SecurityService.IsAuthenticated()) {
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // UPGRADE SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // private vars
        Module._statusRefreshInterval = 1000;
        Module._statusRefreshTimer = null;

        Module.Services = {};

        Module.Services.MultiUpgrade = '/v2/Multi/OneClickUpgrade';
        Module.Services.PlatformUpgrade = '/v2/Platform/{0}/OneClickUpgrade';

        Module.Services.UpgradeStatus = Module.Services.MultiUpgrade; //Module.Services.PlatformUpgrade.format('0');

        Module.Services.GetModels = '/v2/Multi/AvailableModels';
        Module.Services.GetPlatformModels = '/v2/Platform/{0}/AvailableModels';

        Module.Services.UploadUpgradeFile = '/v2/Multi/UploadBundle';
        Module.Services.BundleInfo = '/v2/Multi/BundleInfo';


        // private functions
        Module._cacheStatus = function(data) {
            kafe.storage.setSessionItem('upgrade', data);
        };
        Module._getStatus = function() {
            return kafe.storage.getSessionItem('upgrade');
        };
        Module._clearStatus = function() {
            kafe.storage.removeSessionItem('upgrade');
        };
        Module._startStatusLoop = function() {
            Module._statusRefreshTimer = setInterval(function() {
                App.UpgradeServices.GetStatus();
            }, Module._statusRefreshInterval);
        };
        Module._stopStatusLoop = function() {
            clearInterval(Module._statusRefreshTimer);
        };

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('security:logout', function(e, data) {

                Module._stopStatusLoop();
                Module._clearStatus();

            })
            .on('upgrade:check', function(e, data) {
				//If there is a previous upgrade status show it to the user.
				//The default string of upgrade status has an empty "allStatus"
				//The first "allStatus[0]" is to select the first platform
                if (data.allStatus[0].status.allStatus.length !== 0) {
                    App.dom.document.trigger('upgrade:start', data);
                }

            })
            .on('upgrade:start', function(e, data) {

                Module._startStatusLoop();

            })
            .on('upgrade:update', function(e, data) {

                if (data.state === 'Completed' || data.state === 'Skipped' || data.state === 'Failed') {
                    App.dom.document.trigger('upgrade:complete', data);
                }

            })
            .on('upgrade:complete', function(e, data) {

                Module._stopStatusLoop();
                Module._clearStatus();

            });


    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

    };


    /*- Public methods ---------------------------------------------------------------*/
    App.UpgradeServices = {};

    App.UpgradeServices.GetStatusCache = function() {
        return Module._getStatus();
    };
    App.UpgradeServices.ApplyUpgrade = function(settings) {

        var service = !_.isEmpty(settings.platform) ? Module.Services.PlatformUpgrade.format(settings.platform) : Module.Services.MultiUpgrade;
        var data = { model: settings.model };

        if (!_.isEmpty(settings.component)) {
            data.node = settings.component;
        }

        if (!_.isEmpty(settings.forceUpdate)) {
            data.forceUpdate = settings.forceUpdate;
        }

        App.Service.Post(service, App.SecurityService.GetSessionToken(), data, function(data) {
            if (data.status === 'Success') {
                App.UpgradeServices.GetStatus('start');
            }
        });
    };
    App.UpgradeServices.GetStatus = function(trigger) {
        App.Service.Get(Module.Services.UpgradeStatus, App.SecurityService.GetSessionToken(), null, function(data) {
            Module._cacheStatus(data);
            App.dom.document.trigger('upgrade:' + (!_.isEmpty(trigger) ? trigger : 'update'), data);
        });
    };
    App.UpgradeServices.GetPlatformModels = function(platform, restrictions) {
        App.Service.Get(_.isEmpty(platform) ? Module.Services.GetModels : Module.Services.GetPlatformModels.format(platform), App.SecurityService.GetSessionToken(), null, function(data) {
            if (!_.isEmpty(restrictions)) {
                data.models = _.intersection(data.models, restrictions);
            }
            App.dom.document.trigger('upgrade:models', data);
        });
    };

    // upload
    App.UpgradeServices.UploadUpgradeFile = function(file) {

        var data = new FormData();
        data.append('uploadedFile', file);

        var _request = {
            type: 'POST', dataType: 'json', contentType: false, processData: false,
            url: App.env.services + Module.Services.UploadUpgradeFile, data: data,
            beforeSend: function (xhr) {
                xhr.setRequestHeader('Authorization', 'Basic ' + App.SecurityService.GetSessionToken());
            },
            xhr: function() {
                var xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener("progress", function(e){
                    if (e.lengthComputable) {
                        var data = {
                            total: e.total,
                            loaded: e.loaded,
                            progress: (e.loaded * 100) / e.total
                        };
                        App.dom.document.trigger('upgrade:upload:progress', data);
                    }
                }, false);
                return xhr;
            },
            success: function(data) {
                App.dom.document.trigger('upgrade:upload:complete', data );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                App.Service._manageCallErrors(jqXHR.responseJSON);
                App.dom.document.trigger('upgrade:upload:error', data );
            }
        };

        App.dom.document.trigger('upgrade:upload:start');
        $.ajax(_request);

    };

    App.UpgradeServices.GetBundleInfo = function(){
        App.Service.Get(Module.Services.BundleInfo, App.SecurityService.GetSessionToken(), null, function(data) {
            App.dom.document.trigger('upgrade:upload:complete', data);
        });
    };

    $(function() {
        Module.Cache();
        if (App.SecurityService.IsAuthenticated()) {
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // POWER CONSUMPTION SERVICES
 //-------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // private vars
        Module._powerRefreshInterval = 5000;
        Module._powerRefreshTimer = null;
        Module._statsMaxRange = (3600 * 1000) / Module._powerRefreshInterval;
        Module._statsMaxValue = 1200;

        Module.Services = {};

        Module.Services.GetConsumptionValues = '/v2/Platform/{0}/PSU/{1}/Details';
        Module.Services.ResetConsumptionStats = '/v2/Platform/{0}/PSU/{1}/ResetStats';

        // private functions
        Module._cacheConsumption = function(data) {
            kafe.storage.setSessionItem('power-consumption', data);
        };
        Module._getCachedConsumption = function() {
            return kafe.storage.getSessionItem('power-consumption');
        };
        Module._clearCachedConsumption = function() {
            kafe.storage.removeSessionItem('power-consumption');
            kafe.storage.removeSessionItem('max-power-consumption');
        };
        Module._cacheMaxConsumption = function(data) {
            kafe.storage.setSessionItem('max-power-consumption', data);
        };
        Module._getCachedMaxConsumption = function() {
            return kafe.storage.getSessionItem('max-power-consumption');
        };
        Module._startPlatformsConsumptionLoop = function() {
            Module._powerRefreshTimer = setInterval(function() {
                App.PowerConsumptionServices.UpdateConsumptionValues();
            }, Module._powerRefreshInterval);
        };
        Module._stopPlatformsConsumptionLoop = function() {
            clearInterval(Module._powerRefreshTimer);
        };

        Module._getPowerScale = function(){
            var _psu = App.MonitorServices.FindComponents(function(component) {
                return component.type === 'psu';
            });

            if( _psu && _psu.length > 0 )
            {
                return _psu[0].powerScale;
            }

            return 0;
        };

        Module._getChartSettings = function(legend, scale) {

            var _settings;
            var _maxScale = scale.max + 100;
            var _minScale = scale.min - 100 > 0 ? scale.min -100 : 0;

            _settings = {
                xaxis: {
                    mode: 'time', ticks: 5,
                    tickFormatter: function(val, axis) {
                        return kafe.date.format('%k:%I %p', new Date(val));
                    }
                },
                yaxis: {
                    min: _minScale,
                    max: _maxScale,
                    ticks: 3,
                    tickFormatter: function(val, axis) {
                        return val + " W";
                    }
                    //ticks: [[0, '0 W'], [_halfScale, _halfScale + ' W'], [_maxScale, _maxScale + ' W']]
                }
            };

            if ( !!legend){
                _settings.legend = { container: legend, noColumns:2 };
            }else{
                _settings.legend = { show: false };
            }

            return _settings;

        };
        Module._getPlatformConsumption = function(platform, psuNum) {

            val = App.MonitorServices.FindComponents(function(component) {
                return component.type === 'psu' && component.id == "psu-" + psuNum;
            }, platform);

            return  val[0].consumption.powerOut;

        };

        Module._getPlatformIndex = function(name, array)
        {
            for(i = 0; i < array.length; i++)
            {
                if(array[i].label == name)
                {
                    return i;
                }
            }

            return "Not Found";
        };
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('security:logout', function(e, data) {

                Module._stopPlatformsConsumptionLoop();
                Module._clearCachedConsumption();

            })
            .on('monitor:load', function(e, data) {

                // TODO: Linked to Store until a power consumption service is created.
                App.PowerConsumptionServices.UpdateConsumptionValues(true);
                //Module._startPlatformsConsumptionLoop();

            })
            .on('monitor:update', function(e, data) {

                // TODO: Linked to Store until a power consumption service is created.
                App.PowerConsumptionServices.UpdateConsumptionValues();

            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {


    };


    /*- Public methods ---------------------------------------------------------------*/
    App.PowerConsumptionServices = {};

    App.PowerConsumptionServices.GetChartSettings = function(legend, type) {
        return Module._getChartSettings(legend, type);
    };
    App.PowerConsumptionServices.GetConsumption = function() {
        return Module._getCachedConsumption();
    };
    App.PowerConsumptionServices.GetMaxConsumption = function() {
        return Module._getCachedMaxConsumption();
    };
    App.PowerConsumptionServices.UpdateConsumptionValues = function(load) {

        /*
         [
         {
         "platform" : "id",
         "components" : [
         "psu" : "id",
         "data" : [
         [ "DateTime", "powerOut" ],
         [ "DateTime", "powerOut" ],
         [...]
         ]
         ]
         }
         ]
         */

        var _consumption = !_.isEmpty(Module._getCachedConsumption()) ? Module._getCachedConsumption() : [];

        var _maxConsumption = typeof(Module._getCachedMaxConsumption()) === 'undefined' ? { single : [], multi : { min: 3000, max: 0} } : Module._getCachedMaxConsumption();

        var _maxSum = [];
        var _minSum = [];
        $.each(App.MonitorServices.FindComponents(function(component) {
            return component.type === 'platform';
        }), function(i, val) {

            var sum = 0;
            var _platform = new App.Models.ComponentViewModel(val);

            if (_.isEmpty(_consumption[3]))
            {
                _consumption[3] = [];

            }

            var index = Module._getPlatformIndex(_platform.description.name, _consumption[3]);

            var psuGroup = App.MonitorServices.FindComponents(function(component) {
                var componentModel = new App.Models.ComponentViewModel(component);

                return componentModel.type === 'psu-group';
            });

            $.each(psuGroup[0].components, function(key, psu){
                var psuNum = psu.number;
                if (_.isEmpty(_consumption[psuNum]))
                {
                    _consumption[psuNum] = [];
                }
                if (_.isEmpty(_consumption[psuNum][_platform.description.number])) {
                    _consumption[psuNum][_platform.description.number] = { label: "PSU " + psuNum, data: [] };
                }

                power = Module._getPlatformConsumption(_platform, psuNum);
                sum += power;
                                
                /* If we lost signal for more then 10sec, insert points to 0 between last and new point so 
                   graphic will reflect lost of power instead of making a straight line between previous 
                   and current valid point. */
                var CurrTime = Date.now();
                var MinTmBetweenPts = Module._powerRefreshInterval * 2;
                var OffsetForPatchPts = Module._powerRefreshInterval / 5;
                if( (_consumption[psuNum][_platform.description.number].data.length > 1 ) && (CurrTime > MinTmBetweenPts))
                {
                  var LastPntTm = _consumption[psuNum][_platform.description.number].data[_consumption[psuNum][_platform.description.number].data.length-1][0];
                  var LastPwr = _consumption[psuNum][_platform.description.number].data[_consumption[psuNum][_platform.description.number].data.length-1][1];
                  if(LastPntTm < (CurrTime - MinTmBetweenPts)){
                    if(LastPwr > 0){/*if last good point was not 0, add one 1sec after it*/
                      _consumption[psuNum][_platform.description.number].data.push([LastPntTm + OffsetForPatchPts , 0 ]);
                      if (_consumption[psuNum][_platform.description.number].data.length > Module._statsMaxRange) {
                        _consumption[psuNum][_platform.description.number].data = _consumption[psuNum][_platform.description.number].data.slice(1);
                      }
                    }
                    if(power > 0){/*if new good point is not 0, add one 1sec before it*/
                      _consumption[psuNum][_platform.description.number].data.push([CurrTime - OffsetForPatchPts , 0 ]);
                      if (_consumption[psuNum][_platform.description.number].data.length > Module._statsMaxRange) {
                        _consumption[psuNum][_platform.description.number].data = _consumption[psuNum][_platform.description.number].data.slice(1);
                      }
                    }
                  }
                }
                _consumption[psuNum][_platform.description.number].data.push([ CurrTime, power ]);

                if(power > _maxVal)
                {
                    _maxVal = power;
                }

                if (_consumption[psuNum][_platform.description.number].data.length > Module._statsMaxRange) {
                    _consumption[psuNum][_platform.description.number].data = _consumption[psuNum][_platform.description.number].data.slice(1);
                }
            });

            if (index == "Not Found")
            {
                _consumption[3].push( { label: _platform.description.name, data: [] });
                _consumption[3][_consumption[3].length - 1].data.push([ Date.now(), sum ]);
                index = _consumption[3].length - 1;
            }
            else
            {
                _consumption[3][index].data.push([ Date.now(), sum ]);
                if (_consumption[3][index].data.length > Module._statsMaxRange) {
                    _consumption[3][index].data = _consumption[3][index].data.slice(1);
                }

            }

            var _maxVal = 0;
            var _minVal = 3000;
            $.each(psuGroup[0].components, function(key, psu){
                $.each( _consumption[psu.number][_platform.description.number].data, function(key, value){

                    if( value[1] > _maxVal)
                    {
                        _maxVal = value[1];
                    }

                    if( value[1] < _minVal)
                    {
                        _minVal = value[1];
                    }
                });
            });

            _maxConsumption.single[_platform.description.number] = { min: _minVal, max: _maxVal};


            _maxSum[_platform.description.number] = 0;
            _minSum[_platform.description.number] = 3000;
            $.each( _consumption[3][index].data, function(key, value){
                if( value[1] > _maxSum[_platform.description.number])
                {
                    _maxSum[_platform.description.number] = value[1];
                }

                if( value[1] < _minSum[_platform.description.number])
                {
                    _minSum[_platform.description.number] = value[1];
                }
            });



        });


        _maxConsumption.multi.max = 0;
        _maxConsumption.multi.min = 3000;
        $.each(_maxSum, function(key, value){
            if(value > _maxConsumption.multi.max)
            {
                _maxConsumption.multi.max = value;
            }
        });

        $.each(_minSum, function(key, value){
            if(value < _maxConsumption.multi.min)
            {
                _maxConsumption.multi.min = value;
            }
        });

        App.dom.document.trigger('power-consumption:' + (load ? 'load' : 'update'), { series: _consumption, axis: _maxConsumption});
        Module._cacheConsumption(_consumption);
        Module._cacheMaxConsumption(_maxConsumption);

        /* TODO: Async, not usable unless a power consumption service is created...
         App.Service.Get(Module.Services.GetConsumptionValues, function(data) {
         Module._cacheConsumption(data);
         App.dom.document.trigger('monitor:' + (load ? 'load' : 'update'), data);
         });
         */
    };



    $(function() {
        Module.Cache();
        if (App.SecurityService.IsAuthenticated()) {
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // TRENDS SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // private vars
        Module._sensorsRefreshInterval = 5000;
        Module._sensorsRefreshTimer = null;
        //Module._statsMaxRange = (3600 * 1000) / Module._sensorsRefreshInterval;
        //Module._statsMaxValue = 1200;

        Module.Services = {};

        Module.Services.GetAvailableSensors = '/v2/Platform/{0}/Node/{1}/Sensors';
        Module.Services.GetMonitoredSensors = '/v2/Platform/{0}/Node/{1}/MonitoredSensors';
        Module.Services.GetMonitoredSensorValue = '/v2/Platform/{0}/Node/{1}/Sensor/{2}/Value';
        Module.Services.SetMonitoredSensors = '/v2/Platform/{0}/Node/{1}/Sensors';
        Module.Services.SetMonitoredSensor = '/v2/Platform/{0}/Node/{1}/Sensor/{2}/Monitor';


        // private functions
        Module._cacheMonitoredSensors = function(data) {
            kafe.storage.setSessionItem('monitored-sensors', data);
        };
        Module._getCachedMonitoredSensors = function() {
            return kafe.storage.getSessionItem('monitored-sensors');
        };
        Module._clearCachedMonitoredSensors = function() {
            kafe.storage.removeSessionItem('monitored-sensors');
        };
        Module._startMonitoredSensorsLoop = function() {
            Module._sensorsRefreshTimer = setInterval(function() {
                App.TrendsServices.UpdateMonitoredSensors();
            }, Module._sensorsRefreshInterval);
        };
        Module._stopMonitoredSensorsLoop = function() {
            clearInterval(Module._sensorsRefreshTimer);
        };

        //Module._getChartSettings = function(legend) {
        //
        //	var _settings = {
        //		xaxis: {
        //			font: { color:'#0063ab' },
        //			mode: 'time', tickSize: [5, "minute"],
        //			tickFormatter: function(val, axis) {
        //				return kafe.date.format('%k:%I %p', new Date(val));
        //			}
        //		},
        //		yaxis: {
        //			ticks: [[0, '0 W'], [600, '600 W'], [1200, '1200 W']]
        //		}
        //	};
        //
        //	if (!!legend) {
        //		_settings.legend = { container: legend, noColumns: 2 };
        //	} else {
        //		_settings.legend = { show: false };
        //	}
        //
        //	return _settings;
        //
        //};
        //Module._getMonitoredSensors = function(platform) {
        //
        //	var _sum = 0;
        //	$.each(App.MonitorServices.FindComponents(function(component) {
        //		return component.type === 'psu';
        //	}, platform), function(i, val) {
        //		// TEMP
        //		_sum += val.consumption.powerOut + Math.floor((Math.random() * 600));
        //	});
        //	return _sum;
        //
        //};

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('security:logout', function(e, data) {

            })
            .on('monitored-sensors:load', function(e, data) {


            })
            .on('monitored-sensors:update', function(e, data) {


            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

    };


    /*- Public methods ---------------------------------------------------------------*/
    App.TrendsServices = {};

    $(function() {
        Module.Cache();
        if (App.SecurityService.IsAuthenticated()) {
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // NETWORK CONFIGURATION SERVICES
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};

    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {
        Module.Services = {
            NodeMngmtNetwork:   '/v2/Platform/{0}/Node/{1}/ManagementNetwork',
            SharedIp:           '/v2/Platform/{0}/SharedIp'
        };
    };

/*- Public methods ---------------------------------------------------------------*/
    App.NetworkConfigurationServices = {};

    App.NetworkConfigurationServices.GetNodeMngmtNetwork = function(platform, node) {
        App.Service.Get(Module.Services.NodeMngmtNetwork.format(platform, node), App.SecurityService.GetSessionToken(), null, function(data) {
            App.dom.document.trigger('network-configuration:node-info:loaded', {platform: platform, node: node, data: data});
        }, function(jqXHR, textStatus, errorThrown) {
            App.dom.document.trigger('network-configuration:node-info:error', {platform: platform, node: node});
            console.log(App.env.services + Module.Services.NodeMngmtNetwork.format(platform, node), textStatus, errorThrown, jqXHR);
            //App.Service._manageCallErrors(jqXHR.responseJSON);
        });
    };

    App.NetworkConfigurationServices.SetNodeMngmtNetwork = function(platform, node, params) {
        App.Service.Post(Module.Services.NodeMngmtNetwork.format(platform, node), App.SecurityService.GetSessionToken(), params, function(data) {
            App.dom.document.trigger('network-configuration:node-info:updated', {platform: platform, node: node});
        }, function(jqXHR, textStatus, errorThrown) {
            App.dom.document.trigger('network-configuration:node-info:error', {platform: platform, node: node});
            console.log(App.env.services + Module.Services.NodeMngmtNetwork.format(platform, node), textStatus, errorThrown, jqXHR);
            //App.Service._manageCallErrors(jqXHR.responseJSON);
        });
    };

    App.NetworkConfigurationServices.GetSharedIp = function(platform) {
        App.Service.Get(Module.Services.SharedIp.format(platform), App.SecurityService.GetSessionToken(), null, function(data) {
            App.dom.document.trigger('network-configuration:shared-ip:loaded', {platform: platform, data: data});
        }, function(jqXHR, textStatus, errorThrown) {
            App.dom.document.trigger('network-configuration:shared-ip:error', {platform:platform});
            console.log(App.env.services + Module.Services.SharedIp.format(platform), textStatus, errorThrown, jqXHR);
            App.Service._manageCallErrors(jqXHR.responseJSON);
        });
    };

    App.NetworkConfigurationServices.SetSharedIp = function(platform, params) {
        App.Service.Post(Module.Services.SharedIp.format(platform), App.SecurityService.GetSessionToken(), params, function(data) {
            App.dom.document.trigger('network-configuration:shared-ip:updated', {platform: platform});
        }, function(jqXHR, textStatus, errorThrown) {
            App.dom.document.trigger('network-configuration:shared-ip:error', {platform:platform});
            console.log(App.env.services + Module.Services.SharedIp.format(platform), textStatus, errorThrown, jqXHR);
            App.Service._manageCallErrors(jqXHR.responseJSON);
        });
    };

   $(function() {
        Module.Cache();
    });

})(window.kafe, window.kontron);


/*------------------------------------------------------------------------------------//
// BASE BEHAVIORS
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

	var
		$ = kafe.dependencies.jQuery,
		_ = kafe.dependencies.LoDash,
		Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

		// selectors
		Module.$toggles = App.dom.has('behavior', 'toggle');

		// attributes listing
		Module._adjustBaseAttributes = function() {
			$('.base-attributes').each(function(i, val) {

				var _names = $('.name', this);
				var _maxOuterWidth = Math.max.apply(Math, _names.map(function(){ return $(this).outerWidth(); }).get());

				_names.each(function() {
					var $this = $(this);
					$this.width( _maxOuterWidth - ($this.outerWidth() - $this.width()) );
				});

			});
		};

		// columns
		Module._adjustBaseColumns = function() {
			$('.base-columns').each(function(i, val) {

				kafe.style.equalHeight($(this).find('.col'));

			});
		};

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {

		// toggles
		Module.$toggles.each(function() {

			var _context = $(this),
				_links = $('[data-toggle-link]', _context),
				_contents = $('[data-toggle-content]', _context);

			_context.on('click', '[data-toggle-link]', function(e) {
				e.preventDefault();
				var _selected = $(this).data('toggle-link');
				_links.removeClass('on').filter('[data-toggle-link="' + _selected + '"]').addClass('on');
				_contents.removeClass('on').filter('[data-toggle-content="' + _selected + '"]').addClass('on');
				App.dom.document.trigger('toggle:' + _context.data('toggle-group'), _selected);
			});

		});

	};


	/*- Listen for triggers ----------------------------------------------------------*/
	Module.Listen = function() {


	};


	/*- To execute on start ----------------------------------------------------------*/
	Module.Start = function() {
		

	};


	/*- Public methods ---------------------------------------------------------------*/
	App.BaseListing = {};

	// attributes listing
	App.BaseListing.AlignAttributes = function() {
		Module._adjustBaseAttributes();
	};

	// columns
	App.BaseListing.AlignColumns = function() {
		Module._adjustBaseColumns();
	};





	$(function() {
		Module.Cache();
		Module.Bind();
		Module.Listen();
		Module.Start();
	});

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
// FORM UTILS
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

	var
		$ = kafe.dependencies.jQuery,
		_ = kafe.dependencies.LoDash,
		Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

		// selectors
		Module.$forms = function() { return App.dom.has('behavior', 'base-form'); };

		// private functions

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {

		// custom-select
		$('select.base-select.simple').customSelect({ customClass:'base-select' });

		// chosen
		Module.$forms().find('select.base-select.with-search').chosen({ width:'100%', allow_single_deselect:true });
		$('select.base-select.with-search:not(.chosen-container)').chosen();

		// input mask
		/**
		$('input[data-mask]').each(function() {
			var
				$this = $(this),
				mask  = $this.data('mask')
			;

			switch (mask) {
				case 'phone':       $this.inputmask('(999) 999-9999'); break;
				case 'phone-ext':   $this.inputmask('(999) 999-9999 [ext: 99999]'); break;
				case 'date':        $this.inputmask('yyyy-mm-dd'); break;
				case 'time':        $this.inputmask('hh:mm:ss'); break;
				case 'postalcode':  $this.inputmask('A9A 9A9'); break;
				case 'numeric':     $this.inputmask('non-negative-decimal', {radixPoint:',', digits:2 }); break;
				case 'numeric-int': $this.inputmask('9', {repeat:6, greedy:false }); break;
				default:            $this.inputmask(mask); break;
			}
		});
		/**/

	};


	/*- Public methods ---------------------------------------------------------------*/
	App.BaseForm = {};

	App.BaseForm.ValidateFields = function(context, success, error) {

		var _fields = $('input, textarea, select', context);
		var _isValid = true;

		_fields.each(function() {
			var $input = $(this);

			if ( $input.hasClass('required') ) {
				if ( $input.hasClass('radio') ) {
					if (_fields.filter('[name="' + $input.attr('name') + '"]:checked').length < 1) {
						$input.addClass('error');
						_isValid = false;
					}
				} else if ( !App.Utils.InputIsNotEmpty($input) ) {
					$input.addClass('error').next('span.base-select').addClass('error').trigger('update').trigger('chosen:updated');
					_isValid = false;
				} else {
					$input.removeClass('error').next('span.base-select').removeClass('error').trigger('update').trigger('chosen:updated');
				}
			}
			if ( $input.hasClass('hex-color') && !(/^#([A-Fa-f0-9]{6})$/.test($input.val())) ) {
				$input.addClass('error');
				_isValid = false;
			}
			if ( $input.hasClass('compare') && $input.val() !== _fields.filter('[name="' + $input.data('compare-to') + '"]').val() ){
				$input.addClass('error');
				_isValid = false;
			}
			if( $input.hasClass('match') ){	
				if( !($input.val().match($input.data('match-with'))) )
				{
                    $input.addClass('error');
                    _isValid = false;
				}
			} 
			if (_isValid) {
				$input.removeClass('error').next('span.base-select').removeClass('error').trigger('update').trigger('chosen:updated');
			}
		});

		if (_isValid) {
			_fields.filter('.Placeholder').val('');
			App.BaseForm.ClearValidations(context);
			success();
		} else {
			if (!!error) {
				error();
			}
		}

	};
	App.BaseForm.ClearValidations = function(context) {

		var _fields = $('input, textarea, select', context);
		$(context).find('summary').hide();
		_fields.removeClass('error').next('span.base-select').removeClass('error').trigger('update').trigger('chosen:updated');

	};
	App.BaseForm.BlockInteractions = function(context) {

		$('input, select, textarea, button', context).attr('disabled', 'disabled').trigger('update').trigger('chosen:updated').on('click.process', function(e) {
			e.preventDefault();
		});

	};
	App.BaseForm.ReleaseInteractions = function(context) {

		$('input, select, textarea, button', context).removeAttr('disabled').trigger('update').trigger('chosen:updated').off('click.process');

	};



	

	$(function() {
		Module.Cache();
		Module.Bind();
	});

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
// BREADCRUMB UTILS
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

	var
		$ = kafe.dependencies.jQuery,
		_ = kafe.dependencies.LoDash,
		Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

		// private vars
		Module.$breadcrumb = App.dom.has('behavior', 'breadcrumb');

		// private functions
		Module._buildPath = function(path) {

			var _output = '';
			$.each(path, function(i, val) {
				var _item = val.text;
				if (i === path.length - 1 || _.isEmpty(val.url)) {
					_item = '<li>' + _item + '</li>';
				} else {
					_item = '<li><a href="' + val.url + '">' + _item + '</a></li>';
				}
				_output += _item;
			});

			Module.$breadcrumb.find('li:not(.root)').remove().end().append(_output);
		};

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {


	};


	/*- Public methods ---------------------------------------------------------------*/
	App.BaseBreadcrumb = {};

	App.BaseBreadcrumb.SetPath = function(path) {
		Module._buildPath(path);
	};



	

	$(function() {
		Module.Cache();
		Module.Bind();
	});

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
// LISTING UTILS
//------------------------------------------------------------------------------------*/

/* Javascript plotting library for jQuery, version 0.8.2.

Copyright (c) 2007-2013 IOLA and Ole Laursen.
Licensed under the MIT license.

*/

// first an inline dependency, jquery.colorhelpers.js, we inline it here
// for convenience

/* Plugin for jQuery for working with colors.
 *
 * Version 1.1.
 *
 * Inspiration from jQuery color animation plugin by John Resig.
 *
 * Released under the MIT license by Ole Laursen, October 2009.
 *
 * Examples:
 *
 *   $.color.parse("#fff").scale('rgb', 0.25).add('a', -0.5).toString()
 *   var c = $.color.extract($("#mydiv"), 'background-color');
 *   console.log(c.r, c.g, c.b, c.a);
 *   $.color.make(100, 50, 25, 0.4).toString() // returns "rgba(100,50,25,0.4)"
 *
 * Note that .scale() and .add() return the same modified object
 * instead of making a new one.
 *
 * V. 1.1: Fix error handling so e.g. parsing an empty string does
 * produce a color rather than just crashing.
 */
(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return"rgb("+[o.r,o.g,o.b].join(",")+")"}else{return"rgba("+[o.r,o.g,o.b,o.a].join(",")+")"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=""&&c!="transparent")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),"body"));if(c=="rgba(0, 0, 0, 0)")c="transparent";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name=="transparent")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);

// the actual Flot code
(function($) {

	// Cache the prototype hasOwnProperty for faster access

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	///////////////////////////////////////////////////////////////////////////
	// The Canvas object is a wrapper around an HTML5 <canvas> tag.
	//
	// @constructor
	// @param {string} cls List of classes to apply to the canvas.
	// @param {element} container Element onto which to append the canvas.
	//
	// Requiring a container is a little iffy, but unfortunately canvas
	// operations don't work unless the canvas is attached to the DOM.

	function Canvas(cls, container) {

		var element = container.children("." + cls)[0];

		if (element == null) {

			element = document.createElement("canvas");
			element.className = cls;

			$(element).css({ direction: "ltr", position: "absolute", left: 0, top: 0 })
				.appendTo(container);

			// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas

			if (!element.getContext) {
				if (window.G_vmlCanvasManager) {
					element = window.G_vmlCanvasManager.initElement(element);
				} else {
					throw new Error("Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.");
				}
			}
		}

		this.element = element;

		var context = this.context = element.getContext("2d");

		// Determine the screen's ratio of physical to device-independent
		// pixels.  This is the ratio between the canvas width that the browser
		// advertises and the number of pixels actually present in that space.

		// The iPhone 4, for example, has a device-independent width of 320px,
		// but its screen is actually 640px wide.  It therefore has a pixel
		// ratio of 2, while most normal devices have a ratio of 1.

		var devicePixelRatio = window.devicePixelRatio || 1,
			backingStoreRatio =
				context.webkitBackingStorePixelRatio ||
				context.mozBackingStorePixelRatio ||
				context.msBackingStorePixelRatio ||
				context.oBackingStorePixelRatio ||
				context.backingStorePixelRatio || 1;

		this.pixelRatio = devicePixelRatio / backingStoreRatio;

		// Size the canvas to match the internal dimensions of its container

		this.resize(container.width(), container.height());

		// Collection of HTML div layers for text overlaid onto the canvas

		this.textContainer = null;
		this.text = {};

		// Cache of text fragments and metrics, so we can avoid expensively
		// re-calculating them when the plot is re-rendered in a loop.

		this._textCache = {};
	}

	// Resizes the canvas to the given dimensions.
	//
	// @param {number} width New width of the canvas, in pixels.
	// @param {number} width New height of the canvas, in pixels.

	Canvas.prototype.resize = function(width, height) {

		if (width <= 0 || height <= 0) {
			throw new Error("Invalid dimensions for plot, width = " + width + ", height = " + height);
		}

		var element = this.element,
			context = this.context,
			pixelRatio = this.pixelRatio;

		// Resize the canvas, increasing its density based on the display's
		// pixel ratio; basically giving it more pixels without increasing the
		// size of its element, to take advantage of the fact that retina
		// displays have that many more pixels in the same advertised space.

		// Resizing should reset the state (excanvas seems to be buggy though)

		if (this.width != width) {
			element.width = width * pixelRatio;
			element.style.width = width + "px";
			this.width = width;
		}

		if (this.height != height) {
			element.height = height * pixelRatio;
			element.style.height = height + "px";
			this.height = height;
		}

		// Save the context, so we can reset in case we get replotted.  The
		// restore ensure that we're really back at the initial state, and
		// should be safe even if we haven't saved the initial state yet.

		context.restore();
		context.save();

		// Scale the coordinate space to match the display density; so even though we
		// may have twice as many pixels, we still want lines and other drawing to
		// appear at the same size; the extra pixels will just make them crisper.

		context.scale(pixelRatio, pixelRatio);
	};

	// Clears the entire canvas area, not including any overlaid HTML text

	Canvas.prototype.clear = function() {
		this.context.clearRect(0, 0, this.width, this.height);
	};

	// Finishes rendering the canvas, including managing the text overlay.

	Canvas.prototype.render = function() {

		var cache = this._textCache;

		// For each text layer, add elements marked as active that haven't
		// already been rendered, and remove those that are no longer active.

		for (var layerKey in cache) {
			if (hasOwnProperty.call(cache, layerKey)) {

				var layer = this.getTextLayer(layerKey),
					layerCache = cache[layerKey];

				layer.hide();

				for (var styleKey in layerCache) {
					if (hasOwnProperty.call(layerCache, styleKey)) {
						var styleCache = layerCache[styleKey];
						for (var key in styleCache) {
							if (hasOwnProperty.call(styleCache, key)) {

								var positions = styleCache[key].positions;

								for (var i = 0, position; position = positions[i]; i++) {
									if (position.active) {
										if (!position.rendered) {
											layer.append(position.element);
											position.rendered = true;
										}
									} else {
										positions.splice(i--, 1);
										if (position.rendered) {
											position.element.detach();
										}
									}
								}

								if (positions.length == 0) {
									delete styleCache[key];
								}
							}
						}
					}
				}

				layer.show();
			}
		}
	};

	// Creates (if necessary) and returns the text overlay container.
	//
	// @param {string} classes String of space-separated CSS classes used to
	//     uniquely identify the text layer.
	// @return {object} The jQuery-wrapped text-layer div.

	Canvas.prototype.getTextLayer = function(classes) {

		var layer = this.text[classes];

		// Create the text layer if it doesn't exist

		if (layer == null) {

			// Create the text layer container, if it doesn't exist

			if (this.textContainer == null) {
				this.textContainer = $("<div class='flot-text'></div>")
					.css({
						position: "absolute",
						top: 0,
						left: 0,
						bottom: 0,
						right: 0,
						'font-size': "smaller",
						color: "#545454"
					})
					.insertAfter(this.element);
			}

			layer = this.text[classes] = $("<div></div>")
				.addClass(classes)
				.css({
					position: "absolute",
					top: 0,
					left: 0,
					bottom: 0,
					right: 0
				})
				.appendTo(this.textContainer);
		}

		return layer;
	};

	// Creates (if necessary) and returns a text info object.
	//
	// The object looks like this:
	//
	// {
	//     width: Width of the text's wrapper div.
	//     height: Height of the text's wrapper div.
	//     element: The jQuery-wrapped HTML div containing the text.
	//     positions: Array of positions at which this text is drawn.
	// }
	//
	// The positions array contains objects that look like this:
	//
	// {
	//     active: Flag indicating whether the text should be visible.
	//     rendered: Flag indicating whether the text is currently visible.
	//     element: The jQuery-wrapped HTML div containing the text.
	//     x: X coordinate at which to draw the text.
	//     y: Y coordinate at which to draw the text.
	// }
	//
	// Each position after the first receives a clone of the original element.
	//
	// The idea is that that the width, height, and general 'identity' of the
	// text is constant no matter where it is placed; the placements are a
	// secondary property.
	//
	// Canvas maintains a cache of recently-used text info objects; getTextInfo
	// either returns the cached element or creates a new entry.
	//
	// @param {string} layer A string of space-separated CSS classes uniquely
	//     identifying the layer containing this text.
	// @param {string} text Text string to retrieve info for.
	// @param {(string|object)=} font Either a string of space-separated CSS
	//     classes or a font-spec object, defining the text's font and style.
	// @param {number=} angle Angle at which to rotate the text, in degrees.
	//     Angle is currently unused, it will be implemented in the future.
	// @param {number=} width Maximum width of the text before it wraps.
	// @return {object} a text info object.

	Canvas.prototype.getTextInfo = function(layer, text, font, angle, width) {

		var textStyle, layerCache, styleCache, info;

		// Cast the value to a string, in case we were given a number or such

		text = "" + text;

		// If the font is a font-spec object, generate a CSS font definition

		if (typeof font === "object") {
			textStyle = font.style + " " + font.variant + " " + font.weight + " " + font.size + "px/" + font.lineHeight + "px " + font.family;
		} else {
			textStyle = font;
		}

		// Retrieve (or create) the cache for the text's layer and styles

		layerCache = this._textCache[layer];

		if (layerCache == null) {
			layerCache = this._textCache[layer] = {};
		}

		styleCache = layerCache[textStyle];

		if (styleCache == null) {
			styleCache = layerCache[textStyle] = {};
		}

		info = styleCache[text];

		// If we can't find a matching element in our cache, create a new one

		if (info == null) {

			var element = $("<div></div>").html(text)
				.css({
					position: "absolute",
					'max-width': width,
					top: -9999
				})
				.appendTo(this.getTextLayer(layer));

			if (typeof font === "object") {
				element.css({
					font: textStyle,
					color: font.color
				});
			} else if (typeof font === "string") {
				element.addClass(font);
			}

			info = styleCache[text] = {
				width: element.outerWidth(true),
				height: element.outerHeight(true),
				element: element,
				positions: []
			};

			element.detach();
		}

		return info;
	};

	// Adds a text string to the canvas text overlay.
	//
	// The text isn't drawn immediately; it is marked as rendering, which will
	// result in its addition to the canvas on the next render pass.
	//
	// @param {string} layer A string of space-separated CSS classes uniquely
	//     identifying the layer containing this text.
	// @param {number} x X coordinate at which to draw the text.
	// @param {number} y Y coordinate at which to draw the text.
	// @param {string} text Text string to draw.
	// @param {(string|object)=} font Either a string of space-separated CSS
	//     classes or a font-spec object, defining the text's font and style.
	// @param {number=} angle Angle at which to rotate the text, in degrees.
	//     Angle is currently unused, it will be implemented in the future.
	// @param {number=} width Maximum width of the text before it wraps.
	// @param {string=} halign Horizontal alignment of the text; either "left",
	//     "center" or "right".
	// @param {string=} valign Vertical alignment of the text; either "top",
	//     "middle" or "bottom".

	Canvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {

		var info = this.getTextInfo(layer, text, font, angle, width),
			positions = info.positions;

		// Tweak the div's position to match the text's alignment

		if (halign == "center") {
			x -= info.width / 2;
		} else if (halign == "right") {
			x -= info.width;
		}

		if (valign == "middle") {
			y -= info.height / 2;
		} else if (valign == "bottom") {
			y -= info.height;
		}

		// Determine whether this text already exists at this position.
		// If so, mark it for inclusion in the next render pass.

		for (var i = 0, position; position = positions[i]; i++) {
			if (position.x == x && position.y == y) {
				position.active = true;
				return;
			}
		}

		// If the text doesn't exist at this position, create a new entry

		// For the very first position we'll re-use the original element,
		// while for subsequent ones we'll clone it.

		position = {
			active: true,
			rendered: false,
			element: positions.length ? info.element.clone() : info.element,
			x: x,
			y: y
		};

		positions.push(position);

		// Move the element to its final position within the container

		position.element.css({
			top: Math.round(y),
			left: Math.round(x),
			'text-align': halign	// In case the text wraps
		});
	};

	// Removes one or more text strings from the canvas text overlay.
	//
	// If no parameters are given, all text within the layer is removed.
	//
	// Note that the text is not immediately removed; it is simply marked as
	// inactive, which will result in its removal on the next render pass.
	// This avoids the performance penalty for 'clear and redraw' behavior,
	// where we potentially get rid of all text on a layer, but will likely
	// add back most or all of it later, as when redrawing axes, for example.
	//
	// @param {string} layer A string of space-separated CSS classes uniquely
	//     identifying the layer containing this text.
	// @param {number=} x X coordinate of the text.
	// @param {number=} y Y coordinate of the text.
	// @param {string=} text Text string to remove.
	// @param {(string|object)=} font Either a string of space-separated CSS
	//     classes or a font-spec object, defining the text's font and style.
	// @param {number=} angle Angle at which the text is rotated, in degrees.
	//     Angle is currently unused, it will be implemented in the future.

	Canvas.prototype.removeText = function(layer, x, y, text, font, angle) {
		if (text == null) {
			var layerCache = this._textCache[layer];
			if (layerCache != null) {
				for (var styleKey in layerCache) {
					if (hasOwnProperty.call(layerCache, styleKey)) {
						var styleCache = layerCache[styleKey];
						for (var key in styleCache) {
							if (hasOwnProperty.call(styleCache, key)) {
								var positions = styleCache[key].positions;
								for (var i = 0, position; position = positions[i]; i++) {
									position.active = false;
								}
							}
						}
					}
				}
			}
		} else {
			var positions = this.getTextInfo(layer, text, font, angle).positions;
			for (var i = 0, position; position = positions[i]; i++) {
				if (position.x == x && position.y == y) {
					position.active = false;
				}
			}
		}
	};

	///////////////////////////////////////////////////////////////////////////
	// The top-level container for the entire plot.

    function Plot(placeholder, data_, options_, plugins) {
        // data is on the form:
        //   [ series1, series2 ... ]
        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]
        // or { data: [ [x1, y1], [x2, y2], ... ], label: "some label", ... }

        var series = [],
            options = {
                // the color theme used for graphs
                colors: ["#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed"],
                legend: {
                    show: true,
                    noColumns: 1, // number of colums in legend table
                    labelFormatter: null, // fn: string -> string
                    labelBoxBorderColor: "#ccc", // border color for the little label boxes
                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph
                    position: "ne", // position of default legend container within plot
                    margin: 5, // distance from grid edge to default legend container within plot
                    backgroundColor: null, // null means auto-detect
                    backgroundOpacity: 0.85, // set to 0 to avoid background
                    sorted: null    // default to no legend sorting
                },
                xaxis: {
                    show: null, // null = auto-detect, true = always, false = never
                    position: "bottom", // or "top"
                    mode: null, // null or "time"
                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: "italic", weight: "bold", family: "sans-serif", variant: "small-caps" }
                    color: null, // base color, labels, ticks
                    tickColor: null, // possibly different color of ticks, e.g. "rgba(0,0,0,0.15)"
                    transform: null, // null or f: number -> number to transform axis
                    inverseTransform: null, // if transform is set, this should be the inverse function
                    min: null, // min. value to show, null means set automatically
                    max: null, // max. value to show, null means set automatically
                    autoscaleMargin: null, // margin in % to add if auto-setting min/max
                    ticks: null, // either [1, 3] or [[1, "a"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks
                    tickFormatter: null, // fn: number -> string
                    labelWidth: null, // size of tick labels in pixels
                    labelHeight: null,
                    reserveSpace: null, // whether to reserve space even if axis isn't shown
                    tickLength: null, // size in pixels of ticks, or "full" for whole line
                    alignTicksWithAxis: null, // axis number or null for no sync
                    tickDecimals: null, // no. of decimals, null means auto
                    tickSize: null, // number or [number, "unit"]
                    minTickSize: null // number or [number, "unit"]
                },
                yaxis: {
                    autoscaleMargin: 0.02,
                    position: "left" // or "right"
                },
                xaxes: [],
                yaxes: [],
                series: {
                    points: {
                        show: false,
                        radius: 3,
                        lineWidth: 2, // in pixels
                        fill: true,
                        fillColor: "#ffffff",
                        symbol: "circle" // or callback
                    },
                    lines: {
                        // we don't put in show: false so we can see
                        // whether lines were actively disabled
                        lineWidth: 2, // in pixels
                        fill: false,
                        fillColor: null,
                        steps: false
                        // Omit 'zero', so we can later default its value to
                        // match that of the 'fill' option.
                    },
                    bars: {
                        show: false,
                        lineWidth: 2, // in pixels
                        barWidth: 1, // in units of the x axis
                        fill: true,
                        fillColor: null,
                        align: "left", // "left", "right", or "center"
                        horizontal: false,
                        zero: true
                    },
                    shadowSize: 3,
                    highlightColor: null
                },
                grid: {
                    show: true,
                    aboveData: false,
                    color: "#545454", // primary color used for outline and labels
                    backgroundColor: null, // null for transparent, else color
                    borderColor: null, // set if different from the grid color
                    tickColor: null, // color for the ticks, e.g. "rgba(0,0,0,0.15)"
                    margin: 0, // distance from the canvas edge to the grid
                    labelMargin: 5, // in pixels
                    axisMargin: 8, // in pixels
                    borderWidth: 2, // in pixels
                    minBorderMargin: null, // in pixels, null means taken from points radius
                    markings: null, // array of ranges or fn: axes -> array of ranges
                    markingsColor: "#f4f4f4",
                    markingsLineWidth: 2,
                    // interactive stuff
                    clickable: false,
                    hoverable: false,
                    autoHighlight: true, // highlight in case mouse is near
                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item
                },
                interaction: {
                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow
                },
                hooks: {}
            },
        surface = null,     // the canvas for the plot itself
        overlay = null,     // canvas for interactive stuff on top of plot
        eventHolder = null, // jQuery object that events should be bound to
        ctx = null, octx = null,
        xaxes = [], yaxes = [],
        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},
        plotWidth = 0, plotHeight = 0,
        hooks = {
            processOptions: [],
            processRawData: [],
            processDatapoints: [],
            processOffset: [],
            drawBackground: [],
            drawSeries: [],
            draw: [],
            bindEvents: [],
            drawOverlay: [],
            shutdown: []
        },
        plot = this;

        // public functions
        plot.setData = setData;
        plot.setupGrid = setupGrid;
        plot.draw = draw;
        plot.getPlaceholder = function() { return placeholder; };
        plot.getCanvas = function() { return surface.element; };
        plot.getPlotOffset = function() { return plotOffset; };
        plot.width = function () { return plotWidth; };
        plot.height = function () { return plotHeight; };
        plot.offset = function () {
            var o = eventHolder.offset();
            o.left += plotOffset.left;
            o.top += plotOffset.top;
            return o;
        };
        plot.getData = function () { return series; };
        plot.getAxes = function () {
            var res = {}, i;
            $.each(xaxes.concat(yaxes), function (_, axis) {
                if (axis)
                    res[axis.direction + (axis.n != 1 ? axis.n : "") + "axis"] = axis;
            });
            return res;
        };
        plot.getXAxes = function () { return xaxes; };
        plot.getYAxes = function () { return yaxes; };
        plot.c2p = canvasToAxisCoords;
        plot.p2c = axisToCanvasCoords;
        plot.getOptions = function () { return options; };
        plot.highlight = highlight;
        plot.unhighlight = unhighlight;
        plot.triggerRedrawOverlay = triggerRedrawOverlay;
        plot.pointOffset = function(point) {
            return {
                left: parseInt(xaxes[axisNumber(point, "x") - 1].p2c(+point.x) + plotOffset.left, 10),
                top: parseInt(yaxes[axisNumber(point, "y") - 1].p2c(+point.y) + plotOffset.top, 10)
            };
        };
        plot.shutdown = shutdown;
        plot.destroy = function () {
            shutdown();
            placeholder.removeData("plot").empty();

            series = [];
            options = null;
            surface = null;
            overlay = null;
            eventHolder = null;
            ctx = null;
            octx = null;
            xaxes = [];
            yaxes = [];
            hooks = null;
            highlights = [];
            plot = null;
        };
        plot.resize = function () {
        	var width = placeholder.width(),
        		height = placeholder.height();
            surface.resize(width, height);
            overlay.resize(width, height);
        };

        // public attributes
        plot.hooks = hooks;

        // initialize
        initPlugins(plot);
        parseOptions(options_);
        setupCanvases();
        setData(data_);
        setupGrid();
        draw();
        bindEvents();


        function executeHooks(hook, args) {
            args = [plot].concat(args);
            for (var i = 0; i < hook.length; ++i)
                hook[i].apply(this, args);
        }

        function initPlugins() {

            // References to key classes, allowing plugins to modify them

            var classes = {
                Canvas: Canvas
            };

            for (var i = 0; i < plugins.length; ++i) {
                var p = plugins[i];
                p.init(plot, classes);
                if (p.options)
                    $.extend(true, options, p.options);
            }
        }

        function parseOptions(opts) {

            $.extend(true, options, opts);

            // $.extend merges arrays, rather than replacing them.  When less
            // colors are provided than the size of the default palette, we
            // end up with those colors plus the remaining defaults, which is
            // not expected behavior; avoid it by replacing them here.

            if (opts && opts.colors) {
            	options.colors = opts.colors;
            }

            if (options.xaxis.color == null)
                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();
            if (options.yaxis.color == null)
                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();

            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility
                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;
            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility
                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;

            if (options.grid.borderColor == null)
                options.grid.borderColor = options.grid.color;
            if (options.grid.tickColor == null)
                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();

            // Fill in defaults for axis options, including any unspecified
            // font-spec fields, if a font-spec was provided.

            // If no x/y axis options were provided, create one of each anyway,
            // since the rest of the code assumes that they exist.

            var i, axisOptions, axisCount,
                fontSize = placeholder.css("font-size"),
                fontSizeDefault = fontSize ? +fontSize.replace("px", "") : 13,
                fontDefaults = {
                    style: placeholder.css("font-style"),
                    size: Math.round(0.8 * fontSizeDefault),
                    variant: placeholder.css("font-variant"),
                    weight: placeholder.css("font-weight"),
                    family: placeholder.css("font-family")
                };

            axisCount = options.xaxes.length || 1;
            for (i = 0; i < axisCount; ++i) {

                axisOptions = options.xaxes[i];
                if (axisOptions && !axisOptions.tickColor) {
                    axisOptions.tickColor = axisOptions.color;
                }

                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);
                options.xaxes[i] = axisOptions;

                if (axisOptions.font) {
                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);
                    if (!axisOptions.font.color) {
                        axisOptions.font.color = axisOptions.color;
                    }
                    if (!axisOptions.font.lineHeight) {
                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);
                    }
                }
            }

            axisCount = options.yaxes.length || 1;
            for (i = 0; i < axisCount; ++i) {

                axisOptions = options.yaxes[i];
                if (axisOptions && !axisOptions.tickColor) {
                    axisOptions.tickColor = axisOptions.color;
                }

                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);
                options.yaxes[i] = axisOptions;

                if (axisOptions.font) {
                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);
                    if (!axisOptions.font.color) {
                        axisOptions.font.color = axisOptions.color;
                    }
                    if (!axisOptions.font.lineHeight) {
                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);
                    }
                }
            }

            // backwards compatibility, to be removed in future
            if (options.xaxis.noTicks && options.xaxis.ticks == null)
                options.xaxis.ticks = options.xaxis.noTicks;
            if (options.yaxis.noTicks && options.yaxis.ticks == null)
                options.yaxis.ticks = options.yaxis.noTicks;
            if (options.x2axis) {
                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);
                options.xaxes[1].position = "top";
            }
            if (options.y2axis) {
                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);
                options.yaxes[1].position = "right";
            }
            if (options.grid.coloredAreas)
                options.grid.markings = options.grid.coloredAreas;
            if (options.grid.coloredAreasColor)
                options.grid.markingsColor = options.grid.coloredAreasColor;
            if (options.lines)
                $.extend(true, options.series.lines, options.lines);
            if (options.points)
                $.extend(true, options.series.points, options.points);
            if (options.bars)
                $.extend(true, options.series.bars, options.bars);
            if (options.shadowSize != null)
                options.series.shadowSize = options.shadowSize;
            if (options.highlightColor != null)
                options.series.highlightColor = options.highlightColor;

            // save options on axes for future reference
            for (i = 0; i < options.xaxes.length; ++i)
                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];
            for (i = 0; i < options.yaxes.length; ++i)
                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];

            // add hooks from options
            for (var n in hooks)
                if (options.hooks[n] && options.hooks[n].length)
                    hooks[n] = hooks[n].concat(options.hooks[n]);

            executeHooks(hooks.processOptions, [options]);
        }

        function setData(d) {
            series = parseData(d);
            fillInSeriesOptions();
            processData();
        }

        function parseData(d) {
            var res = [];
            for (var i = 0; i < d.length; ++i) {
                var s = $.extend(true, {}, options.series);

                if (d[i].data != null) {
                    s.data = d[i].data; // move the data instead of deep-copy
                    delete d[i].data;

                    $.extend(true, s, d[i]);

                    d[i].data = s.data;
                }
                else
                    s.data = d[i];
                res.push(s);
            }

            return res;
        }

        function axisNumber(obj, coord) {
            var a = obj[coord + "axis"];
            if (typeof a == "object") // if we got a real axis, extract number
                a = a.n;
            if (typeof a != "number")
                a = 1; // default to first axis
            return a;
        }

        function allAxes() {
            // return flat array without annoying null entries
            return $.grep(xaxes.concat(yaxes), function (a) { return a; });
        }

        function canvasToAxisCoords(pos) {
            // return an object with x/y corresponding to all used axes
            var res = {}, i, axis;
            for (i = 0; i < xaxes.length; ++i) {
                axis = xaxes[i];
                if (axis && axis.used)
                    res["x" + axis.n] = axis.c2p(pos.left);
            }

            for (i = 0; i < yaxes.length; ++i) {
                axis = yaxes[i];
                if (axis && axis.used)
                    res["y" + axis.n] = axis.c2p(pos.top);
            }

            if (res.x1 !== undefined)
                res.x = res.x1;
            if (res.y1 !== undefined)
                res.y = res.y1;

            return res;
        }

        function axisToCanvasCoords(pos) {
            // get canvas coords from the first pair of x/y found in pos
            var res = {}, i, axis, key;

            for (i = 0; i < xaxes.length; ++i) {
                axis = xaxes[i];
                if (axis && axis.used) {
                    key = "x" + axis.n;
                    if (pos[key] == null && axis.n == 1)
                        key = "x";

                    if (pos[key] != null) {
                        res.left = axis.p2c(pos[key]);
                        break;
                    }
                }
            }

            for (i = 0; i < yaxes.length; ++i) {
                axis = yaxes[i];
                if (axis && axis.used) {
                    key = "y" + axis.n;
                    if (pos[key] == null && axis.n == 1)
                        key = "y";

                    if (pos[key] != null) {
                        res.top = axis.p2c(pos[key]);
                        break;
                    }
                }
            }

            return res;
        }

        function getOrCreateAxis(axes, number) {
            if (!axes[number - 1])
                axes[number - 1] = {
                    n: number, // save the number for future reference
                    direction: axes == xaxes ? "x" : "y",
                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)
                };

            return axes[number - 1];
        }

        function fillInSeriesOptions() {

            var neededColors = series.length, maxIndex = -1, i;

            // Subtract the number of series that already have fixed colors or
            // color indexes from the number that we still need to generate.

            for (i = 0; i < series.length; ++i) {
                var sc = series[i].color;
                if (sc != null) {
                    neededColors--;
                    if (typeof sc == "number" && sc > maxIndex) {
                        maxIndex = sc;
                    }
                }
            }

            // If any of the series have fixed color indexes, then we need to
            // generate at least as many colors as the highest index.

            if (neededColors <= maxIndex) {
                neededColors = maxIndex + 1;
            }

            // Generate all the colors, using first the option colors and then
            // variations on those colors once they're exhausted.

            var c, colors = [], colorPool = options.colors,
                colorPoolSize = colorPool.length, variation = 0;

            for (i = 0; i < neededColors; i++) {

                c = $.color.parse(colorPool[i % colorPoolSize] || "#666");

                // Each time we exhaust the colors in the pool we adjust
                // a scaling factor used to produce more variations on
                // those colors. The factor alternates negative/positive
                // to produce lighter/darker colors.

                // Reset the variation after every few cycles, or else
                // it will end up producing only white or black colors.

                if (i % colorPoolSize == 0 && i) {
                    if (variation >= 0) {
                        if (variation < 0.5) {
                            variation = -variation - 0.2;
                        } else variation = 0;
                    } else variation = -variation;
                }

                colors[i] = c.scale('rgb', 1 + variation);
            }

            // Finalize the series options, filling in their colors

            var colori = 0, s;
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                // assign colors
                if (s.color == null) {
                    s.color = colors[colori].toString();
                    ++colori;
                }
                else if (typeof s.color == "number")
                    s.color = colors[s.color].toString();

                // turn on lines automatically in case nothing is set
                if (s.lines.show == null) {
                    var v, show = true;
                    for (v in s)
                        if (s[v] && s[v].show) {
                            show = false;
                            break;
                        }
                    if (show)
                        s.lines.show = true;
                }

                // If nothing was provided for lines.zero, default it to match
                // lines.fill, since areas by default should extend to zero.

                if (s.lines.zero == null) {
                    s.lines.zero = !!s.lines.fill;
                }

                // setup axes
                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, "x"));
                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, "y"));
            }
        }

        function processData() {
            var topSentry = Number.POSITIVE_INFINITY,
                bottomSentry = Number.NEGATIVE_INFINITY,
                fakeInfinity = Number.MAX_VALUE,
                i, j, k, m, length,
                s, points, ps, x, y, axis, val, f, p,
                data, format;

            function updateAxis(axis, min, max) {
                if (min < axis.datamin && min != -fakeInfinity)
                    axis.datamin = min;
                if (max > axis.datamax && max != fakeInfinity)
                    axis.datamax = max;
            }

            $.each(allAxes(), function (_, axis) {
                // init axis
                axis.datamin = topSentry;
                axis.datamax = bottomSentry;
                axis.used = false;
            });

            for (i = 0; i < series.length; ++i) {
                s = series[i];
                s.datapoints = { points: [] };

                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);
            }

            // first pass: clean and copy data
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                data = s.data;
                format = s.datapoints.format;

                if (!format) {
                    format = [];
                    // find out how to copy
                    format.push({ x: true, number: true, required: true });
                    format.push({ y: true, number: true, required: true });

                    if (s.bars.show || (s.lines.show && s.lines.fill)) {
                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));
                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });
                        if (s.bars.horizontal) {
                            delete format[format.length - 1].y;
                            format[format.length - 1].x = true;
                        }
                    }

                    s.datapoints.format = format;
                }

                if (s.datapoints.pointsize != null)
                    continue; // already filled in

                s.datapoints.pointsize = format.length;

                ps = s.datapoints.pointsize;
                points = s.datapoints.points;

                var insertSteps = s.lines.show && s.lines.steps;
                s.xaxis.used = s.yaxis.used = true;

                for (j = k = 0; j < data.length; ++j, k += ps) {
                    p = data[j];

                    var nullify = p == null;
                    if (!nullify) {
                        for (m = 0; m < ps; ++m) {
                            val = p[m];
                            f = format[m];

                            if (f) {
                                if (f.number && val != null) {
                                    val = +val; // convert to number
                                    if (isNaN(val))
                                        val = null;
                                    else if (val == Infinity)
                                        val = fakeInfinity;
                                    else if (val == -Infinity)
                                        val = -fakeInfinity;
                                }

                                if (val == null) {
                                    if (f.required)
                                        nullify = true;

                                    if (f.defaultValue != null)
                                        val = f.defaultValue;
                                }
                            }

                            points[k + m] = val;
                        }
                    }

                    if (nullify) {
                        for (m = 0; m < ps; ++m) {
                            val = points[k + m];
                            if (val != null) {
                                f = format[m];
                                // extract min/max info
                                if (f.autoscale !== false) {
                                    if (f.x) {
                                        updateAxis(s.xaxis, val, val);
                                    }
                                    if (f.y) {
                                        updateAxis(s.yaxis, val, val);
                                    }
                                }
                            }
                            points[k + m] = null;
                        }
                    }
                    else {
                        // a little bit of line specific stuff that
                        // perhaps shouldn't be here, but lacking
                        // better means...
                        if (insertSteps && k > 0
                            && points[k - ps] != null
                            && points[k - ps] != points[k]
                            && points[k - ps + 1] != points[k + 1]) {
                            // copy the point to make room for a middle point
                            for (m = 0; m < ps; ++m)
                                points[k + ps + m] = points[k + m];

                            // middle point has same y
                            points[k + 1] = points[k - ps + 1];

                            // we've added a point, better reflect that
                            k += ps;
                        }
                    }
                }
            }

            // give the hooks a chance to run
            for (i = 0; i < series.length; ++i) {
                s = series[i];

                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);
            }

            // second pass: find datamax/datamin for auto-scaling
            for (i = 0; i < series.length; ++i) {
                s = series[i];
                points = s.datapoints.points;
                ps = s.datapoints.pointsize;
                format = s.datapoints.format;

                var xmin = topSentry, ymin = topSentry,
                    xmax = bottomSentry, ymax = bottomSentry;

                for (j = 0; j < points.length; j += ps) {
                    if (points[j] == null)
                        continue;

                    for (m = 0; m < ps; ++m) {
                        val = points[j + m];
                        f = format[m];
                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)
                            continue;

                        if (f.x) {
                            if (val < xmin)
                                xmin = val;
                            if (val > xmax)
                                xmax = val;
                        }
                        if (f.y) {
                            if (val < ymin)
                                ymin = val;
                            if (val > ymax)
                                ymax = val;
                        }
                    }
                }

                if (s.bars.show) {
                    // make sure we got room for the bar on the dancing floor
                    var delta;

                    switch (s.bars.align) {
                        case "left":
                            delta = 0;
                            break;
                        case "right":
                            delta = -s.bars.barWidth;
                            break;
                        default:
                            delta = -s.bars.barWidth / 2;
                    }

                    if (s.bars.horizontal) {
                        ymin += delta;
                        ymax += delta + s.bars.barWidth;
                    }
                    else {
                        xmin += delta;
                        xmax += delta + s.bars.barWidth;
                    }
                }

                updateAxis(s.xaxis, xmin, xmax);
                updateAxis(s.yaxis, ymin, ymax);
            }

            $.each(allAxes(), function (_, axis) {
                if (axis.datamin == topSentry)
                    axis.datamin = null;
                if (axis.datamax == bottomSentry)
                    axis.datamax = null;
            });
        }

        function setupCanvases() {

            // Make sure the placeholder is clear of everything except canvases
            // from a previous plot in this container that we'll try to re-use.

            placeholder.css("padding", 0) // padding messes up the positioning
                .children().filter(function(){
                    return !$(this).hasClass("flot-overlay") && !$(this).hasClass('flot-base');
                }).remove();

            if (placeholder.css("position") == 'static')
                placeholder.css("position", "relative"); // for positioning labels and overlay

            surface = new Canvas("flot-base", placeholder);
            overlay = new Canvas("flot-overlay", placeholder); // overlay canvas for interactive features

            ctx = surface.context;
            octx = overlay.context;

            // define which element we're listening for events on
            eventHolder = $(overlay.element).unbind();

            // If we're re-using a plot object, shut down the old one

            var existing = placeholder.data("plot");

            if (existing) {
                existing.shutdown();
                overlay.clear();
            }

            // save in case we get replotted
            placeholder.data("plot", plot);
        }

        function bindEvents() {
            // bind events
            if (options.grid.hoverable) {
                eventHolder.mousemove(onMouseMove);

                // Use bind, rather than .mouseleave, because we officially
                // still support jQuery 1.2.6, which doesn't define a shortcut
                // for mouseenter or mouseleave.  This was a bug/oversight that
                // was fixed somewhere around 1.3.x.  We can return to using
                // .mouseleave when we drop support for 1.2.6.

                eventHolder.bind("mouseleave", onMouseLeave);
            }

            if (options.grid.clickable)
                eventHolder.click(onClick);

            executeHooks(hooks.bindEvents, [eventHolder]);
        }

        function shutdown() {
            if (redrawTimeout)
                clearTimeout(redrawTimeout);

            eventHolder.unbind("mousemove", onMouseMove);
            eventHolder.unbind("mouseleave", onMouseLeave);
            eventHolder.unbind("click", onClick);

            executeHooks(hooks.shutdown, [eventHolder]);
        }

        function setTransformationHelpers(axis) {
            // set helper functions on the axis, assumes plot area
            // has been computed already

            function identity(x) { return x; }

            var s, m, t = axis.options.transform || identity,
                it = axis.options.inverseTransform;

            // precompute how much the axis is scaling a point
            // in canvas space
            if (axis.direction == "x") {
                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));
                m = Math.min(t(axis.max), t(axis.min));
            }
            else {
                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));
                s = -s;
                m = Math.max(t(axis.max), t(axis.min));
            }

            // data point to canvas coordinate
            if (t == identity) // slight optimization
                axis.p2c = function (p) { return (p - m) * s; };
            else
                axis.p2c = function (p) { return (t(p) - m) * s; };
            // canvas coordinate to data point
            if (!it)
                axis.c2p = function (c) { return m + c / s; };
            else
                axis.c2p = function (c) { return it(m + c / s); };
        }

        function measureTickLabels(axis) {

            var opts = axis.options,
                ticks = axis.ticks || [],
                labelWidth = opts.labelWidth || 0,
                labelHeight = opts.labelHeight || 0,
                maxWidth = labelWidth || (axis.direction == "x" ? Math.floor(surface.width / (ticks.length || 1)) : null),
                legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis",
                layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles,
                font = opts.font || "flot-tick-label tickLabel";

            for (var i = 0; i < ticks.length; ++i) {

                var t = ticks[i];

                if (!t.label)
                    continue;

                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);

                labelWidth = Math.max(labelWidth, info.width);
                labelHeight = Math.max(labelHeight, info.height);
            }

            axis.labelWidth = opts.labelWidth || labelWidth;
            axis.labelHeight = opts.labelHeight || labelHeight;
        }

        function allocateAxisBoxFirstPhase(axis) {
            // find the bounding box of the axis by looking at label
            // widths/heights and ticks, make room by diminishing the
            // plotOffset; this first phase only looks at one
            // dimension per axis, the other dimension depends on the
            // other axes so will have to wait

            var lw = axis.labelWidth,
                lh = axis.labelHeight,
                pos = axis.options.position,
                isXAxis = axis.direction === "x",
                tickLength = axis.options.tickLength,
                axisMargin = options.grid.axisMargin,
                padding = options.grid.labelMargin,
                innermost = true,
                outermost = true,
                first = true,
                found = false;

            // Determine the axis's position in its direction and on its side

            $.each(isXAxis ? xaxes : yaxes, function(i, a) {
                if (a && a.reserveSpace) {
                    if (a === axis) {
                        found = true;
                    } else if (a.options.position === pos) {
                        if (found) {
                            outermost = false;
                        } else {
                            innermost = false;
                        }
                    }
                    if (!found) {
                        first = false;
                    }
                }
            });

            // The outermost axis on each side has no margin

            if (outermost) {
                axisMargin = 0;
            }

            // The ticks for the first axis in each direction stretch across

            if (tickLength == null) {
                tickLength = first ? "full" : 5;
            }

            if (!isNaN(+tickLength))
                padding += +tickLength;

            if (isXAxis) {
                lh += padding;

                if (pos == "bottom") {
                    plotOffset.bottom += lh + axisMargin;
                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };
                }
                else {
                    axis.box = { top: plotOffset.top + axisMargin, height: lh };
                    plotOffset.top += lh + axisMargin;
                }
            }
            else {
                lw += padding;

                if (pos == "left") {
                    axis.box = { left: plotOffset.left + axisMargin, width: lw };
                    plotOffset.left += lw + axisMargin;
                }
                else {
                    plotOffset.right += lw + axisMargin;
                    axis.box = { left: surface.width - plotOffset.right, width: lw };
                }
            }

             // save for future reference
            axis.position = pos;
            axis.tickLength = tickLength;
            axis.box.padding = padding;
            axis.innermost = innermost;
        }

        function allocateAxisBoxSecondPhase(axis) {
            // now that all axis boxes have been placed in one
            // dimension, we can set the remaining dimension coordinates
            if (axis.direction == "x") {
                axis.box.left = plotOffset.left - axis.labelWidth / 2;
                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;
            }
            else {
                axis.box.top = plotOffset.top - axis.labelHeight / 2;
                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;
            }
        }

        function adjustLayoutForThingsStickingOut() {
            // possibly adjust plot offset to ensure everything stays
            // inside the canvas and isn't clipped off

            var minMargin = options.grid.minBorderMargin,
                axis, i;

            // check stuff from the plot (FIXME: this should just read
            // a value from the series, otherwise it's impossible to
            // customize)
            if (minMargin == null) {
                minMargin = 0;
                for (i = 0; i < series.length; ++i)
                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));
            }

            var margins = {
                left: minMargin,
                right: minMargin,
                top: minMargin,
                bottom: minMargin
            };

            // check axis labels, note we don't check the actual
            // labels but instead use the overall width/height to not
            // jump as much around with replots
            $.each(allAxes(), function (_, axis) {
                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {
                    var lastTick = axis.ticks[axis.ticks.length - 1];
                    if (axis.direction === "x") {
                        margins.left = Math.max(margins.left, axis.labelWidth / 2);
                        if (lastTick.v <= axis.max) {
                            margins.right = Math.max(margins.right, axis.labelWidth / 2);
                        }
                    } else {
                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);
                        if (lastTick.v <= axis.max) {
                            margins.top = Math.max(margins.top, axis.labelHeight / 2);
                        }
                    }
                }
            });

            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));
            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));
            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));
            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));
        }

        function setupGrid() {
            var i, axes = allAxes(), showGrid = options.grid.show;

            // Initialize the plot's offset from the edge of the canvas

            for (var a in plotOffset) {
                var margin = options.grid.margin || 0;
                plotOffset[a] = typeof margin == "number" ? margin : margin[a] || 0;
            }

            executeHooks(hooks.processOffset, [plotOffset]);

            // If the grid is visible, add its border width to the offset

            for (var a in plotOffset) {
                if(typeof(options.grid.borderWidth) == "object") {
                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;
                }
                else {
                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;
                }
            }

            // init axes
            $.each(axes, function (_, axis) {
                axis.show = axis.options.show;
                if (axis.show == null)
                    axis.show = axis.used; // by default an axis is visible if it's got data

                axis.reserveSpace = axis.show || axis.options.reserveSpace;

                setRange(axis);
            });

            if (showGrid) {

                var allocatedAxes = $.grep(axes, function (axis) { return axis.reserveSpace; });

                $.each(allocatedAxes, function (_, axis) {
                    // make the ticks
                    setupTickGeneration(axis);
                    setTicks(axis);
                    snapRangeToTicks(axis, axis.ticks);
                    // find labelWidth/Height for axis
                    measureTickLabels(axis);
                });

                // with all dimensions calculated, we can compute the
                // axis bounding boxes, start from the outside
                // (reverse order)
                for (i = allocatedAxes.length - 1; i >= 0; --i)
                    allocateAxisBoxFirstPhase(allocatedAxes[i]);

                // make sure we've got enough space for things that
                // might stick out
                adjustLayoutForThingsStickingOut();

                $.each(allocatedAxes, function (_, axis) {
                    allocateAxisBoxSecondPhase(axis);
                });
            }

            plotWidth = surface.width - plotOffset.left - plotOffset.right;
            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;

            // now we got the proper plot dimensions, we can compute the scaling
            $.each(axes, function (_, axis) {
                setTransformationHelpers(axis);
            });

            if (showGrid) {
                drawAxisLabels();
            }

            insertLegend();
        }

        function setRange(axis) {
            var opts = axis.options,
                min = +(opts.min != null ? opts.min : axis.datamin),
                max = +(opts.max != null ? opts.max : axis.datamax),
                delta = max - min;

            if (delta == 0.0) {
                // degenerate case
                var widen = max == 0 ? 1 : 0.01;

                if (opts.min == null)
                    min -= widen;
                // always widen max if we couldn't widen min to ensure we
                // don't fall into min == max which doesn't work
                if (opts.max == null || opts.min != null)
                    max += widen;
            }
            else {
                // consider autoscaling
                var margin = opts.autoscaleMargin;
                if (margin != null) {
                    if (opts.min == null) {
                        min -= delta * margin;
                        // make sure we don't go below zero if all values
                        // are positive
                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)
                            min = 0;
                    }
                    if (opts.max == null) {
                        max += delta * margin;
                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)
                            max = 0;
                    }
                }
            }
            axis.min = min;
            axis.max = max;
        }

        function setupTickGeneration(axis) {
            var opts = axis.options;

            // estimate number of ticks
            var noTicks;
            if (typeof opts.ticks == "number" && opts.ticks > 0)
                noTicks = opts.ticks;
            else
                // heuristic based on the model a*sqrt(x) fitted to
                // some data points that seemed reasonable
                noTicks = 0.3 * Math.sqrt(axis.direction == "x" ? surface.width : surface.height);

            var delta = (axis.max - axis.min) / noTicks,
                dec = -Math.floor(Math.log(delta) / Math.LN10),
                maxDec = opts.tickDecimals;

            if (maxDec != null && dec > maxDec) {
                dec = maxDec;
            }

            var magn = Math.pow(10, -dec),
                norm = delta / magn, // norm is between 1.0 and 10.0
                size;

            if (norm < 1.5) {
                size = 1;
            } else if (norm < 3) {
                size = 2;
                // special case for 2.5, requires an extra decimal
                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {
                    size = 2.5;
                    ++dec;
                }
            } else if (norm < 7.5) {
                size = 5;
            } else {
                size = 10;
            }

            size *= magn;

            if (opts.minTickSize != null && size < opts.minTickSize) {
                size = opts.minTickSize;
            }

            axis.delta = delta;
            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);
            axis.tickSize = opts.tickSize || size;

            // Time mode was moved to a plug-in in 0.8, but since so many people use this
            // we'll add an especially friendly make sure they remembered to include it.

            if (opts.mode == "time" && !axis.tickGenerator) {
                throw new Error("Time mode requires the flot.time plugin.");
            }

            // Flot supports base-10 axes; any other mode else is handled by a plug-in,
            // like flot.time.js.

            if (!axis.tickGenerator) {

                axis.tickGenerator = function (axis) {

                    var ticks = [],
                        start = floorInBase(axis.min, axis.tickSize),
                        i = 0,
                        v = Number.NaN,
                        prev;

                    do {
                        prev = v;
                        v = start + i * axis.tickSize;
                        ticks.push(v);
                        ++i;
                    } while (v < axis.max && v != prev);
                    return ticks;
                };

				axis.tickFormatter = function (value, axis) {

					var factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;
					var formatted = "" + Math.round(value * factor) / factor;

					// If tickDecimals was specified, ensure that we have exactly that
					// much precision; otherwise default to the value's own precision.

					if (axis.tickDecimals != null) {
						var decimal = formatted.indexOf(".");
						var precision = decimal == -1 ? 0 : formatted.length - decimal - 1;
						if (precision < axis.tickDecimals) {
							return (precision ? formatted : formatted + ".") + ("" + factor).substr(1, axis.tickDecimals - precision);
						}
					}

                    return formatted;
                };
            }

            if ($.isFunction(opts.tickFormatter))
                axis.tickFormatter = function (v, axis) { return "" + opts.tickFormatter(v, axis); };

            if (opts.alignTicksWithAxis != null) {
                var otherAxis = (axis.direction == "x" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];
                if (otherAxis && otherAxis.used && otherAxis != axis) {
                    // consider snapping min/max to outermost nice ticks
                    var niceTicks = axis.tickGenerator(axis);
                    if (niceTicks.length > 0) {
                        if (opts.min == null)
                            axis.min = Math.min(axis.min, niceTicks[0]);
                        if (opts.max == null && niceTicks.length > 1)
                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);
                    }

                    axis.tickGenerator = function (axis) {
                        // copy ticks, scaled to this axis
                        var ticks = [], v, i;
                        for (i = 0; i < otherAxis.ticks.length; ++i) {
                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);
                            v = axis.min + v * (axis.max - axis.min);
                            ticks.push(v);
                        }
                        return ticks;
                    };

                    // we might need an extra decimal since forced
                    // ticks don't necessarily fit naturally
                    if (!axis.mode && opts.tickDecimals == null) {
                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),
                            ts = axis.tickGenerator(axis);

                        // only proceed if the tick interval rounded
                        // with an extra decimal doesn't give us a
                        // zero at end
                        if (!(ts.length > 1 && /\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))
                            axis.tickDecimals = extraDec;
                    }
                }
            }
        }

        function setTicks(axis) {
            var oticks = axis.options.ticks, ticks = [];
            if (oticks == null || (typeof oticks == "number" && oticks > 0))
                ticks = axis.tickGenerator(axis);
            else if (oticks) {
                if ($.isFunction(oticks))
                    // generate the ticks
                    ticks = oticks(axis);
                else
                    ticks = oticks;
            }

            // clean up/labelify the supplied ticks, copy them over
            var i, v;
            axis.ticks = [];
            for (i = 0; i < ticks.length; ++i) {
                var label = null;
                var t = ticks[i];
                if (typeof t == "object") {
                    v = +t[0];
                    if (t.length > 1)
                        label = t[1];
                }
                else
                    v = +t;
                if (label == null)
                    label = axis.tickFormatter(v, axis);
                if (!isNaN(v))
                    axis.ticks.push({ v: v, label: label });
            }
        }

        function snapRangeToTicks(axis, ticks) {
            if (axis.options.autoscaleMargin && ticks.length > 0) {
                // snap to ticks
                if (axis.options.min == null)
                    axis.min = Math.min(axis.min, ticks[0].v);
                if (axis.options.max == null && ticks.length > 1)
                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);
            }
        }

        function draw() {

            surface.clear();

            executeHooks(hooks.drawBackground, [ctx]);

            var grid = options.grid;

            // draw background, if any
            if (grid.show && grid.backgroundColor)
                drawBackground();

            if (grid.show && !grid.aboveData) {
                drawGrid();
            }

            for (var i = 0; i < series.length; ++i) {
                executeHooks(hooks.drawSeries, [ctx, series[i]]);
                drawSeries(series[i]);
            }

            executeHooks(hooks.draw, [ctx]);

            if (grid.show && grid.aboveData) {
                drawGrid();
            }

            surface.render();

            // A draw implies that either the axes or data have changed, so we
            // should probably update the overlay highlights as well.

            triggerRedrawOverlay();
        }

        function extractRange(ranges, coord) {
            var axis, from, to, key, axes = allAxes();

            for (var i = 0; i < axes.length; ++i) {
                axis = axes[i];
                if (axis.direction == coord) {
                    key = coord + axis.n + "axis";
                    if (!ranges[key] && axis.n == 1)
                        key = coord + "axis"; // support x1axis as xaxis
                    if (ranges[key]) {
                        from = ranges[key].from;
                        to = ranges[key].to;
                        break;
                    }
                }
            }

            // backwards-compat stuff - to be removed in future
            if (!ranges[key]) {
                axis = coord == "x" ? xaxes[0] : yaxes[0];
                from = ranges[coord + "1"];
                to = ranges[coord + "2"];
            }

            // auto-reverse as an added bonus
            if (from != null && to != null && from > to) {
                var tmp = from;
                from = to;
                to = tmp;
            }

            return { from: from, to: to, axis: axis };
        }

        function drawBackground() {
            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, "rgba(255, 255, 255, 0)");
            ctx.fillRect(0, 0, plotWidth, plotHeight);
            ctx.restore();
        }

        function drawGrid() {
            var i, axes, bw, bc;

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            // draw markings
            var markings = options.grid.markings;
            if (markings) {
                if ($.isFunction(markings)) {
                    axes = plot.getAxes();
                    // xmin etc. is backwards compatibility, to be
                    // removed in the future
                    axes.xmin = axes.xaxis.min;
                    axes.xmax = axes.xaxis.max;
                    axes.ymin = axes.yaxis.min;
                    axes.ymax = axes.yaxis.max;

                    markings = markings(axes);
                }

                for (i = 0; i < markings.length; ++i) {
                    var m = markings[i],
                        xrange = extractRange(m, "x"),
                        yrange = extractRange(m, "y");

                    // fill in missing
                    if (xrange.from == null)
                        xrange.from = xrange.axis.min;
                    if (xrange.to == null)
                        xrange.to = xrange.axis.max;
                    if (yrange.from == null)
                        yrange.from = yrange.axis.min;
                    if (yrange.to == null)
                        yrange.to = yrange.axis.max;

                    // clip
                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||
                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)
                        continue;

                    xrange.from = Math.max(xrange.from, xrange.axis.min);
                    xrange.to = Math.min(xrange.to, xrange.axis.max);
                    yrange.from = Math.max(yrange.from, yrange.axis.min);
                    yrange.to = Math.min(yrange.to, yrange.axis.max);

                    if (xrange.from == xrange.to && yrange.from == yrange.to)
                        continue;

                    // then draw
                    xrange.from = xrange.axis.p2c(xrange.from);
                    xrange.to = xrange.axis.p2c(xrange.to);
                    yrange.from = yrange.axis.p2c(yrange.from);
                    yrange.to = yrange.axis.p2c(yrange.to);

                    if (xrange.from == xrange.to || yrange.from == yrange.to) {
                        // draw line
                        ctx.beginPath();
                        ctx.strokeStyle = m.color || options.grid.markingsColor;
                        ctx.lineWidth = m.lineWidth || options.grid.markingsLineWidth;
                        ctx.moveTo(xrange.from, yrange.from);
                        ctx.lineTo(xrange.to, yrange.to);
                        ctx.stroke();
                    }
                    else {
                        // fill area
                        ctx.fillStyle = m.color || options.grid.markingsColor;
                        ctx.fillRect(xrange.from, yrange.to,
                                     xrange.to - xrange.from,
                                     yrange.from - yrange.to);
                    }
                }
            }

            // draw the ticks
            axes = allAxes();
            bw = options.grid.borderWidth;

            for (var j = 0; j < axes.length; ++j) {
                var axis = axes[j], box = axis.box,
                    t = axis.tickLength, x, y, xoff, yoff;
                if (!axis.show || axis.ticks.length == 0)
                    continue;

                ctx.lineWidth = 1;

                // find the edges
                if (axis.direction == "x") {
                    x = 0;
                    if (t == "full")
                        y = (axis.position == "top" ? 0 : plotHeight);
                    else
                        y = box.top - plotOffset.top + (axis.position == "top" ? box.height : 0);
                }
                else {
                    y = 0;
                    if (t == "full")
                        x = (axis.position == "left" ? 0 : plotWidth);
                    else
                        x = box.left - plotOffset.left + (axis.position == "left" ? box.width : 0);
                }

                // draw tick bar
                if (!axis.innermost) {
                    ctx.strokeStyle = axis.options.color;
                    ctx.beginPath();
                    xoff = yoff = 0;
                    if (axis.direction == "x")
                        xoff = plotWidth + 1;
                    else
                        yoff = plotHeight + 1;

                    if (ctx.lineWidth == 1) {
                        if (axis.direction == "x") {
                            y = Math.floor(y) + 0.5;
                        } else {
                            x = Math.floor(x) + 0.5;
                        }
                    }

                    ctx.moveTo(x, y);
                    ctx.lineTo(x + xoff, y + yoff);
                    ctx.stroke();
                }

                // draw ticks

                ctx.strokeStyle = axis.options.tickColor;

                ctx.beginPath();
                for (i = 0; i < axis.ticks.length; ++i) {
                    var v = axis.ticks[i].v;

                    xoff = yoff = 0;

                    if (isNaN(v) || v < axis.min || v > axis.max
                        // skip those lying on the axes if we got a border
                        || (t == "full"
                            && ((typeof bw == "object" && bw[axis.position] > 0) || bw > 0)
                            && (v == axis.min || v == axis.max)))
                        continue;

                    if (axis.direction == "x") {
                        x = axis.p2c(v);
                        yoff = t == "full" ? -plotHeight : t;

                        if (axis.position == "top")
                            yoff = -yoff;
                    }
                    else {
                        y = axis.p2c(v);
                        xoff = t == "full" ? -plotWidth : t;

                        if (axis.position == "left")
                            xoff = -xoff;
                    }

                    if (ctx.lineWidth == 1) {
                        if (axis.direction == "x")
                            x = Math.floor(x) + 0.5;
                        else
                            y = Math.floor(y) + 0.5;
                    }

                    ctx.moveTo(x, y);
                    ctx.lineTo(x + xoff, y + yoff);
                }

                ctx.stroke();
            }


            // draw border
            if (bw) {
                // If either borderWidth or borderColor is an object, then draw the border
                // line by line instead of as one rectangle
                bc = options.grid.borderColor;
                if(typeof bw == "object" || typeof bc == "object") {
                    if (typeof bw !== "object") {
                        bw = {top: bw, right: bw, bottom: bw, left: bw};
                    }
                    if (typeof bc !== "object") {
                        bc = {top: bc, right: bc, bottom: bc, left: bc};
                    }

                    if (bw.top > 0) {
                        ctx.strokeStyle = bc.top;
                        ctx.lineWidth = bw.top;
                        ctx.beginPath();
                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);
                        ctx.lineTo(plotWidth, 0 - bw.top/2);
                        ctx.stroke();
                    }

                    if (bw.right > 0) {
                        ctx.strokeStyle = bc.right;
                        ctx.lineWidth = bw.right;
                        ctx.beginPath();
                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);
                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);
                        ctx.stroke();
                    }

                    if (bw.bottom > 0) {
                        ctx.strokeStyle = bc.bottom;
                        ctx.lineWidth = bw.bottom;
                        ctx.beginPath();
                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);
                        ctx.lineTo(0, plotHeight + bw.bottom / 2);
                        ctx.stroke();
                    }

                    if (bw.left > 0) {
                        ctx.strokeStyle = bc.left;
                        ctx.lineWidth = bw.left;
                        ctx.beginPath();
                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);
                        ctx.lineTo(0- bw.left/2, 0);
                        ctx.stroke();
                    }
                }
                else {
                    ctx.lineWidth = bw;
                    ctx.strokeStyle = options.grid.borderColor;
                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);
                }
            }

            ctx.restore();
        }

        function drawAxisLabels() {

            $.each(allAxes(), function (_, axis) {
                var box = axis.box,
                    legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis",
                    layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles,
                    font = axis.options.font || "flot-tick-label tickLabel",
                    tick, x, y, halign, valign;

                // Remove text before checking for axis.show and ticks.length;
                // otherwise plugins, like flot-tickrotor, that draw their own
                // tick labels will end up with both theirs and the defaults.

                surface.removeText(layer);

                if (!axis.show || axis.ticks.length == 0)
                    return;

                for (var i = 0; i < axis.ticks.length; ++i) {

                    tick = axis.ticks[i];
                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)
                        continue;

                    if (axis.direction == "x") {
                        halign = "center";
                        x = plotOffset.left + axis.p2c(tick.v);
                        if (axis.position == "bottom") {
                            y = box.top + box.padding;
                        } else {
                            y = box.top + box.height - box.padding;
                            valign = "bottom";
                        }
                    } else {
                        valign = "middle";
                        y = plotOffset.top + axis.p2c(tick.v);
                        if (axis.position == "left") {
                            x = box.left + box.width - box.padding;
                            halign = "right";
                        } else {
                            x = box.left + box.padding;
                        }
                    }

                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);
                }
            });
        }

        function drawSeries(series) {
            if (series.lines.show)
                drawSeriesLines(series);
            if (series.bars.show)
                drawSeriesBars(series);
            if (series.points.show)
                drawSeriesPoints(series);
        }

        function drawSeriesLines(series) {
            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {
                var points = datapoints.points,
                    ps = datapoints.pointsize,
                    prevx = null, prevy = null;

                ctx.beginPath();
                for (var i = ps; i < points.length; i += ps) {
                    var x1 = points[i - ps], y1 = points[i - ps + 1],
                        x2 = points[i], y2 = points[i + 1];

                    if (x1 == null || x2 == null)
                        continue;

                    // clip with ymin
                    if (y1 <= y2 && y1 < axisy.min) {
                        if (y2 < axisy.min)
                            continue;   // line segment is outside
                        // compute new intersection point
                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.min;
                    }
                    else if (y2 <= y1 && y2 < axisy.min) {
                        if (y1 < axisy.min)
                            continue;
                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.min;
                    }

                    // clip with ymax
                    if (y1 >= y2 && y1 > axisy.max) {
                        if (y2 > axisy.max)
                            continue;
                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.max;
                    }
                    else if (y2 >= y1 && y2 > axisy.max) {
                        if (y1 > axisy.max)
                            continue;
                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.max;
                    }

                    // clip with xmin
                    if (x1 <= x2 && x1 < axisx.min) {
                        if (x2 < axisx.min)
                            continue;
                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.min;
                    }
                    else if (x2 <= x1 && x2 < axisx.min) {
                        if (x1 < axisx.min)
                            continue;
                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.min;
                    }

                    // clip with xmax
                    if (x1 >= x2 && x1 > axisx.max) {
                        if (x2 > axisx.max)
                            continue;
                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.max;
                    }
                    else if (x2 >= x1 && x2 > axisx.max) {
                        if (x1 > axisx.max)
                            continue;
                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.max;
                    }

                    if (x1 != prevx || y1 != prevy)
                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);

                    prevx = x2;
                    prevy = y2;
                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);
                }
                ctx.stroke();
            }

            function plotLineArea(datapoints, axisx, axisy) {
                var points = datapoints.points,
                    ps = datapoints.pointsize,
                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),
                    i = 0, top, areaOpen = false,
                    ypos = 1, segmentStart = 0, segmentEnd = 0;

                // we process each segment in two turns, first forward
                // direction to sketch out top, then once we hit the
                // end we go backwards to sketch the bottom
                while (true) {
                    if (ps > 0 && i > points.length + ps)
                        break;

                    i += ps; // ps is negative if going backwards

                    var x1 = points[i - ps],
                        y1 = points[i - ps + ypos],
                        x2 = points[i], y2 = points[i + ypos];

                    if (areaOpen) {
                        if (ps > 0 && x1 != null && x2 == null) {
                            // at turning point
                            segmentEnd = i;
                            ps = -ps;
                            ypos = 2;
                            continue;
                        }

                        if (ps < 0 && i == segmentStart + ps) {
                            // done with the reverse sweep
                            ctx.fill();
                            areaOpen = false;
                            ps = -ps;
                            ypos = 1;
                            i = segmentStart = segmentEnd + ps;
                            continue;
                        }
                    }

                    if (x1 == null || x2 == null)
                        continue;

                    // clip x values

                    // clip with xmin
                    if (x1 <= x2 && x1 < axisx.min) {
                        if (x2 < axisx.min)
                            continue;
                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.min;
                    }
                    else if (x2 <= x1 && x2 < axisx.min) {
                        if (x1 < axisx.min)
                            continue;
                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.min;
                    }

                    // clip with xmax
                    if (x1 >= x2 && x1 > axisx.max) {
                        if (x2 > axisx.max)
                            continue;
                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x1 = axisx.max;
                    }
                    else if (x2 >= x1 && x2 > axisx.max) {
                        if (x1 > axisx.max)
                            continue;
                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;
                        x2 = axisx.max;
                    }

                    if (!areaOpen) {
                        // open area
                        ctx.beginPath();
                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));
                        areaOpen = true;
                    }

                    // now first check the case where both is outside
                    if (y1 >= axisy.max && y2 >= axisy.max) {
                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));
                        continue;
                    }
                    else if (y1 <= axisy.min && y2 <= axisy.min) {
                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));
                        continue;
                    }

                    // else it's a bit more complicated, there might
                    // be a flat maxed out rectangle first, then a
                    // triangular cutout or reverse; to find these
                    // keep track of the current x values
                    var x1old = x1, x2old = x2;

                    // clip the y values, without shortcutting, we
                    // go through all cases in turn

                    // clip with ymin
                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {
                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.min;
                    }
                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {
                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.min;
                    }

                    // clip with ymax
                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {
                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y1 = axisy.max;
                    }
                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {
                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;
                        y2 = axisy.max;
                    }

                    // if the x value was changed we got a rectangle
                    // to fill
                    if (x1 != x1old) {
                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));
                        // it goes to (x1, y1), but we fill that below
                    }

                    // fill triangular section, this sometimes result
                    // in redundant points if (x1, y1) hasn't changed
                    // from previous line to, but we just ignore that
                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));
                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));

                    // fill the other rectangle if it's there
                    if (x2 != x2old) {
                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));
                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));
                    }
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);
            ctx.lineJoin = "round";

            var lw = series.lines.lineWidth,
                sw = series.shadowSize;
            // FIXME: consider another form of shadow when filling is turned on
            if (lw > 0 && sw > 0) {
                // draw shadow as a thick and thin line with transparency
                ctx.lineWidth = sw;
                ctx.strokeStyle = "rgba(0,0,0,0.1)";
                // position shadow at angle from the mid of line
                var angle = Math.PI/18;
                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);
                ctx.lineWidth = sw/2;
                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);
            }

            ctx.lineWidth = lw;
            ctx.strokeStyle = series.color;
            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);
            if (fillStyle) {
                ctx.fillStyle = fillStyle;
                plotLineArea(series.datapoints, series.xaxis, series.yaxis);
            }

            if (lw > 0)
                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);
            ctx.restore();
        }

        function drawSeriesPoints(series) {
            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {
                var points = datapoints.points, ps = datapoints.pointsize;

                for (var i = 0; i < points.length; i += ps) {
                    var x = points[i], y = points[i + 1];
                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)
                        continue;

                    ctx.beginPath();
                    x = axisx.p2c(x);
                    y = axisy.p2c(y) + offset;
                    if (symbol == "circle")
                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);
                    else
                        symbol(ctx, x, y, radius, shadow);
                    ctx.closePath();

                    if (fillStyle) {
                        ctx.fillStyle = fillStyle;
                        ctx.fill();
                    }
                    ctx.stroke();
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            var lw = series.points.lineWidth,
                sw = series.shadowSize,
                radius = series.points.radius,
                symbol = series.points.symbol;

            // If the user sets the line width to 0, we change it to a very 
            // small value. A line width of 0 seems to force the default of 1.
            // Doing the conditional here allows the shadow setting to still be 
            // optional even with a lineWidth of 0.

            if( lw == 0 )
                lw = 0.0001;

            if (lw > 0 && sw > 0) {
                // draw shadow in two steps
                var w = sw / 2;
                ctx.lineWidth = w;
                ctx.strokeStyle = "rgba(0,0,0,0.1)";
                plotPoints(series.datapoints, radius, null, w + w/2, true,
                           series.xaxis, series.yaxis, symbol);

                ctx.strokeStyle = "rgba(0,0,0,0.2)";
                plotPoints(series.datapoints, radius, null, w/2, true,
                           series.xaxis, series.yaxis, symbol);
            }

            ctx.lineWidth = lw;
            ctx.strokeStyle = series.color;
            plotPoints(series.datapoints, radius,
                       getFillStyle(series.points, series.color), 0, false,
                       series.xaxis, series.yaxis, symbol);
            ctx.restore();
        }

        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {
            var left, right, bottom, top,
                drawLeft, drawRight, drawTop, drawBottom,
                tmp;

            // in horizontal mode, we start the bar from the left
            // instead of from the bottom so it appears to be
            // horizontal rather than vertical
            if (horizontal) {
                drawBottom = drawRight = drawTop = true;
                drawLeft = false;
                left = b;
                right = x;
                top = y + barLeft;
                bottom = y + barRight;

                // account for negative bars
                if (right < left) {
                    tmp = right;
                    right = left;
                    left = tmp;
                    drawLeft = true;
                    drawRight = false;
                }
            }
            else {
                drawLeft = drawRight = drawTop = true;
                drawBottom = false;
                left = x + barLeft;
                right = x + barRight;
                bottom = b;
                top = y;

                // account for negative bars
                if (top < bottom) {
                    tmp = top;
                    top = bottom;
                    bottom = tmp;
                    drawBottom = true;
                    drawTop = false;
                }
            }

            // clip
            if (right < axisx.min || left > axisx.max ||
                top < axisy.min || bottom > axisy.max)
                return;

            if (left < axisx.min) {
                left = axisx.min;
                drawLeft = false;
            }

            if (right > axisx.max) {
                right = axisx.max;
                drawRight = false;
            }

            if (bottom < axisy.min) {
                bottom = axisy.min;
                drawBottom = false;
            }

            if (top > axisy.max) {
                top = axisy.max;
                drawTop = false;
            }

            left = axisx.p2c(left);
            bottom = axisy.p2c(bottom);
            right = axisx.p2c(right);
            top = axisy.p2c(top);

            // fill the bar
            if (fillStyleCallback) {
                c.fillStyle = fillStyleCallback(bottom, top);
                c.fillRect(left, top, right - left, bottom - top)
            }

            // draw outline
            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {
                c.beginPath();

                // FIXME: inline moveTo is buggy with excanvas
                c.moveTo(left, bottom);
                if (drawLeft)
                    c.lineTo(left, top);
                else
                    c.moveTo(left, top);
                if (drawTop)
                    c.lineTo(right, top);
                else
                    c.moveTo(right, top);
                if (drawRight)
                    c.lineTo(right, bottom);
                else
                    c.moveTo(right, bottom);
                if (drawBottom)
                    c.lineTo(left, bottom);
                else
                    c.moveTo(left, bottom);
                c.stroke();
            }
        }

        function drawSeriesBars(series) {
            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {
                var points = datapoints.points, ps = datapoints.pointsize;

                for (var i = 0; i < points.length; i += ps) {
                    if (points[i] == null)
                        continue;
                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);
                }
            }

            ctx.save();
            ctx.translate(plotOffset.left, plotOffset.top);

            // FIXME: figure out a way to add shadows (for instance along the right edge)
            ctx.lineWidth = series.bars.lineWidth;
            ctx.strokeStyle = series.color;

            var barLeft;

            switch (series.bars.align) {
                case "left":
                    barLeft = 0;
                    break;
                case "right":
                    barLeft = -series.bars.barWidth;
                    break;
                default:
                    barLeft = -series.bars.barWidth / 2;
            }

            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;
            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);
            ctx.restore();
        }

        function getFillStyle(filloptions, seriesColor, bottom, top) {
            var fill = filloptions.fill;
            if (!fill)
                return null;

            if (filloptions.fillColor)
                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);

            var c = $.color.parse(seriesColor);
            c.a = typeof fill == "number" ? fill : 0.4;
            c.normalize();
            return c.toString();
        }

        function insertLegend() {

            if (options.legend.container != null) {
                $(options.legend.container).html("");
            } else {
                placeholder.find(".legend").remove();
            }

            if (!options.legend.show) {
                return;
            }

            var fragments = [], entries = [], rowStarted = false,
                lf = options.legend.labelFormatter, s, label;

            // Build a list of legend entries, with each having a label and a color

            for (var i = 0; i < series.length; ++i) {
                s = series[i];
                if (s.label) {
                    label = lf ? lf(s.label, s) : s.label;
                    if (label) {
                        entries.push({
                            label: label,
                            color: s.color
                        });
                    }
                }
            }

            // Sort the legend using either the default or a custom comparator

            if (options.legend.sorted) {
                if ($.isFunction(options.legend.sorted)) {
                    entries.sort(options.legend.sorted);
                } else if (options.legend.sorted == "reverse") {
                	entries.reverse();
                } else {
                    var ascending = options.legend.sorted != "descending";
                    entries.sort(function(a, b) {
                        return a.label == b.label ? 0 : (
                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR
                        );
                    });
                }
            }

            // Generate markup for the list of entries, in their final order

            for (var i = 0; i < entries.length; ++i) {

                var entry = entries[i];

                if (i % options.legend.noColumns == 0) {
                    if (rowStarted)
                        fragments.push('</tr>');
                    fragments.push('<tr>');
                    rowStarted = true;
                }

                fragments.push(
                    '<td class="legendColorBox"><div style="border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px"><div style="width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden"></div></div></td>' +
                    '<td class="legendLabel">' + entry.label + '</td>'
                );
            }

            if (rowStarted)
                fragments.push('</tr>');

            if (fragments.length == 0)
                return;

            var table = '<table style="font-size:smaller;color:' + options.grid.color + '">' + fragments.join("") + '</table>';
            if (options.legend.container != null)
                $(options.legend.container).html(table);
            else {
                var pos = "",
                    p = options.legend.position,
                    m = options.legend.margin;
                if (m[0] == null)
                    m = [m, m];
                if (p.charAt(0) == "n")
                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';
                else if (p.charAt(0) == "s")
                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';
                if (p.charAt(1) == "e")
                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';
                else if (p.charAt(1) == "w")
                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';
                var legend = $('<div class="legend">' + table.replace('style="', 'style="position:absolute;' + pos +';') + '</div>').appendTo(placeholder);
                if (options.legend.backgroundOpacity != 0.0) {
                    // put in the transparent background
                    // separately to avoid blended labels and
                    // label boxes
                    var c = options.legend.backgroundColor;
                    if (c == null) {
                        c = options.grid.backgroundColor;
                        if (c && typeof c == "string")
                            c = $.color.parse(c);
                        else
                            c = $.color.extract(legend, 'background-color');
                        c.a = 1;
                        c = c.toString();
                    }
                    var div = legend.children();
                    $('<div style="position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);
                }
            }
        }


        // interactive features

        var highlights = [],
            redrawTimeout = null;

        // returns the data item the mouse is over, or null if none is found
        function findNearbyItem(mouseX, mouseY, seriesFilter) {
            var maxDistance = options.grid.mouseActiveRadius,
                smallestDistance = maxDistance * maxDistance + 1,
                item = null, foundPoint = false, i, j, ps;

            for (i = series.length - 1; i >= 0; --i) {
                if (!seriesFilter(series[i]))
                    continue;

                var s = series[i],
                    axisx = s.xaxis,
                    axisy = s.yaxis,
                    points = s.datapoints.points,
                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster
                    my = axisy.c2p(mouseY),
                    maxx = maxDistance / axisx.scale,
                    maxy = maxDistance / axisy.scale;

                ps = s.datapoints.pointsize;
                // with inverse transforms, we can't use the maxx/maxy
                // optimization, sadly
                if (axisx.options.inverseTransform)
                    maxx = Number.MAX_VALUE;
                if (axisy.options.inverseTransform)
                    maxy = Number.MAX_VALUE;

                if (s.lines.show || s.points.show) {
                    for (j = 0; j < points.length; j += ps) {
                        var x = points[j], y = points[j + 1];
                        if (x == null)
                            continue;

                        // For points and lines, the cursor must be within a
                        // certain distance to the data point
                        if (x - mx > maxx || x - mx < -maxx ||
                            y - my > maxy || y - my < -maxy)
                            continue;

                        // We have to calculate distances in pixels, not in
                        // data units, because the scales of the axes may be different
                        var dx = Math.abs(axisx.p2c(x) - mouseX),
                            dy = Math.abs(axisy.p2c(y) - mouseY),
                            dist = dx * dx + dy * dy; // we save the sqrt

                        // use <= to ensure last point takes precedence
                        // (last generally means on top of)
                        if (dist < smallestDistance) {
                            smallestDistance = dist;
                            item = [i, j / ps];
                        }
                    }
                }

                if (s.bars.show && !item) { // no other point can be nearby

                    var barLeft, barRight;

                    switch (s.bars.align) {
                        case "left":
                            barLeft = 0;
                            break;
                        case "right":
                            barLeft = -s.bars.barWidth;
                            break;
                        default:
                            barLeft = -s.bars.barWidth / 2;
                    }

                    barRight = barLeft + s.bars.barWidth;

                    for (j = 0; j < points.length; j += ps) {
                        var x = points[j], y = points[j + 1], b = points[j + 2];
                        if (x == null)
                            continue;

                        // for a bar graph, the cursor must be inside the bar
                        if (series[i].bars.horizontal ?
                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&
                             my >= y + barLeft && my <= y + barRight) :
                            (mx >= x + barLeft && mx <= x + barRight &&
                             my >= Math.min(b, y) && my <= Math.max(b, y)))
                                item = [i, j / ps];
                    }
                }
            }

            if (item) {
                i = item[0];
                j = item[1];
                ps = series[i].datapoints.pointsize;

                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),
                         dataIndex: j,
                         series: series[i],
                         seriesIndex: i };
            }

            return null;
        }

        function onMouseMove(e) {
            if (options.grid.hoverable)
                triggerClickHoverEvent("plothover", e,
                                       function (s) { return s["hoverable"] != false; });
        }

        function onMouseLeave(e) {
            if (options.grid.hoverable)
                triggerClickHoverEvent("plothover", e,
                                       function (s) { return false; });
        }

        function onClick(e) {
            triggerClickHoverEvent("plotclick", e,
                                   function (s) { return s["clickable"] != false; });
        }

        // trigger click or hover event (they send the same parameters
        // so we share their code)
        function triggerClickHoverEvent(eventname, event, seriesFilter) {
            var offset = eventHolder.offset(),
                canvasX = event.pageX - offset.left - plotOffset.left,
                canvasY = event.pageY - offset.top - plotOffset.top,
            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });

            pos.pageX = event.pageX;
            pos.pageY = event.pageY;

            var item = findNearbyItem(canvasX, canvasY, seriesFilter);

            if (item) {
                // fill in mouse pos for any listeners out there
                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);
                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);
            }

            if (options.grid.autoHighlight) {
                // clear auto-highlights
                for (var i = 0; i < highlights.length; ++i) {
                    var h = highlights[i];
                    if (h.auto == eventname &&
                        !(item && h.series == item.series &&
                          h.point[0] == item.datapoint[0] &&
                          h.point[1] == item.datapoint[1]))
                        unhighlight(h.series, h.point);
                }

                if (item)
                    highlight(item.series, item.datapoint, eventname);
            }

            placeholder.trigger(eventname, [ pos, item ]);
        }

        function triggerRedrawOverlay() {
            var t = options.interaction.redrawOverlayInterval;
            if (t == -1) {      // skip event queue
                drawOverlay();
                return;
            }

            if (!redrawTimeout)
                redrawTimeout = setTimeout(drawOverlay, t);
        }

        function drawOverlay() {
            redrawTimeout = null;

            // draw highlights
            octx.save();
            overlay.clear();
            octx.translate(plotOffset.left, plotOffset.top);

            var i, hi;
            for (i = 0; i < highlights.length; ++i) {
                hi = highlights[i];

                if (hi.series.bars.show)
                    drawBarHighlight(hi.series, hi.point);
                else
                    drawPointHighlight(hi.series, hi.point);
            }
            octx.restore();

            executeHooks(hooks.drawOverlay, [octx]);
        }

        function highlight(s, point, auto) {
            if (typeof s == "number")
                s = series[s];

            if (typeof point == "number") {
                var ps = s.datapoints.pointsize;
                point = s.datapoints.points.slice(ps * point, ps * (point + 1));
            }

            var i = indexOfHighlight(s, point);
            if (i == -1) {
                highlights.push({ series: s, point: point, auto: auto });

                triggerRedrawOverlay();
            }
            else if (!auto)
                highlights[i].auto = false;
        }

        function unhighlight(s, point) {
            if (s == null && point == null) {
                highlights = [];
                triggerRedrawOverlay();
                return;
            }

            if (typeof s == "number")
                s = series[s];

            if (typeof point == "number") {
                var ps = s.datapoints.pointsize;
                point = s.datapoints.points.slice(ps * point, ps * (point + 1));
            }

            var i = indexOfHighlight(s, point);
            if (i != -1) {
                highlights.splice(i, 1);

                triggerRedrawOverlay();
            }
        }

        function indexOfHighlight(s, p) {
            for (var i = 0; i < highlights.length; ++i) {
                var h = highlights[i];
                if (h.series == s && h.point[0] == p[0]
                    && h.point[1] == p[1])
                    return i;
            }
            return -1;
        }

        function drawPointHighlight(series, point) {
            var x = point[0], y = point[1],
                axisx = series.xaxis, axisy = series.yaxis,
                highlightColor = (typeof series.highlightColor === "string") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();

            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)
                return;

            var pointRadius = series.points.radius + series.points.lineWidth / 2;
            octx.lineWidth = pointRadius;
            octx.strokeStyle = highlightColor;
            var radius = 1.5 * pointRadius;
            x = axisx.p2c(x);
            y = axisy.p2c(y);

            octx.beginPath();
            if (series.points.symbol == "circle")
                octx.arc(x, y, radius, 0, 2 * Math.PI, false);
            else
                series.points.symbol(octx, x, y, radius, false);
            octx.closePath();
            octx.stroke();
        }

        function drawBarHighlight(series, point) {
            var highlightColor = (typeof series.highlightColor === "string") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),
                fillStyle = highlightColor,
                barLeft;

            switch (series.bars.align) {
                case "left":
                    barLeft = 0;
                    break;
                case "right":
                    barLeft = -series.bars.barWidth;
                    break;
                default:
                    barLeft = -series.bars.barWidth / 2;
            }

            octx.lineWidth = series.bars.lineWidth;
            octx.strokeStyle = highlightColor;

            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,
                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);
        }

        function getColorOrGradient(spec, bottom, top, defaultColor) {
            if (typeof spec == "string")
                return spec;
            else {
                // assume this is a gradient spec; IE currently only
                // supports a simple vertical gradient properly, so that's
                // what we support too
                var gradient = ctx.createLinearGradient(0, top, 0, bottom);

                for (var i = 0, l = spec.colors.length; i < l; ++i) {
                    var c = spec.colors[i];
                    if (typeof c != "string") {
                        var co = $.color.parse(defaultColor);
                        if (c.brightness != null)
                            co = co.scale('rgb', c.brightness);
                        if (c.opacity != null)
                            co.a *= c.opacity;
                        c = co.toString();
                    }
                    gradient.addColorStop(i / (l - 1), c);
                }

                return gradient;
            }
        }
    }

    // Add the plot function to the top level of the jQuery object

    $.plot = function(placeholder, data, options) {
        //var t0 = new Date();
        var plot = new Plot($(placeholder), data, options, $.plot.plugins);
        //(window.console ? console.log : alert)("time used (msecs): " + ((new Date()).getTime() - t0.getTime()));
        return plot;
    };

    $.plot.version = "0.8.2";

    $.plot.plugins = [];

    // Also add the plot function as a chainable property

    $.fn.plot = function(data, options) {
        return this.each(function() {
            $.plot(this, data, options);
        });
    };

    // round to nearby lower multiple of base
    function floorInBase(n, base) {
        return base * Math.floor(n / base);
    }

})(jQuery);

/* Flot plugin for rendering pie charts.

Copyright (c) 2007-2013 IOLA and Ole Laursen.
Licensed under the MIT license.

The plugin assumes that each series has a single data value, and that each
value is a positive integer or zero.  Negative numbers don't make sense for a
pie chart, and have unpredictable results.  The values do NOT need to be
passed in as percentages; the plugin will calculate the total and per-slice
percentages internally.

* Created by Brian Medendorp

* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars

The plugin supports these options:

	series: {
		pie: {
			show: true/false
			radius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'
			innerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect
			startAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result
			tilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)
			offset: {
				top: integer value to move the pie up or down
				left: integer value to move the pie left or right, or 'auto'
			},
			stroke: {
				color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')
				width: integer pixel width of the stroke
			},
			label: {
				show: true/false, or 'auto'
				formatter:  a user-defined function that modifies the text/style of the label text
				radius: 0-1 for percentage of fullsize, or a specified pixel length
				background: {
					color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')
					opacity: 0-1
				},
				threshold: 0-1 for the percentage value at which to hide labels (if they're too small)
			},
			combine: {
				threshold: 0-1 for the percentage value at which to combine slices (if they're too small)
				color: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined
				label: any text value of what the combined slice should be labeled
			}
			highlight: {
				opacity: 0-1
			}
		}
	}

More detail and specific examples can be found in the included HTML file.

*/

(function($) {

	// Maximum redraw attempts when fitting labels within the plot

	var REDRAW_ATTEMPTS = 10;

	// Factor by which to shrink the pie when fitting labels within the plot

	var REDRAW_SHRINK = 0.95;

	function init(plot) {

		var canvas = null,
			target = null,
			options = null,
			maxRadius = null,
			centerLeft = null,
			centerTop = null,
			processed = false,
			ctx = null;

		// interactive variables

		var highlights = [];

		// add hook to determine if pie plugin in enabled, and then perform necessary operations

		plot.hooks.processOptions.push(function(plot, options) {
			if (options.series.pie.show) {

				options.grid.show = false;

				// set labels.show

				if (options.series.pie.label.show == "auto") {
					if (options.legend.show) {
						options.series.pie.label.show = false;
					} else {
						options.series.pie.label.show = true;
					}
				}

				// set radius

				if (options.series.pie.radius == "auto") {
					if (options.series.pie.label.show) {
						options.series.pie.radius = 3/4;
					} else {
						options.series.pie.radius = 1;
					}
				}

				// ensure sane tilt

				if (options.series.pie.tilt > 1) {
					options.series.pie.tilt = 1;
				} else if (options.series.pie.tilt < 0) {
					options.series.pie.tilt = 0;
				}
			}
		});

		plot.hooks.bindEvents.push(function(plot, eventHolder) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				if (options.grid.hoverable) {
					eventHolder.unbind("mousemove").mousemove(onMouseMove);
				}
				if (options.grid.clickable) {
					eventHolder.unbind("click").click(onClick);
				}
			}
		});

		plot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				processDatapoints(plot, series, data, datapoints);
			}
		});

		plot.hooks.drawOverlay.push(function(plot, octx) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				drawOverlay(plot, octx);
			}
		});

		plot.hooks.draw.push(function(plot, newCtx) {
			var options = plot.getOptions();
			if (options.series.pie.show) {
				draw(plot, newCtx);
			}
		});

		function processDatapoints(plot, series, datapoints) {
			if (!processed)	{
				processed = true;
				canvas = plot.getCanvas();
				target = $(canvas).parent();
				options = plot.getOptions();
				plot.setData(combine(plot.getData()));
			}
		}

		function combine(data) {

			var total = 0,
				combined = 0,
				numCombined = 0,
				color = options.series.pie.combine.color,
				newdata = [];

			// Fix up the raw data from Flot, ensuring the data is numeric

			for (var i = 0; i < data.length; ++i) {

				var value = data[i].data;

				// If the data is an array, we'll assume that it's a standard
				// Flot x-y pair, and are concerned only with the second value.

				// Note how we use the original array, rather than creating a
				// new one; this is more efficient and preserves any extra data
				// that the user may have stored in higher indexes.

				if ($.isArray(value) && value.length == 1) {
    				value = value[0];
				}

				if ($.isArray(value)) {
					// Equivalent to $.isNumeric() but compatible with jQuery < 1.7
					if (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {
						value[1] = +value[1];
					} else {
						value[1] = 0;
					}
				} else if (!isNaN(parseFloat(value)) && isFinite(value)) {
					value = [1, +value];
				} else {
					value = [1, 0];
				}

				data[i].data = [value];
			}

			// Sum up all the slices, so we can calculate percentages for each

			for (var i = 0; i < data.length; ++i) {
				total += data[i].data[0][1];
			}

			// Count the number of slices with percentages below the combine
			// threshold; if it turns out to be just one, we won't combine.

			for (var i = 0; i < data.length; ++i) {
				var value = data[i].data[0][1];
				if (value / total <= options.series.pie.combine.threshold) {
					combined += value;
					numCombined++;
					if (!color) {
						color = data[i].color;
					}
				}
			}

			for (var i = 0; i < data.length; ++i) {
				var value = data[i].data[0][1];
				if (numCombined < 2 || value / total > options.series.pie.combine.threshold) {
					newdata.push({
						data: [[1, value]],
						color: data[i].color,
						label: data[i].label,
						angle: value * Math.PI * 2 / total,
						percent: value / (total / 100)
					});
				}
			}

			if (numCombined > 1) {
				newdata.push({
					data: [[1, combined]],
					color: color,
					label: options.series.pie.combine.label,
					angle: combined * Math.PI * 2 / total,
					percent: combined / (total / 100)
				});
			}

			return newdata;
		}

		function draw(plot, newCtx) {

			if (!target) {
				return; // if no series were passed
			}

			var canvasWidth = plot.getPlaceholder().width(),
				canvasHeight = plot.getPlaceholder().height(),
				legendWidth = target.children().filter(".legend").children().width() || 0;

			ctx = newCtx;

			// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!

			// When combining smaller slices into an 'other' slice, we need to
			// add a new series.  Since Flot gives plugins no way to modify the
			// list of series, the pie plugin uses a hack where the first call
			// to processDatapoints results in a call to setData with the new
			// list of series, then subsequent processDatapoints do nothing.

			// The plugin-global 'processed' flag is used to control this hack;
			// it starts out false, and is set to true after the first call to
			// processDatapoints.

			// Unfortunately this turns future setData calls into no-ops; they
			// call processDatapoints, the flag is true, and nothing happens.

			// To fix this we'll set the flag back to false here in draw, when
			// all series have been processed, so the next sequence of calls to
			// processDatapoints once again starts out with a slice-combine.
			// This is really a hack; in 0.9 we need to give plugins a proper
			// way to modify series before any processing begins.

			processed = false;

			// calculate maximum radius and center point

			maxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;
			centerTop = canvasHeight / 2 + options.series.pie.offset.top;
			centerLeft = canvasWidth / 2;

			if (options.series.pie.offset.left == "auto") {
				if (options.legend.position.match("w")) {
					centerLeft += legendWidth / 2;
				} else {
					centerLeft -= legendWidth / 2;
				}
				if (centerLeft < maxRadius) {
					centerLeft = maxRadius;
				} else if (centerLeft > canvasWidth - maxRadius) {
					centerLeft = canvasWidth - maxRadius;
				}
			} else {
				centerLeft += options.series.pie.offset.left;
			}

			var slices = plot.getData(),
				attempts = 0;

			// Keep shrinking the pie's radius until drawPie returns true,
			// indicating that all the labels fit, or we try too many times.

			do {
				if (attempts > 0) {
					maxRadius *= REDRAW_SHRINK;
				}
				attempts += 1;
				clear();
				if (options.series.pie.tilt <= 0.8) {
					drawShadow();
				}
			} while (!drawPie() && attempts < REDRAW_ATTEMPTS)

			if (attempts >= REDRAW_ATTEMPTS) {
				clear();
				target.prepend("<div class='error'>Could not draw pie with labels contained inside canvas</div>");
			}

			if (plot.setSeries && plot.insertLegend) {
				plot.setSeries(slices);
				plot.insertLegend();
			}

			// we're actually done at this point, just defining internal functions at this point

			function clear() {
				ctx.clearRect(0, 0, canvasWidth, canvasHeight);
				target.children().filter(".pieLabel, .pieLabelBackground").remove();
			}

			function drawShadow() {

				var shadowLeft = options.series.pie.shadow.left;
				var shadowTop = options.series.pie.shadow.top;
				var edge = 10;
				var alpha = options.series.pie.shadow.alpha;
				var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

				if (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {
					return;	// shadow would be outside canvas, so don't draw it
				}

				ctx.save();
				ctx.translate(shadowLeft,shadowTop);
				ctx.globalAlpha = alpha;
				ctx.fillStyle = "#000";

				// center and rotate to starting position

				ctx.translate(centerLeft,centerTop);
				ctx.scale(1, options.series.pie.tilt);

				//radius -= edge;

				for (var i = 1; i <= edge; i++) {
					ctx.beginPath();
					ctx.arc(0, 0, radius, 0, Math.PI * 2, false);
					ctx.fill();
					radius -= i;
				}

				ctx.restore();
			}

			function drawPie() {

				var startAngle = Math.PI * options.series.pie.startAngle;
				var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

				// center and rotate to starting position

				ctx.save();
				ctx.translate(centerLeft,centerTop);
				ctx.scale(1, options.series.pie.tilt);
				//ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera

				// draw slices

				ctx.save();
				var currentAngle = startAngle;
				for (var i = 0; i < slices.length; ++i) {
					slices[i].startAngle = currentAngle;
					drawSlice(slices[i].angle, slices[i].color, true);
				}
				ctx.restore();

				// draw slice outlines

				if (options.series.pie.stroke.width > 0) {
					ctx.save();
					ctx.lineWidth = options.series.pie.stroke.width;
					currentAngle = startAngle;
					for (var i = 0; i < slices.length; ++i) {
						drawSlice(slices[i].angle, options.series.pie.stroke.color, false);
					}
					ctx.restore();
				}

				// draw donut hole

				drawDonutHole(ctx);

				ctx.restore();

				// Draw the labels, returning true if they fit within the plot

				if (options.series.pie.label.show) {
					return drawLabels();
				} else return true;

				function drawSlice(angle, color, fill) {

					if (angle <= 0 || isNaN(angle)) {
						return;
					}

					if (fill) {
						ctx.fillStyle = color;
					} else {
						ctx.strokeStyle = color;
						ctx.lineJoin = "round";
					}

					ctx.beginPath();
					if (Math.abs(angle - Math.PI * 2) > 0.000000001) {
						ctx.moveTo(0, 0); // Center of the pie
					}

					//ctx.arc(0, 0, radius, 0, angle, false); // This doesn't work properly in Opera
					ctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);
					ctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);
					ctx.closePath();
					//ctx.rotate(angle); // This doesn't work properly in Opera
					currentAngle += angle;

					if (fill) {
						ctx.fill();
					} else {
						ctx.stroke();
					}
				}

				function drawLabels() {

					var currentAngle = startAngle;
					var radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;

					for (var i = 0; i < slices.length; ++i) {
						if (slices[i].percent >= options.series.pie.label.threshold * 100) {
							if (!drawLabel(slices[i], currentAngle, i)) {
								return false;
							}
						}
						currentAngle += slices[i].angle;
					}

					return true;

					function drawLabel(slice, startAngle, index) {

						if (slice.data[0][1] == 0) {
							return true;
						}

						// format label text

						var lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;

						if (lf) {
							text = lf(slice.label, slice);
						} else {
							text = slice.label;
						}

						if (plf) {
							text = plf(text, slice);
						}

						var halfAngle = ((startAngle + slice.angle) + startAngle) / 2;
						var x = centerLeft + Math.round(Math.cos(halfAngle) * radius);
						var y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;

						var html = "<span class='pieLabel' id='pieLabel" + index + "' style='position:absolute;top:" + y + "px;left:" + x + "px;'>" + text + "</span>";
						target.append(html);

						var label = target.children("#pieLabel" + index);
						var labelTop = (y - label.height() / 2);
						var labelLeft = (x - label.width() / 2);

						label.css("top", labelTop);
						label.css("left", labelLeft);

						// check to make sure that the label is not outside the canvas

						if (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {
							return false;
						}

						if (options.series.pie.label.background.opacity != 0) {

							// put in the transparent background separately to avoid blended labels and label boxes

							var c = options.series.pie.label.background.color;

							if (c == null) {
								c = slice.color;
							}

							var pos = "top:" + labelTop + "px;left:" + labelLeft + "px;";
							$("<div class='pieLabelBackground' style='position:absolute;width:" + label.width() + "px;height:" + label.height() + "px;" + pos + "background-color:" + c + ";'></div>")
								.css("opacity", options.series.pie.label.background.opacity)
								.insertBefore(label);
						}

						return true;
					} // end individual label function
				} // end drawLabels function
			} // end drawPie function
		} // end draw function

		// Placed here because it needs to be accessed from multiple locations

		function drawDonutHole(layer) {
			if (options.series.pie.innerRadius > 0) {

				// subtract the center

				layer.save();
				var innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;
				layer.globalCompositeOperation = "destination-out"; // this does not work with excanvas, but it will fall back to using the stroke color
				layer.beginPath();
				layer.fillStyle = options.series.pie.stroke.color;
				layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);
				layer.fill();
				layer.closePath();
				layer.restore();

				// add inner stroke

				layer.save();
				layer.beginPath();
				layer.strokeStyle = options.series.pie.stroke.color;
				layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);
				layer.stroke();
				layer.closePath();
				layer.restore();

				// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.
			}
		}

		//-- Additional Interactive related functions --

		function isPointInPoly(poly, pt) {
			for(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)
				((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))
				&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])
				&& (c = !c);
			return c;
		}

		function findNearbySlice(mouseX, mouseY) {

			var slices = plot.getData(),
				options = plot.getOptions(),
				radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,
				x, y;

			for (var i = 0; i < slices.length; ++i) {

				var s = slices[i];

				if (s.pie.show) {

					ctx.save();
					ctx.beginPath();
					ctx.moveTo(0, 0); // Center of the pie
					//ctx.scale(1, options.series.pie.tilt);	// this actually seems to break everything when here.
					ctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);
					ctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);
					ctx.closePath();
					x = mouseX - centerLeft;
					y = mouseY - centerTop;

					if (ctx.isPointInPath) {
						if (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {
							ctx.restore();
							return {
								datapoint: [s.percent, s.data],
								dataIndex: 0,
								series: s,
								seriesIndex: i
							};
						}
					} else {

						// excanvas for IE doesn;t support isPointInPath, this is a workaround.

						var p1X = radius * Math.cos(s.startAngle),
							p1Y = radius * Math.sin(s.startAngle),
							p2X = radius * Math.cos(s.startAngle + s.angle / 4),
							p2Y = radius * Math.sin(s.startAngle + s.angle / 4),
							p3X = radius * Math.cos(s.startAngle + s.angle / 2),
							p3Y = radius * Math.sin(s.startAngle + s.angle / 2),
							p4X = radius * Math.cos(s.startAngle + s.angle / 1.5),
							p4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),
							p5X = radius * Math.cos(s.startAngle + s.angle),
							p5Y = radius * Math.sin(s.startAngle + s.angle),
							arrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],
							arrPoint = [x, y];

						// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?

						if (isPointInPoly(arrPoly, arrPoint)) {
							ctx.restore();
							return {
								datapoint: [s.percent, s.data],
								dataIndex: 0,
								series: s,
								seriesIndex: i
							};
						}
					}

					ctx.restore();
				}
			}

			return null;
		}

		function onMouseMove(e) {
			triggerClickHoverEvent("plothover", e);
		}

		function onClick(e) {
			triggerClickHoverEvent("plotclick", e);
		}

		// trigger click or hover event (they send the same parameters so we share their code)

		function triggerClickHoverEvent(eventname, e) {

			var offset = plot.offset();
			var canvasX = parseInt(e.pageX - offset.left);
			var canvasY =  parseInt(e.pageY - offset.top);
			var item = findNearbySlice(canvasX, canvasY);

			if (options.grid.autoHighlight) {

				// clear auto-highlights

				for (var i = 0; i < highlights.length; ++i) {
					var h = highlights[i];
					if (h.auto == eventname && !(item && h.series == item.series)) {
						unhighlight(h.series);
					}
				}
			}

			// highlight the slice

			if (item) {
				highlight(item.series, eventname);
			}

			// trigger any hover bind events

			var pos = { pageX: e.pageX, pageY: e.pageY };
			target.trigger(eventname, [pos, item]);
		}

		function highlight(s, auto) {
			//if (typeof s == "number") {
			//	s = series[s];
			//}

			var i = indexOfHighlight(s);

			if (i == -1) {
				highlights.push({ series: s, auto: auto });
				plot.triggerRedrawOverlay();
			} else if (!auto) {
				highlights[i].auto = false;
			}
		}

		function unhighlight(s) {
			if (s == null) {
				highlights = [];
				plot.triggerRedrawOverlay();
			}

			//if (typeof s == "number") {
			//	s = series[s];
			//}

			var i = indexOfHighlight(s);

			if (i != -1) {
				highlights.splice(i, 1);
				plot.triggerRedrawOverlay();
			}
		}

		function indexOfHighlight(s) {
			for (var i = 0; i < highlights.length; ++i) {
				var h = highlights[i];
				if (h.series == s)
					return i;
			}
			return -1;
		}

		function drawOverlay(plot, octx) {

			var options = plot.getOptions();

			var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;

			octx.save();
			octx.translate(centerLeft, centerTop);
			octx.scale(1, options.series.pie.tilt);

			for (var i = 0; i < highlights.length; ++i) {
				drawHighlight(highlights[i].series);
			}

			drawDonutHole(octx);

			octx.restore();

			function drawHighlight(series) {

				if (series.angle <= 0 || isNaN(series.angle)) {
					return;
				}

				//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();
				octx.fillStyle = "rgba(255, 255, 255, " + options.series.pie.highlight.opacity + ")"; // this is temporary until we have access to parseColor
				octx.beginPath();
				if (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {
					octx.moveTo(0, 0); // Center of the pie
				}
				octx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);
				octx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);
				octx.closePath();
				octx.fill();
			}
		}
	} // end init (plugin body)

	// define pie specific options and their default values

	var options = {
		series: {
			pie: {
				show: false,
				radius: "auto",	// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)
				innerRadius: 0, /* for donut */
				startAngle: 3/2,
				tilt: 1,
				shadow: {
					left: 5,	// shadow left offset
					top: 15,	// shadow top offset
					alpha: 0.02	// shadow alpha
				},
				offset: {
					top: 0,
					left: "auto"
				},
				stroke: {
					color: "#fff",
					width: 1
				},
				label: {
					show: "auto",
					formatter: function(label, slice) {
						return "<div style='font-size:x-small;text-align:center;padding:2px;color:" + slice.color + ";'>" + label + "<br/>" + Math.round(slice.percent) + "%</div>";
					},	// formatter function
					radius: 1,	// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)
					background: {
						color: null,
						opacity: 0
					},
					threshold: 0	// percentage at which to hide the label (i.e. the slice is too narrow)
				},
				combine: {
					threshold: -1,	// percentage at which to combine little slices into one larger slice
					color: null,	// color to give the new slice (auto-generated if null)
					label: "Other"	// label to give the new slice
				},
				highlight: {
					//color: "#fff",		// will add this functionality once parseColor is available
					opacity: 0.5
				}
			}
		}
	};

	$.plot.plugins.push({
		init: init,
		options: options,
		name: "pie",
		version: "1.1"
	});

})(jQuery);

/* Pretty handling of time axes.

Copyright (c) 2007-2013 IOLA and Ole Laursen.
Licensed under the MIT license.

Set axis.mode to "time" to enable. See the section "Time series data" in
API.txt for details.

*/

(function($) {

	var options = {
		xaxis: {
			timezone: null,		// "browser" for local to the client or timezone for timezone-js
			timeformat: null,	// format string to use
			twelveHourClock: false,	// 12 or 24 time in time mode
			monthNames: null	// list of names of months
		}
	};

	// round to nearby lower multiple of base

	function floorInBase(n, base) {
		return base * Math.floor(n / base);
	}

	// Returns a string with the date d formatted according to fmt.
	// A subset of the Open Group's strftime format is supported.

	function formatDate(d, fmt, monthNames, dayNames) {

		if (typeof d.strftime == "function") {
			return d.strftime(fmt);
		}

		var leftPad = function(n, pad) {
			n = "" + n;
			pad = "" + (pad == null ? "0" : pad);
			return n.length == 1 ? pad + n : n;
		};

		var r = [];
		var escape = false;
		var hours = d.getHours();
		var isAM = hours < 12;

		if (monthNames == null) {
			monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
		}

		if (dayNames == null) {
			dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
		}

		var hours12;

		if (hours > 12) {
			hours12 = hours - 12;
		} else if (hours == 0) {
			hours12 = 12;
		} else {
			hours12 = hours;
		}

		for (var i = 0; i < fmt.length; ++i) {

			var c = fmt.charAt(i);

			if (escape) {
				switch (c) {
					case 'a': c = "" + dayNames[d.getDay()]; break;
					case 'b': c = "" + monthNames[d.getMonth()]; break;
					case 'd': c = leftPad(d.getDate()); break;
					case 'e': c = leftPad(d.getDate(), " "); break;
					case 'h':	// For back-compat with 0.7; remove in 1.0
					case 'H': c = leftPad(hours); break;
					case 'I': c = leftPad(hours12); break;
					case 'l': c = leftPad(hours12, " "); break;
					case 'm': c = leftPad(d.getMonth() + 1); break;
					case 'M': c = leftPad(d.getMinutes()); break;
					// quarters not in Open Group's strftime specification
					case 'q':
						c = "" + (Math.floor(d.getMonth() / 3) + 1); break;
					case 'S': c = leftPad(d.getSeconds()); break;
					case 'y': c = leftPad(d.getFullYear() % 100); break;
					case 'Y': c = "" + d.getFullYear(); break;
					case 'p': c = (isAM) ? ("" + "am") : ("" + "pm"); break;
					case 'P': c = (isAM) ? ("" + "AM") : ("" + "PM"); break;
					case 'w': c = "" + d.getDay(); break;
				}
				r.push(c);
				escape = false;
			} else {
				if (c == "%") {
					escape = true;
				} else {
					r.push(c);
				}
			}
		}

		return r.join("");
	}

	// To have a consistent view of time-based data independent of which time
	// zone the client happens to be in we need a date-like object independent
	// of time zones.  This is done through a wrapper that only calls the UTC
	// versions of the accessor methods.

	function makeUtcWrapper(d) {

		function addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {
			sourceObj[sourceMethod] = function() {
				return targetObj[targetMethod].apply(targetObj, arguments);
			};
		};

		var utc = {
			date: d
		};

		// support strftime, if found

		if (d.strftime != undefined) {
			addProxyMethod(utc, "strftime", d, "strftime");
		}

		addProxyMethod(utc, "getTime", d, "getTime");
		addProxyMethod(utc, "setTime", d, "setTime");

		var props = ["Date", "Day", "FullYear", "Hours", "Milliseconds", "Minutes", "Month", "Seconds"];

		for (var p = 0; p < props.length; p++) {
			addProxyMethod(utc, "get" + props[p], d, "getUTC" + props[p]);
			addProxyMethod(utc, "set" + props[p], d, "setUTC" + props[p]);
		}

		return utc;
	};

	// select time zone strategy.  This returns a date-like object tied to the
	// desired timezone

	function dateGenerator(ts, opts) {
		if (opts.timezone == "browser") {
			return new Date(ts);
		} else if (!opts.timezone || opts.timezone == "utc") {
			return makeUtcWrapper(new Date(ts));
		} else if (typeof timezoneJS != "undefined" && typeof timezoneJS.Date != "undefined") {
			var d = new timezoneJS.Date();
			// timezone-js is fickle, so be sure to set the time zone before
			// setting the time.
			d.setTimezone(opts.timezone);
			d.setTime(ts);
			return d;
		} else {
			return makeUtcWrapper(new Date(ts));
		}
	}
	
	// map of app. size of time units in milliseconds

	var timeUnitSize = {
		"second": 1000,
		"minute": 60 * 1000,
		"hour": 60 * 60 * 1000,
		"day": 24 * 60 * 60 * 1000,
		"month": 30 * 24 * 60 * 60 * 1000,
		"quarter": 3 * 30 * 24 * 60 * 60 * 1000,
		"year": 365.2425 * 24 * 60 * 60 * 1000
	};

	// the allowed tick sizes, after 1 year we use
	// an integer algorithm

	var baseSpec = [
		[1, "second"], [2, "second"], [5, "second"], [10, "second"],
		[30, "second"], 
		[1, "minute"], [2, "minute"], [5, "minute"], [10, "minute"],
		[30, "minute"], 
		[1, "hour"], [2, "hour"], [4, "hour"],
		[8, "hour"], [12, "hour"],
		[1, "day"], [2, "day"], [3, "day"],
		[0.25, "month"], [0.5, "month"], [1, "month"],
		[2, "month"]
	];

	// we don't know which variant(s) we'll need yet, but generating both is
	// cheap

	var specMonths = baseSpec.concat([[3, "month"], [6, "month"],
		[1, "year"]]);
	var specQuarters = baseSpec.concat([[1, "quarter"], [2, "quarter"],
		[1, "year"]]);

	function init(plot) {
		plot.hooks.processOptions.push(function (plot, options) {
			$.each(plot.getAxes(), function(axisName, axis) {

				var opts = axis.options;

				if (opts.mode == "time") {
					axis.tickGenerator = function(axis) {

						var ticks = [];
						var d = dateGenerator(axis.min, opts);
						var minSize = 0;

						// make quarter use a possibility if quarters are
						// mentioned in either of these options

						var spec = (opts.tickSize && opts.tickSize[1] ===
							"quarter") ||
							(opts.minTickSize && opts.minTickSize[1] ===
							"quarter") ? specQuarters : specMonths;

						if (opts.minTickSize != null) {
							if (typeof opts.tickSize == "number") {
								minSize = opts.tickSize;
							} else {
								minSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];
							}
						}

						for (var i = 0; i < spec.length - 1; ++i) {
							if (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]
											  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2
								&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {
								break;
							}
						}

						var size = spec[i][0];
						var unit = spec[i][1];

						// special-case the possibility of several years

						if (unit == "year") {

							// if given a minTickSize in years, just use it,
							// ensuring that it's an integer

							if (opts.minTickSize != null && opts.minTickSize[1] == "year") {
								size = Math.floor(opts.minTickSize[0]);
							} else {

								var magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));
								var norm = (axis.delta / timeUnitSize.year) / magn;

								if (norm < 1.5) {
									size = 1;
								} else if (norm < 3) {
									size = 2;
								} else if (norm < 7.5) {
									size = 5;
								} else {
									size = 10;
								}

								size *= magn;
							}

							// minimum size for years is 1

							if (size < 1) {
								size = 1;
							}
						}

						axis.tickSize = opts.tickSize || [size, unit];
						var tickSize = axis.tickSize[0];
						unit = axis.tickSize[1];

						var step = tickSize * timeUnitSize[unit];

						if (unit == "second") {
							d.setSeconds(floorInBase(d.getSeconds(), tickSize));
						} else if (unit == "minute") {
							d.setMinutes(floorInBase(d.getMinutes(), tickSize));
						} else if (unit == "hour") {
							d.setHours(floorInBase(d.getHours(), tickSize));
						} else if (unit == "month") {
							d.setMonth(floorInBase(d.getMonth(), tickSize));
						} else if (unit == "quarter") {
							d.setMonth(3 * floorInBase(d.getMonth() / 3,
								tickSize));
						} else if (unit == "year") {
							d.setFullYear(floorInBase(d.getFullYear(), tickSize));
						}

						// reset smaller components

						d.setMilliseconds(0);

						if (step >= timeUnitSize.minute) {
							d.setSeconds(0);
						}
						if (step >= timeUnitSize.hour) {
							d.setMinutes(0);
						}
						if (step >= timeUnitSize.day) {
							d.setHours(0);
						}
						if (step >= timeUnitSize.day * 4) {
							d.setDate(1);
						}
						if (step >= timeUnitSize.month * 2) {
							d.setMonth(floorInBase(d.getMonth(), 3));
						}
						if (step >= timeUnitSize.quarter * 2) {
							d.setMonth(floorInBase(d.getMonth(), 6));
						}
						if (step >= timeUnitSize.year) {
							d.setMonth(0);
						}

						var carry = 0;
						var v = Number.NaN;
						var prev;

						do {

							prev = v;
							v = d.getTime();
							ticks.push(v);

							if (unit == "month" || unit == "quarter") {
								if (tickSize < 1) {

									// a bit complicated - we'll divide the
									// month/quarter up but we need to take
									// care of fractions so we don't end up in
									// the middle of a day

									d.setDate(1);
									var start = d.getTime();
									d.setMonth(d.getMonth() +
										(unit == "quarter" ? 3 : 1));
									var end = d.getTime();
									d.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);
									carry = d.getHours();
									d.setHours(0);
								} else {
									d.setMonth(d.getMonth() +
										tickSize * (unit == "quarter" ? 3 : 1));
								}
							} else if (unit == "year") {
								d.setFullYear(d.getFullYear() + tickSize);
							} else {
								d.setTime(v + step);
							}
						} while (v < axis.max && v != prev);

						return ticks;
					};

					axis.tickFormatter = function (v, axis) {

						var d = dateGenerator(v, axis.options);

						// first check global format

						if (opts.timeformat != null) {
							return formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);
						}

						// possibly use quarters if quarters are mentioned in
						// any of these places

						var useQuarters = (axis.options.tickSize &&
								axis.options.tickSize[1] == "quarter") ||
							(axis.options.minTickSize &&
								axis.options.minTickSize[1] == "quarter");

						var t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];
						var span = axis.max - axis.min;
						var suffix = (opts.twelveHourClock) ? " %p" : "";
						var hourCode = (opts.twelveHourClock) ? "%I" : "%H";
						var fmt;

						if (t < timeUnitSize.minute) {
							fmt = hourCode + ":%M:%S" + suffix;
						} else if (t < timeUnitSize.day) {
							if (span < 2 * timeUnitSize.day) {
								fmt = hourCode + ":%M" + suffix;
							} else {
								fmt = "%b %d " + hourCode + ":%M" + suffix;
							}
						} else if (t < timeUnitSize.month) {
							fmt = "%b %d";
						} else if ((useQuarters && t < timeUnitSize.quarter) ||
							(!useQuarters && t < timeUnitSize.year)) {
							if (span < timeUnitSize.year) {
								fmt = "%b";
							} else {
								fmt = "%b %Y";
							}
						} else if (useQuarters && t < timeUnitSize.year) {
							if (span < timeUnitSize.year) {
								fmt = "Q%q";
							} else {
								fmt = "Q%q %Y";
							}
						} else {
							fmt = "%Y";
						}

						var rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);

						return rt;
					};
				}
			});
		});
	}

	$.plot.plugins.push({
		init: init,
		options: options,
		name: 'time',
		version: '1.0'
	});

	// Time-axis support used to be in Flot core, which exposed the
	// formatDate function on the plot object.  Various plugins depend
	// on the function, so we need to re-expose it here.

	$.plot.formatDate = formatDate;

})(jQuery);

/* Flot plugin for automatically redrawing plots as the placeholder resizes.

Copyright (c) 2007-2013 IOLA and Ole Laursen.
Licensed under the MIT license.

It works by listening for changes on the placeholder div (through the jQuery
resize event plugin) - if the size changes, it will redraw the plot.

There are no options. If you need to disable the plugin for some plots, you
can just fix the size of their placeholders.

*/

/* Inline dependency:
 * jQuery resize event - v1.1 - 3/14/2010
 * http://benalman.com/projects/jquery-resize-plugin/
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

(function($,t,n){function p(){for(var n=r.length-1;n>=0;n--){var o=$(r[n]);if(o[0]==t||o.is(":visible")){var h=o.width(),d=o.height(),v=o.data(a);!v||h===v.w&&d===v.h?i[f]=i[l]:(i[f]=i[c],o.trigger(u,[v.w=h,v.h=d]))}else v=o.data(a),v.w=0,v.h=0}s!==null&&(s=t.requestAnimationFrame(p))}var r=[],i=$.resize=$.extend($.resize,{}),s,o="setTimeout",u="resize",a=u+"-special-event",f="delay",l="pendingDelay",c="activeDelay",h="throttleWindow";i[l]=250,i[c]=20,i[f]=i[l],i[h]=!0,$.event.special[u]={setup:function(){if(!i[h]&&this[o])return!1;var t=$(this);r.push(this),t.data(a,{w:t.width(),h:t.height()}),r.length===1&&(s=n,p())},teardown:function(){if(!i[h]&&this[o])return!1;var t=$(this);for(var n=r.length-1;n>=0;n--)if(r[n]==this){r.splice(n,1);break}t.removeData(a),r.length||(cancelAnimationFrame(s),s=null)},add:function(t){function s(t,i,s){var o=$(this),u=o.data(a);u.w=i!==n?i:o.width(),u.h=s!==n?s:o.height(),r.apply(this,arguments)}if(!i[h]&&this[o])return!1;var r;if($.isFunction(t))return r=t,s;r=t.handler,t.handler=s}},t.requestAnimationFrame||(t.requestAnimationFrame=function(){return t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(e,n){return t.setTimeout(e,i[f])}}()),t.cancelAnimationFrame||(t.cancelAnimationFrame=function(){return t.webkitCancelRequestAnimationFrame||t.mozCancelRequestAnimationFrame||t.oCancelRequestAnimationFrame||t.msCancelRequestAnimationFrame||clearTimeout}())})(jQuery,this);

(function ($) {
    var options = { }; // no options

    function init(plot) {
        function onResize() {
            var placeholder = plot.getPlaceholder();

            // somebody might have hidden us and we can't plot
            // when we don't have the dimensions
            if (placeholder.width() == 0 || placeholder.height() == 0)
                return;

            plot.resize();
            plot.setupGrid();
            plot.draw();
        }
        
        function bindEvents(plot, eventHolder) {
            plot.getPlaceholder().resize(onResize);
        }

        function shutdown(plot, eventHolder) {
            plot.getPlaceholder().unbind("resize", onResize);
        }
        
        plot.hooks.bindEvents.push(bindEvents);
        plot.hooks.shutdown.push(shutdown);
    }
    
    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'resize',
        version: '1.0'
    });
})(jQuery);


(function(kafe, App, undefined){

	var
		$ = kafe.dependencies.jQuery,
		_ = kafe.dependencies.LoDash,
		Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

		// selectors

		// private vars
		Module._defaultSettings = {
			grid: {
				backgroundColor: '#fff',
				borderWidth: { top:0, right:0, bottom:1, left:1 },
				borderColor: '#1d1d1b',
				margin: { top:16, right:32, bottom:4, left:0 },
				marking: [ { xaxis: { from: 0, to: 2 }, yaxis: { from: 10, to: 10 }, color: "#1d1d1b" } ]
			},
			yaxis: {
				font: { size:12, weight:'bold', color:'#737373' },
				tickColor: '#f1f1f1'
			},
			xaxis: {
				font: { size:12, color:'#737373', lineHeight:32 },
				tickColor: '#f1f1f1'
			},
			series: {
				shadowSize: 0
			},
			colors: ['#19a69d', '#fdab51', '#fecb8f', '#2d78b5', '#67e6f7'],
			legend: {
				show: true
			}
		};

		// private functions
		Module._build = function(container, data, options) {

			var chart = $.plot(container, data, $.extend(true, Module._defaultSettings, options));
			chart.draw();
			return chart;

		};
		Module._refresh = function(chart, data, options) {
            var _currentOptions = chart.getOptions();

            var axes = chart.getAxes();
            axes.yaxis.options.min = options.yaxis.min;
            axes.yaxis.options.max = options.yaxis.max;

			chart.setData(data);
			chart.setupGrid();
			chart.draw();

		};

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {


	};


	/*- Listen for triggers ----------------------------------------------------------*/
	Module.Listen = function() {


	};


	/*- To execute on start ----------------------------------------------------------*/
	Module.Start = function() {
		

	};


	/*- Public methods ---------------------------------------------------------------*/
	App.BaseChart = {};

	App.BaseChart.Build = function(container, data, options) {
		return Module._build(container, data, options);
	};
	App.BaseChart.Refresh = function(chart, data, options) {
		Module._refresh(chart, data, options);
	};




	$(function() {
		Module.Cache();
		Module.Bind();
		Module.Listen();
		Module.Start();
	});

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
// PLATFORM SCHEMA UTILS
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

	var
		$ = kafe.dependencies.jQuery,
		_ = kafe.dependencies.LoDash,
		Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};

	Module._resizeTimeout = null;


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

		// selectors

		// private functions
		Module._resizePlatformSchemas = function() {
			$('.platform-schema').each(function(i, val) {

				var _platform = $(this);
				var _front = _platform.find('.front'), _back = _platform.find('.back');

				//_front.find('.node').kafe('style.equalHeight', { resetHeight: true });
				kafe.style.equalHeight(_front.find('.node'), { resetHeight: true });
				_front.height(_front.find('.nodes').height());

				//_front.find('.node').kafe('style.equalHeight', { resetHeight: true });
				kafe.style.equalHeight(_back.find('.hub-node'), { resetHeight: true });

			});
		};

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {


	};


	/*- Listen for triggers ----------------------------------------------------------*/
	Module.Listen = function() {

		App.dom.window
			.on('resize', function(e) {
				clearTimeout(Module._resizeTimeout);
				Module._resizeTimeout = setTimeout(Module._resizePlatformSchemas, 10);
			});

	};


	/*- To execute on start ----------------------------------------------------------*/
	Module.Start = function() {
		

	};


	/*- Public methods ---------------------------------------------------------------*/
	App.PlatformSchemas = {};

	App.PlatformSchemas.ResizeToContent = function() {
		Module._resizePlatformSchemas();
	};




	$(function() {
		Module.Cache();
		Module.Bind();
		Module.Listen();
		Module.Start();
	});

})(window.kafe, window.kontron);


/*------------------------------------------------------------------------------------//
// PAGE-HEADER
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

	var
		$ = kafe.dependencies.jQuery,
		_ = kafe.dependencies.LoDash,
		Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

		// selectors
		Module.$self = App.dom.has('context', 'page-header');
		Module.$logo = App.dom.has('behavior', 'logo', Module.$self);

		// private vars

		// private functions

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {


	};


	/*- Listen for triggers ----------------------------------------------------------*/
	Module.Listen = function() {

		App.dom.document
			.on('monitor:load', function(e, data) {

				//console.log('page-header, monitor:load');

			})
			.on('monitor:update', function(e, data) {

				//console.log('page-header, monitor:update');

			});

	};


	/*- To execute on start ----------------------------------------------------------*/
	Module.Start = function() {
        if(!!App.SecurityService.GetCachedWebsiteConfig())
        {
            Module.$logo.attr('src', App.SecurityService.GetCachedWebsiteConfig().logo);
        }
	};




	$(function() {
		Module.Cache();
		if (App.Utils.Exists(Module.$self)) {
			Module.Bind();
			Module.Listen();
			Module.Start();
		}
	});

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
// MENUS
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
    ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$drawer_menus = function() { return App.dom.has('behavior', 'drawer-menu'); };
        Module.$main_menu = App.dom.has('behavior', 'main-menu-links');
        Module.$user_menu = App.dom.has('behavior', 'user-menu-links');
        Module.$help_menu = App.dom.has('behavior', 'help-menu-links');

        // private vars

        // private functions
    };


    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        // generic drawer menu
        App.dom.document
            .on('click', App.dom.for('behavior', 'drawer-menu') + ' ' + App.dom.for('action', 'open'), function(e) {
                var _this = $(this), _context = _this.parent();
                if (!_this.hasClass('open')) {
                    Module.$drawer_menus().find('.handle').removeClass('open').filter(this).addClass('open');
                    App.dom.document.off('click.drawer-menu').on('click.drawer-menu', function(e) {
                        if (_context.find(e.target).length === 0) {

                            _this.removeClass('open');
                            if (Module.$drawer_menus().find(e.target).length === 0) {
                                App.dom.document.off('click.drawer-menu');
                            }
                        }
                    });
                } else {
                    _this.removeClass('open');
                    App.dom.document.off('click.drawer-menu');
                }
            });

        // user menu
        Module.$user_menu
            .on('click', App.dom.for('action', 'logout'), function(e) {
                App.SecurityService.Logout();
            });

        // help menu
        Module.$help_menu
            .on('click', App.dom.for('action', 'version'), function(e) {
                e.preventDefault();
                App.VersionServices.GetVersion();
            });
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

    };

    $(function() {
        Module.Cache();
        Module.Bind();
        Module.Listen();
        Module.Start();
    });

})(window.kafe, window.kontron);


/*------------------------------------------------------------------------------------//
// DASHBOARD
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

	var
            $ = kafe.dependencies.jQuery,
            _ = kafe.dependencies.LoDash,
            Modernizr = kafe.dependencies.Modernizr
	;
	
	var Module = {};


	/*- Cache data -------------------------------------------------------------------*/
	Module.Cache = function() {

            // selectors
            Module.$page = App.dom.has('context', 'page-index');
            Module.$multi = App.dom.has('behavior', 'dashboard-multi', Module.$page);
            Module.$console = App.dom.has('behavior', 'dashboard-console', Module.$page);

            // private vars
            
            // private functions
            Module._fillConsoleAccessOptions = function() {
                var _platforms = App.MonitorServices.FindComponents(function(component) {
                    return component.type === 'platform';
                });

                if (_platforms) {
                    $.each(_platforms, function(i, platform) {
                        var _hubnodes = $.grep(platform.components, function(val) {
                            return val.type === 'hubnode';
                        });
                        
                        $.each(_hubnodes, function(j, hubnode) {
                            $("#platform_select").append('<option value="' + hubnode.managementIP + '">' + platform.name + ' ' + hubnode.name + '</option>');
                        });
                        
                    });
                    $('#platform_select').trigger("chosen:updated");
                }
            };

	};


	/*- Bind events ------------------------------------------------------------------*/
	Module.Bind = function() {
            Module.$console
                .on('change', App.dom.for('action', 'update-console-iframe'), function(e) {
                    if ($('#platform_select').val() !== '') {
			$('#console-access-iframe').html("<iframe src='" + document.location.protocol + "//" + $('#platform_select').val() + "/shell/' height='500' width='100%' id='console-iframe'></iframe>");
                    }
                })
                .on('click', $('#console-access-iframe'), function(e) {
                    console.log('Click head');
                    window.scrollTo(0, document.body.scrollHeight);
                })
                .on('click', $('#console-iframe'), function(e) {
                    console.log('Click frame');
                    window.scrollTo(0, document.body.scrollHeight);
                });
	};


	/*- Listen for triggers ----------------------------------------------------------*/
	Module.Listen = function() {

            App.dom.document
                .on('monitor:load', function(e, data) {

                    // Store
                    var model = new App.Models.ComponentViewModel(data);
                    var _template = App.tmpl.dashboard_multi_platform.render(model);

                    Module.$multi
                            .find('> .header .title').text(data.name).end()
                            .find('> .header .health-icon').addClass(data.health).end()
                            .find('.content').html(_template);

                    Module._fillConsoleAccessOptions();
                })
                .on('monitor:update', function(e, data) {
                    var model = new App.Models.ComponentViewModel(data);
                    var _template = App.tmpl.dashboard_multi_platform.render(model);

                    Module.$multi.find('> .content').html(_template);
                });

	};


	/*- To execute on start ----------------------------------------------------------*/
	Module.Start = function() {
		
		App.BaseBreadcrumb.SetPath([
			{ text: 'Dashboard' }
		]);

	};




	$(function() {
		Module.Cache();
		if (App.Utils.Exists(Module.$page)) {
			Module.Bind();
			Module.Listen();
			Module.Start();
		}
	});

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // PAGE-HEADER
 //------------------------------------------------------------------------------------*/



(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$currentPlatform = 0;

        Module.$page = App.dom.has('context', 'page-monitor');
        Module.$multi_tree = App.dom.has('behavior', 'monitor-multi-tree', Module.$page);
        Module.$page_output = App.dom.has('behavior', 'page-output', Module.$page);

        Module.$monitor_component_general = function() { return App.dom.has('behavior', 'component-general', Module.$page); };
        Module.$monitor_fru = function() { return App.dom.has('behavior', 'fru-information', Module.$page); };
        Module.$monitor_component_psu_table = function(){ return App.dom.has('behavior', 'psu-table', Module.$page); };
        Module.$monitor_platform_schema = function() { return App.dom.has('behavior', 'platform-schema', Module.$page); };
        Module.$monitor_fans = function() { return App.dom.has('behavior', 'fan-speed', Module.$page); };
        Module.$monitor_switch_speed = function() { return App.dom.has('behavior', 'switch-speed', Module.$page); };
        Module.$monitor_fabric_port_config = function() { return App.dom.has('behavior', 'fabric-default-port-mode', Module.$page); };

        // private vars
        Module._powerConsumptionChart = null;

        // private vars
        Module._menuTimer = null;
        Module._maxFanRPM = 20000;
        Module._switchSpeed = null;
        Module._fabricDefaultPortMode = null;
        Module._fabricCurrentPortMode = null;

        // private functions
        Module._showNetworkSavedMessage = function(message) {
            $('.monitor-component-ip div.message').text(message).show();

            setTimeout(function() {
                $('.monitor-component-ip div.message').fadeOut('slow');
            }, 5000);
        };

        Module._showKVMSavedMessage = function(message) {
            $('.monitor-component-kvmpassword div.message').text(message).show();

            setTimeout(function() {
                $('.monitor-component-kvmpassword div.message').fadeOut('slow');
            }, 5000);
        };

        Module._showFabricPortModeDefaultMsg = function(message) {
           $('.monitor-component-fabric-port-mode-config div.message').text(message).show();

           setTimeout(function() {
               $('.monitor-component-fabric-port-mode-config div.message').fadeOut('slow');
           }, 5000);
        };

        Module._deployMultiTree = function() {

            var _selected = kafe.url.parseAjaxPath(), _last = '';
            Module.$multi_tree.find('.component').removeClass('open').removeClass('on');

            $.each(_selected, function(i, val) {
                var _current = _last + (i !== 0 ? '-' : '') + val;
                Module.$multi_tree.find('.component[data-component-id="' + _current + '"]').addClass((i + 1 === _selected.length) ? 'open on' : 'open');
                _last = _current;
            });
        };
        
        Module._CreateSelectOption = function() {
            if (!$(".monitor-multi-tree >.header").find('#component_types_select').length) {
                $(".monitor-multi-tree >.header").append('<select class="base-select with-search" style="width:300px;" name="graph-data" id="component_types_select" data-action="filter-components"><option value="all" selected="Selected">All components</option><optgroup id="type_option_group" key="type" label="Hardware type:"></optgroup><optgroup id="model_option_group" key="model" label="Model:"></optgroup></select>');
            }
                        
            /* create drop down menu ---------*/
            var _componentTypes = [];
            var _componentModels = [];

            $('.monitor-multi-tree').find("li").each(function(key, value) {
                var _current_type;
                if($(this).attr('data-type') == "psu-group" ) {
                    _current_type = "PSU";
                }
                else if($(this).attr('data-type') == "hubnode" ) {
                    _current_type = "HubNode";
                } else {
                    _current_type = $(this).attr('data-type').charAt(0).toUpperCase() +$(this).attr('data-type').slice(1);
                }

                var _current_model = $(this).attr('data-model');

                if (_current_type !== 'platform' ) {
                    var _parent_type = $(this).parent('ul').parent('li').attr('data-type');

                    if (_parent_type === 'platform' && $.inArray(_current_type, _componentTypes) === -1) {
                        _componentTypes.push(_current_type);
                        $("#type_option_group").append('<option value="' + _current_type + '">' + _current_type + '</option>');
                    }

                    if (_parent_type === 'platform' && $.inArray(_current_model, _componentModels) === -1) {
                        _componentModels.push(_current_model);
                        $("#model_option_group").append('<option value="' + _current_model + '">' + _current_model + '</option>');
                    }
                }
            });
            $('#component_types_select').trigger("chosen:updated");

            $('#component_types_select').on('change', function(e) {
                $('.monitor-multi-tree .multi-tree').find('li').each(function(key, value) {
                    var _current_type = $(this).attr('data-type');
                    var _current_model = $(this).attr('data-model');
                    var _option = $('#component_types_select').find(':selected');
                    var _selectedVal = $('#component_types_select').val();
                    var _group = _option.closest('optgroup').attr('key');

                    if ( _selectedVal === 'all') {
                        $(this).show();
                    } else if (_current_type !== 'platform') {

                        if( _selectedVal == "PSU" )
                        {
                            _selectedVal = "psu-group";
                        }
                        var _parent_type = $(this).parent('ul').parent('li').attr('data-type');
                        var _parent_model = $(this).parent('ul').parent('li').attr('data-model');
                        
                        if( _group == "type") {
                            if (_current_type === _selectedVal.toLowerCase() || _parent_type === _selectedVal.toLowerCase()) {
                                $(this).show();
                            } else {
                                $(this).hide();
                            }
                        } else if( _group == "model") {
                            if (_current_model === _selectedVal || _parent_model === _selectedVal) {
                                $(this).show();
                            } else {
                                $(this).hide();
                            }
                        }
                    }
                });
            });
            /* create drop down menu - END ---------*/
        };

        Module._setBreadcrumbPath = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var pathList = [{ text: 'Monitor', url: 'monitor.html' }], parentPath = 'monitor.html#!';

            $.each(App.Hash.Path(), function(i, val) {
                data = _.find(data.components, function(component) {
                    var _component = new App.Models.ComponentViewModel(component);
                    return _component.id === val;
                });
                if( data !== undefined){
                    var component = new App.Models.ComponentViewModel(data);

                    parentPath += '/' + component.id;
                    pathList.push({ text: component.description.name, url: parentPath });
                }
            });

            App.BaseBreadcrumb.SetPath(pathList);
        };

        Module._getTemplateData = function(data) {
            var templateData = { component: null, context: null };

            // component search
            $.each(App.Hash.Path(), function(i, val) {
                // TODO: Loin d'être bullet proof...
                data = _.find(data.components, function(component) {
                    var _component = new App.Models.ComponentViewModel(component);
                    return _component.id === val;
                });
                if( data === undefined){

                    Module._showMessage("Invalid component", "The component you where viewing is now invalid.</BR>You will be redirected to the Dashboard.", function() {window.location = 'index.html';});

                }

                if (data.type === 'platform') {
                    templateData.context = new App.Models.ComponentViewModel(data);
                }
            });
            templateData.component = new App.Models.ComponentViewModel(data);

            return templateData;
        };

        Module._showMessage = function(theTitle, theMessage, callback){
            var $tmpl = $(App.tmpl.confirm_dialog.render({
                title: theTitle,
                message: theMessage
            }));
            $tmpl.on('click', App.dom.for('action', 'confirm'), function(e) {
                e.preventDefault();
                callback();
            });
            $.colorbox(kafe.ext.colorbox.getParams({
                html: $tmpl
            }));

            $(".base-button[data-action=cancel]").hide();
        };


        Module._buildMultiView = function() {
            var data = new App.Models.ComponentViewModel(App.MonitorServices.GetPlatformsStoreCache());

            var _template = App.tmpl.monitor_multi_view.render(data, {
                platformSchema: App.tmpl.platform_schema,
                contentView: App.tmpl.monitor_multi_view_component_content
            });

            Module.$page_output.html(_template);

            $.each(data.components, function(i, val) {
                Module._buildPlatformSchema(val, 'data-platform-view');
            });

            App.PlatformSchemas.ResizeToContent();
        };

        Module._buildComponentView = function() {
            // component search
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var templateData = Module._getTemplateData(data);

            Module.$currentPlatform = templateData.context.description.number;

            // generate view
            var _template = App.tmpl.monitor_component_view.render(templateData, {
                platformSchema: App.tmpl.platform_schema,
                contentView: App.tmpl.monitor_multi_view_component_content,
                fanSpeed: App.tmpl.monitor_fan_speed,
                subComponent: App.tmpl.monitor_component_subcomponent
            });

            Module.$page_output.html(_template);

            Module._buildPlatformSchema(templateData.context, 'data-platform');

            // layout adjustments
            App.PlatformSchemas.ResizeToContent();
            App.BaseListing.AlignAttributes();
            App.BaseListing.AlignColumns();

            if (templateData.component.type === 'platform') {
                Module._refreshFanSpeeds(data);
                if(App.MonitorServices.GetHubModel() == "MSH8900")
                {
                    Module._initSwitchSpeed(data);
                }
                if(App.MonitorServices.GetHubModel() == "MSH8910" || App.MonitorServices.GetHubModel() == "MSH8911")
                {
                    Module._initFabricPortMode(data);
                    $('.monitor-component-fabric-port-mode-config div.message').hide();
                }
            }

            if(templateData.component.type === "psu-group") {
                Module._createPowerGraph();
            }
                        
            if(templateData.component.type === "server") {
                Module._configureRemoteAccess(templateData.component);
            }

            $('.monitor-component-kvmpassword div.message').hide();
        };
                
        Module._buildPlatformSchema = function(templateData, attributeToSearch) {
            $.each(templateData.components, function(i, val) {
                if (val.type === 'psu-group') {
                    $.each(val.components, function(j, psu) {
                        Module._buildSchemaComponentContent(attributeToSearch, psu, templateData.id, 'psu');
                    });
                } else {
                    if (val.type === 'hubnode') {
                            _class = 'hub-node';
                    } else if (val.type === 'node') {
                            _class = 'node';
                    } 

                    Module._buildSchemaComponentContent(attributeToSearch, val, templateData.id, _class);
                }
            });
        };
                
        Module._buildSchemaComponentContent = function(attributeToSearch, component, parentId, _class) {
            var _id = component.id.substring(component.id.indexOf('-') + 1);

            var _template = App.tmpl.monitor_multi_view_component_content.render(component, {
                model: component, 
                parentHash: parentId
            });

            $('[' + attributeToSearch + '=' + parentId + ']').find('.' + _class + '[data-index-' + component.type + '=' + _id +']')
                    .html(_template)
                    .attr('data-id', component.type === 'psu' ? 'psu-group' : component.id);
        };
                
        Module._configureRemoteAccess = function(component) {
            var _parentNode = component.parent;
            
            if (_parentNode) {
                // Pour les modèles 8000 et 8001, se fier au Management IP du Node (le parent)
                if (_parentNode.model == "MSP8000" || _parentNode.model == "MSP8001" || _parentNode.model == "MSP803x" || _parentNode.model == "MSP804x") {
                    $('.btn-remote-access-div').append('<button class="base-button btn-remote-access" data-model="' + _parentNode.model + '" data-behavior="remote-access" data-management-ip="' + _parentNode.managementIP + '">KVM</button>');

                // Pour les 8020, l'IP doit être configurée (différente de 0.0.0.0) pour fonctionner. Utilise aussi le management IP du Node (le parent)
                } else if(_parentNode.model == "MSP8020") {
                    $('.btn-save-provision-network-div').append('<button class="base-button btn-remote-access" data-model="' + _parentNode.model + '" data-behavior="remote-access" data-management-ip="' + _parentNode.managementIP + '" data-ip="' + component.routing.networkInterfaces[0].ip.join('.') + '" data-kvmpassword="">KVM</button>');
                    App.MonitorServices.GetKVMPassword(Module.$currentPlatform);
                }
            }
        };
                
        Module._checkForNewComponents = function(model) {
            var _newComponentsFound = false;

            // platforms
            $.each(model.components, function(i, val) {
                var _platformId = val.id; 
                var _platform = App.dom.has('id', _platformId, Module.$multi_tree);
                
                if (_platform && _platform.length > 0) {
                    // components
                    $.each(val.components, function(i, val) {
                        var _componentId = val.id; 
                        var _component = App.dom.has('id', _componentId, _platform);
                        
                        if (_component && _component.length > 0) {
                            $.each(val.components, function(i, val) {
                                var _subComponentId = val.id, _subComponent = App.dom.has('id', _subComponentId, _component);
                                
                                if (_subComponentId.indexOf('psu') < 0 && (!_subComponent || _subComponent.length === 0)) {
                                    _newComponentsFound = true;
                                }
                            });

                        } else {
                            _newComponentsFound = true;
                        }
                    });                    
                    
                } else {
                    _newComponentsFound = true;
                }
            });

            return _newComponentsFound;
        };
                
        Module._loadMultiTree = function(data) {
            var model = new App.Models.ComponentViewModel(data);
            var _template = App.tmpl.multi_tree_branch.render(model.components, { subComponents: App.tmpl.multi_tree_branch });

            Module.$multi_tree
                .find('> .header .title').text(model.description.name).end()
                .find('.multi-tree').html(_template);

            if (model.status) {
                Module.$multi_tree.find('> .header .health-icon').addClass(model.status.health);
            }

            Module._CreateSelectOption();

            App.dom.window.trigger('hashchange');
            
			// TODO: Remove when we re-enable Multi-Platform
            $('[data-type="platform"]').addClass("open");
        };
                
        Module._refreshMultiTree = function(data) {
            var model = new App.Models.ComponentViewModel(data);

            // multi
            if (model.status) {
                Module.$multi_tree.find('> .header .health-icon').removeClass('red yellow green').addClass(model.status.health);
            }
            
            // remove items in the tree view that are not in the data anymore
            Module._removeMultiTreeComponents(model);

            // platforms
            $.each(model.components, function(i, val) {

                var _platformId = val.id; 
                var _platform = App.dom.has('id', _platformId, Module.$multi_tree);

                _platform.find('> .header .health-icon').removeClass('red yellow green').addClass(val.status.health);

                // components
                $.each(val.components, function(i, val) {
                    var _componentId = val.id; 
                    var _component = App.dom.has('id', _componentId, _platform);

                    if (_component) {
                        _component.find('> .header .health-icon').removeClass('red yellow green').addClass(val.status.health);

                        _component.find('.model').text(val.description.model);

                        if(val.routing && val.routing.managementIp) {
                            _component.find('.ip').text(val.routing.managementIp);
                        }

                        $.each(val.components, function(i, val) {
                            var _subComponentId = val.id, _subComponent = App.dom.has('id', _subComponentId, _component);

                            if( val.routing && val.routing.networkInterfaces) {
                                _subComponent.find('.ip').text($.views.converters.toIp(val.routing.networkInterfaces[0].ip));
                            }
                        });

                    }

                });
            });
        };
        
        Module._removeMultiTreeComponents = function(model) {
            // platforms
            $('[data-type="platform"]').each(function(i, platform) {
                var _platformObject = $.grep(model.components, function(val) { 
                    return val.id === $(platform).data('id');
                });
                _platformObject = _platformObject[0];
                
                if (!_platformObject || _platformObject.length === 0) {
                    $(platform).remove();
                } else {
                    // components
                    $(platform).children('ul.components').children('li.component').each(function(j, component) {
                        var _componentObject = $.grep(_platformObject.components, function(val) { 
                            return val.id === $(component).data('id');
                        });
                        _componentObject = _componentObject[0];
                
                        if (!_componentObject || _componentObject.length === 0) {
                            $(component).remove();
                        } else {
                            // sub components
                            $(component).children('ul.components').children('li.component').each(function(k, subcomponent) {
                                var _subComponentObject = $.grep(_componentObject.components, function(val) { 
                                    return val.id === $(subcomponent).data('id');
                                });
                                _subComponentObject = _subComponentObject[0];
                
                                if (!_subComponentObject || _subComponentObject.length === 0) {
                                    $(subcomponent).remove();
                                }
                            });
                        }
                    });
                }
            });
        };

        Module._refreshMultiView = function(data) {
            var model = new App.Models.ComponentViewModel(data);

            Module._removeMultiViewComponents(model);

            // platforms
            $.each(model.components, function(i, val) {

                var _platform = App.dom.has('platform-view', val.id, Module.$page_output);

                if (val.status) {
                    App.dom.has('behavior', 'platform-header', _platform).find('.health-icon').removeClass('red yellow green').addClass(val.status.health);
                }

                $.each(val.components, function(i, val) {
                    if (val.status) {
                        App.dom.has('component-id', val.id, _platform).find('.health-icon').removeClass('red yellow green');
						if(val.status.health != 'green')
                        {
                            App.dom.has('component-id', val.id, _platform).find('.health-icon').addClass(val.status.health);
                        }
                    }
                });
            });
        };
        
        Module._removeMultiViewComponents = function(model) {
            // platforms
            $('.monitor-platform-view').each(function(i, platform) {
                var _platformObject = $.grep(model.components, function(val) { 
                    return val.id === $(platform).data('platform-view');
                });
                _platformObject = _platformObject[0];
                
                if (!_platformObject || _platformObject.length === 0) {
                    $(platform).remove();
                } else {
                    // components
                    $(platform).find('li').each(function(j, component) {
                        var _componentObject = $.grep(_platformObject.components, function(val) {
                            return val.id === $(component).data('id');                            
                        });
                        _componentObject = _componentObject[0];
                
                        if (!_componentObject || _componentObject.length === 0) {
                            $(component).html('<div class="content navigation">');
                        } 
                    });
                }
            });
        };

        Module._resetPSUPeakAverage = function( psuNum ) {
            var _psuClass = '.psu-' + psuNum;
            var _psu = Module.$monitor_component_psu_table().find(_psuClass);

            _psu.find('.peak').text(0);
            _psu.find('.average').text(0);
        };

        Module._refreshComponentView = function(data) {
            // component search
            var model = new App.Models.ComponentViewModel(data);
            var templateData = Module._getTemplateData(data);

            Module.$currentPlatform = templateData.context.description.number;

            var currentComponent = App.MonitorServices.FindComponents(function(component) {
                var componentModel = new App.Models.ComponentViewModel(component);
                
                return componentModel.id === App.Hash.Path().slice(-1)[0];
            });

            // redirect to the Monitor page if the current component is gone
            if (!currentComponent || currentComponent.length === 0) {
                window.open ('monitor.html','_self',false);
            }

            var hotswap = Module.$monitor_component_general().find('.hotswap');
			if( hotswap.lenght !== 0)
			{
				if(templateData.component.status.hotswap)
				{
					hotswap.text(templateData.component.status.hotswap.text + ', ' + templateData.component.status.hotswap.state);
				}
			}

            if( templateData.component.description && templateData.component.description.model)
            {
                Module.$monitor_component_general().find('.model').text(templateData.component.description.model);

                //Modify FRU Information
                $.each(templateData.component.description.fru, function(att, val){
                    Module.$monitor_fru().find('.' + att).text(val);
                });

            }

            // general information
            if (templateData.component.status) {
                Module.$monitor_component_general().find('.health-icon').removeClass('red yellow green').addClass(templateData.component.status.health);
                if( templateData.component.status.global)
                {
                    Module.$monitor_component_general().find('.ha_status').text(templateData.component.status.global);
                }
            }

            if ( templateData.component.routing && templateData.component.routing.managementIp )
            {
                Module.$monitor_component_general().find('.ip').text(templateData.component.routing.managementIp);
            }

            if (templateData.component.type == "psu-group")
            {
                $.each(templateData.component.components, function(i, val){
                    var _psuClass = '.' + val.id;
                    var _psu = Module.$monitor_component_psu_table().find(_psuClass);
                    
                    _psu.find('.inlet').text(val.consumption.inletTemperature);
                    _psu.find('.outlet').text(val.consumption.outletTemperature);
                    _psu.find('.input').text(val.consumption.inputVoltage);
                    _psu.find('.power').text(val.consumption.powerOut);
                    _psu.find('.peak').text(val.consumption.peak);
                    _psu.find('.average').text(val.consumption.average);
                });
            }

            // platform schema
            if (templateData.context) {
                Module._removeComponentViewComponents(model);
                
                $.each(templateData.context.components, function(i, val) {
                    if (val.status) {
                        App.dom.has('component-id', val.id, Module.$monitor_platform_schema).find('.health-icon').removeClass('red yellow green');
                        if(val.status.health != "green")
                        {
                            App.dom.has('component-id', val.id, Module.$monitor_platform_schema).find('.health-icon').addClass(val.status.health);
                        }
                    }
                });
            }
        };
        
        Module._removeComponentViewComponents = function(model) {
            var _platformObject = $.grep(model.components, function(val) { 
                return val.id === $('.platform-schema').data('platform');
            });
            _platformObject = _platformObject[0];
                
            if (!_platformObject || _platformObject.length === 0) {
                $('.platform-schema').remove();
            } else {
                // components
                $('.platform-schema').find('li').each(function(j, component) {
                    var _componentObject = $.grep(_platformObject.components, function(val) {
                        return val.id === $(component).data('id');                            
                    });
                    _componentObject = _componentObject[0];
                
                    if (!_componentObject || _componentObject.length === 0) {
                        $(component).html('<div class="content navigation">');
                    } 
                });
            }
        };

        Module._refreshFanSpeeds = function(data) {
            var templateData = Module._getTemplateData(data);

            Module.$monitor_fans().each(function(i, val) {
                var _this = $(this);
                if (templateData.context.fans[i]) {
                    var _rpm = Number(templateData.context.fans[i].rpm);
                    var _angle = (_rpm * 180) / Module._maxFanRPM;
                    _this.find('.needle').css({ transform: 'rotate(' + _angle + 'deg)' }).end().find('.speed span').text(_rpm);
                } else {
                    _this.hide();
                }
            });
        };

        Module._initSwitchSpeed = function(data) {
            var templateData = Module._getTemplateData(data);

            App.MonitorServices.GetPlatformSwitchSpeed(templateData.context.description.number, function(data) {
                $.each(data, function(i, val) {
                    Module.$monitor_switch_speed()
                        .find('[name="slot-' + val.slot + '"]').removeAttr('checked')
                        .filter('[value="' + val.speed + '"]').attr('checked', 'checked');
                });
                Module._switchSpeed = data;
            });
        };

        Module._initFabricPortMode = function(data) {
            var templateData = Module._getTemplateData(data);

            App.MonitorServices.GetPlatformFabricDefaultPortMode(templateData.context.description.number, function(data) {
                Module._fabricDefaultPortMode = data;
                App.dom.document.trigger('fabric-port-mode-default:received');
            });

            App.MonitorServices.GetPlatformFabricCurrentPortMode(templateData.context.description.number, function(data) {
                Module._fabricCurrentPortMode = data;
                App.dom.document.trigger('fabric-port-mode-current:received');
            });
        };

        Module._createPowerGraph = function() {
            Module.$psu_power_consumption = App.dom.has('behavior', 'platform-power-consumption-graph');
            Module.$psu_power_consumption_legend = App.dom.has('behavior', 'platform-power-consumption-graph-legend');

            var consumption = App.PowerConsumptionServices.GetConsumption();

            var series = Module._getDataSeriesForPSU(consumption);

            Module._powerConsumptionChart = App.BaseChart.Build(Module.$psu_power_consumption, series, App.PowerConsumptionServices.GetChartSettings(Module.$psu_power_consumption_legend, App.PowerConsumptionServices.GetMaxConsumption().single[Module.$currentPlatform]));

        };

        Module._executePowerCommand = function(platform, node, command, payload, type) {
            var message = "";

            if(payload !== "")
            {
                if( type == "server" )
                {
                    message = 'Are you sure you wish to execute the "' + command + '" command for ' + type +' ' + payload + '?';
                }
                else
                {
                    message = 'Are you sure you wish to execute the "' + command + '" command for ' + type + '?';
                }
            }
            else
            {
                message = 'Are you sure you wish to execute the "' + command + '" command for this node?';
            }

			var $tmpl = $(App.tmpl.confirm_dialog.render({
                    title: "Command: "+command, 
                    message: message
            }));
            
           $tmpl
                .on('click', App.dom.for('action', 'confirm'), function(e) {
                    e.preventDefault();        
                    App.MonitorServices.ExecutePowerCommand(platform, node, command, payload);
                })
                .on('click', App.dom.for('action', 'cancel'), function(e) {
                    e.preventDefault(); 
                    $.colorbox.close();
                })
            ;
            $.colorbox(kafe.ext.colorbox.getParams({
                html: $tmpl
            }));

        };

        Module._executeNetwork = function(platform, node, server, nic, ipsource, ip, netmask, gateway) {
            var params = {
                'nicid': nic,
                'ipsource': ipsource,
                'ip': ip,
                'netmask': netmask,
                'gateway': gateway
            };
            App.MonitorServices.Network(platform, node, server, nic, params);
        };

        Module._setKVMPassword = function( platform, password) {
            App.MonitorServices.SetKVMPassword(platform, password);
        };

        Module._resetPeakAverage = function(platform) {
            App.MonitorServices.ResetPeakAverage(platform);
        };

        Module._getDataSeriesForPSU = function(data){
            var psuGroup = App.MonitorServices.FindComponents(function(component) {
                var componentModel = new App.Models.ComponentViewModel(component);

                return componentModel.type === 'psu-group';
            });

            var series = [];
            $.each(psuGroup[0].components, function(i, val){
                series.push(data[val.number][Module.$currentPlatform]);
            });

            return series;
        };

		Module._checkPassword = function (password, password_Input){
		
			re = /^\w+$/;
			if(password !== "") {
				if(password.length < 8) {
					Module.ShowErrorMessage("Error", "Password must contain at least 8 characters!");
					password_Input.focus();
					return false;
				}
				re = new RegExp(/[~`!#$%\^&*+=\-\[\];,/{}|:<>\?]/);
				if(!re.test(password)) {
					Module.ShowErrorMessage("Error", "Password must contain at least one special character!");
					password_Input.focus();
					return false;
				}
				re = /[0-9]/;
				if(!re.test(password)) {
					Module.ShowErrorMessage("Error", "Password must contain at least one number (0-9)!");
					password_Input.focus();
					return false;
				}
				re = /[a-z]/;
				if(!re.test(password)) {
					Module.ShowErrorMessage("Error", "Password must contain at least one lowercase letter.");
					password_Input.focus();
					return false;
				}
				re = /[A-Z]/;
				if(!re.test(password)) {
					Module.ShowErrorMessage("Error", "Password must contain at least one uppercase letter.");
					password_Input.focus();
					return false;
				}
			} else {
					Module.ShowErrorMessage("Error", "Password cannot be blank.");
					password_Input.focus();
					return false;
			}
			
		//	Module.ShowErrorMessage("Success", "You entered a valid password: " + password);
			return true;
		};
    };
	
	Module.ShowErrorMessage = function(theTitle, theMessage){
			var $tmpl = $(App.tmpl.confirm_dialog.render({
				title: theTitle,
				message: theMessage
			}));
			$tmpl.on('click', App.dom.for('action', 'confirm'), function(e) {
                    e.preventDefault();
                    $.colorbox.close();
            });
			$.colorbox(kafe.ext.colorbox.getParams({
				html: $tmpl
			}));
			
			$(".base-button[data-action=cancel]").hide();
	};

    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        // Multi tree
        Module.$multi_tree
            .on('click', App.dom.for('action', 'expand'), function(e) {
                var _current = $(this).parent();
                var _siblings = _current.siblings('.component').addBack();
                var _subnodes = _current.find('.component');

                _subnodes.removeClass('open');
                if (_subnodes.length !== 0) {
                    if (!_current.hasClass('open')) {
                        _current.addClass('open');
                    } else {
                        _current.removeClass('open');
                    }
                }
            })
            
            .on('click', App.dom.for('action', 'select'), function(e) {
                e.stopPropagation();

                var _current = $(this).parent().parent();
                var _all = Module.$multi_tree.find('.component');

                _all.removeClass('on');
                _current.addClass('on');
            });

        Module.$page_output
            .on('click', App.dom.for('behavior', 'system-info'), function(e) {
                var _this = $(this);
                App.MonitorServices.GetPlatformSystemInformation(_this.data('platform'));
            });

        // Power Commands
        Module.$page_output
            .on('change', App.dom.for('behavior', 'fabric-default-port-mode') + ' select', function(e) {
                var _this = $(this);
                var _node = _this.attr('data-behavior').substr(_this.attr('data-behavior').length - 1, 1), _mode = _this.val();
                Module._fabricDefaultPortMode[_.findIndex(Module._fabricDefaultPortMode, { 'node': _node })].mode = _mode;
            })

            .on('click', App.dom.for('behavior', 'fabric-default-port-mode') + ' ' + App.dom.for('command', 'save'), function(e) {
                var _platform = $(this).data('platform');
                App.MonitorServices.SetPlatformFabricDefaultPortMode(_platform, Module._fabricDefaultPortMode);
            })

            .on('change', App.dom.for('behavior', 'switch-speed') + ' input[type="radio"]', function(e) {
                var _this = $(this);
                var _slot = _this.attr('name').split('-')[1], _speed = _this.val();
                Module._switchSpeed[_.findIndex(Module._switchSpeed, { 'slot': _slot })].speed = _speed;
            })
            
            .on('click', App.dom.for('behavior', 'switch-speed') + ' ' + App.dom.for('command', 'save'), function(e) {
                var _platform = $(this).data('platform');

                var $tmpl = $(App.tmpl.confirm_dialog.render({
                    title: "Platform Speed Switch", 
                    message: "The platform will need to reboot in order to apply the changes. You will be logged out of the system before the procedure begins.<br><br>Do you wish to continue?"
                }));

                $tmpl
                    .on('click', App.dom.for('action', 'confirm'), function() {
                        e.preventDefault();        
                        App.MonitorServices.SetPlatformSwitchSpeed(_platform, Module._switchSpeed);
                    })
                    .on('click', App.dom.for('action', 'cancel'), function() {
                        e.preventDefault(); 
                        $.colorbox.close();
                    })
                ;

                $.colorbox(kafe.ext.colorbox.getParams({
                    html: $tmpl
                }));
            })
            
            .on('click', App.dom.for('behavior', 'power-command'), function(e) {
                e.preventDefault();
                var _this = $(this);
                Module._executePowerCommand(_this.data('platform'), _this.data('node'), _this.data('command'), _this.data('payload'), _this.data('type'));
            });

        // Network
        Module.$page_output
            .on('click', App.dom.for('behavior', 'save-network'), function(e) {
                e.preventDefault();
                var _this = $(this);
				var _nicid = $(".monitor-server-nicid").val();
                var _source = $(".monitor-server-source option:selected").val();
                var _ip = $(".monitor-server-ip").val();
                var _netmask = $(".monitor-server-netmask").val();
                var _gateway = $(".monitor-server-gateway").val();

                if (isNaN(_netmask) || _netmask < 0 || _netmask > 32) {
                    Module.ShowErrorMessage("Bad netmask value", "Netmask should be an integer between 0 and 32!");
                    return;
                }

                var node_path = $.grep(App.Hash.Path(), function( str, i ) {
                    return str.indexOf("node") < 0;
                }, true);
                var node_str = String(node_path[0]);
                var node_id = node_str.substring(node_str.indexOf('-') + 1);

                Module._executeNetwork(_this.data('platform'), node_id, _this.data('server'), _nicid, _source, _ip, _netmask, _gateway);
            })

            .on('click', App.dom.for('behavior', 'save-kvmpassword'), function(e) {
                var _this = $(this);
				var password = $(".monitor-kvmpassword").val();
				var password_Input = $(".monitor-kvmpassword");
               
				if(Module._checkPassword(password, password_Input)){
					Module._setKVMPassword(_this.data('platform'),password);
				}
            })

            .on('click', App.dom.for('behavior', 'provision'), function(e) {
                e.preventDefault();
                var _this = $(this);

                var node_path = $.grep(App.Hash.Path(), function( str, i ) {
                    return str.indexOf("node") < 0;
                }, true);
                var node_str = String(node_path[0]);
                var node_id = node_str.substring(node_str.indexOf('-') + 1);
                
                var $tmpl = $(App.tmpl.provision_dialog.render({
                    platform: _this.data('platform'), 
                    node: node_id,
                    server: _this.data('server')
                }));

                $tmpl
                    .on('click', App.dom.for('behavior', 'provision-proceed'), function() {
                        e.preventDefault();
                        App.MonitorServices.ProvisionKVM(_this.data('platform'), _this.data('node'), _this.data('server'));
                        $.colorbox.close();
                    })
                    .on('click', App.dom.for('behavior', 'provision-cancel'), function() {
                        $.colorbox.close();
                    })
                ;

                $.colorbox(kafe.ext.colorbox.getParams({
                    html: $tmpl
                }));
                
            })
            
            .on('click', App.dom.for('behavior', 'remote-access'), function(e) {
                e.preventDefault();
                var _this = $(this);
        
                if (_this.data('model') === "MSP8000" || _this.data('model') === "MSP8001" || _this.data('model') === "MSP803x" || _this.data('model') === "MSP804x") {
                    window.open('http://' + _this.data('management-ip') + '/kvm(' + _this.data('management-ip') + '@00).jnlp', '_blank');
                } else if (_this.data('model') === "MSP8020") {
                    window.open('http://' + _this.data('management-ip') + '/vnc/kvm-applet-root.html?ip=' + _this.data('ip') + '&pass=' + _this.data('kvmpassword'), '_blank');
                }        
            })
            
            .on('click', App.dom.for('behavior', 'config-page'), function(e) {
                e.preventDefault();
        
                window.open('http://' + $(this).data('ip'), '_blank');
            })

            .on('click', App.dom.for('behavior', 'reset-peak'), function(e) {
                e.preventDefault();
                var _this = $(this);
                Module._resetPeakAverage(_this.data('platform'));
            })
        ;
        
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document        
            .on('monitor:load', function(e, data) {
                Module._loadMultiTree(data);
            })
            
            .on('monitor:update', function(e, data) {
                var model = new App.Models.ComponentViewModel(data);

                if (Module._checkForNewComponents(model)) {
                    Module._loadMultiTree(data);
                    
                } else {
                    // multi-tree
                    Module._refreshMultiTree(data);
                    // multi-view / component-view
                    if (App.Hash.IsRoot()) {
                        Module._refreshMultiView(data);
                    } else {
                        Module._refreshComponentView(data);
                        if (App.Utils.Exists(Module.$monitor_fans())) {
                            Module._refreshFanSpeeds(data);
                        }
                    }
                }
            })

            .on('fabric-port-mode-current:received', function(e){
               if(App.MonitorServices.GetHubModel() == "MSH8910" || App.MonitorServices.GetHubModel() == "MSH8911") {
                  $.each(Module._fabricCurrentPortMode, function(i, val) {
                     var valStr = "";
                     if(val.mode == "0") {
                        valStr = "Dual Port Mode (MSP802x, MSP804x, MSP805x)";
                     } else if(val.mode == "2") {
                        valStr = "Single Port / Quad Lane (MSP8001, MSP802x, MSP803x)";
                     } else if(val.mode == "3") {
                        valStr = "Single Port / Single Lane (MSP802x, MSP804x)";
                     } else {
                        valStr = "Switch Factory Default";
                     }

                     Module.$monitor_fabric_port_config()
                        .find('[data-behavior="fabric_port_mode_current_slot_'+val.node+'"]')
                        .attr('value', valStr);
                  });
               }
            })
            
            .on('fabric-port-mode-default:received', function(e){
               if(App.MonitorServices.GetHubModel() == "MSH8910" || App.MonitorServices.GetHubModel() == "MSH8911") {
                  $.each(Module._fabricDefaultPortMode, function(i, val) {
                     Module.$monitor_fabric_port_config()
                        .find('[data-behavior="fabric_port_mode_default_slot_'+val.node+'"]')
                        .attr('value', val.mode);
                  });
               }
            })

            .on('fabric-port-mode-default:set', function(e, data){
               if (data.status !== 'Failure') {
                   Module._showFabricPortModeDefaultMsg("Default Fabric Port Mode configuration successfully saved.");
                   $('.btn-save-provision-network-div').find('.btn-config-page').attr('data-ip', $(".monitor-server-ip").val());
               } else {
                   Module._showFabricPortModeDefaultMsg(data.message);
               }
            })

            .on('power-consumption:update', function(e, data) {
                // graph
                if (App.Utils.Exists(Module.$psu_power_consumption)) {

                    var series = Module._getDataSeriesForPSU(data.series);

                    App.BaseChart.Refresh(Module._powerConsumptionChart, series, App.PowerConsumptionServices.GetChartSettings(Module.$psu_power_consumption_legend, data.axis.single[Module.$currentPlatform]));

                }
            })

            .on('peakAverage:reset', function(e, psuNum) {

                Module._resetPSUPeakAverage(psuNum);
            })

            .on('KVMPassword:received', function(e, data) {
                $('.monitor-kvmpassword').val(data.password);
                $('.btn-save-provision-network-div').find('.btn-remote-access').attr('data-kvmpassword', data.password);
            })
            ;

        // multi navigation
        App.dom.window        
            .on('hashchange', function() {
                // multi-tree / breadcrumb
                Module._deployMultiTree();
                Module._setBreadcrumbPath();

                // multi-view / component-view
                if (App.Hash.IsRoot()) {
                    Module._buildMultiView();
                } else {
                    Module._buildComponentView();
                }
            });

        // Network and provision
        App.dom.document
            .on('network:update', function(e, data) {
                if (data.status !== 'Failure') {
                    Module._showNetworkSavedMessage("Network configuration has been updated.");
                    $('.btn-save-provision-network-div').find('.btn-config-page').attr('data-ip', $(".monitor-server-ip").val());
                } else {
                    Module._showNetworkSavedMessage(data.message);
                }
            })

            .on('KVMPassword:set', function(e, data) {
                if (data.status !== 'Failure') {
                    Module._showKVMSavedMessage("KVM password has been successfully modified.");
                    $('.btn-save-provision-network-div').find('.btn-remote-access').attr('data-kvmpassword', $('.monitor-kvmpassword').val());
                } else {
                    Module._showKVMSavedMessage(data.message);
                }
            })
            ;
    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

    };

    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // POWER CONSUMPTION
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$power_consumption = App.dom.has('behavior', 'power-consumption-graph');
        Module.$power_consumption_legend = App.dom.has('behavior', 'power-consumption-graph-legend');

        // private vars
        Module._powerConsumptionChart = null;

    };


    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {


    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('power-consumption:load', function(e, data) {

                // graph
                if (App.Utils.Exists(Module.$power_consumption)) {
                    Module._powerConsumptionChart = App.BaseChart.Build(Module.$power_consumption, data.series[3], App.PowerConsumptionServices.GetChartSettings(Module.$power_consumption_legend, data.axis.multi));
                }

            })
            .on('power-consumption:update', function(e, data) {

                // graph
                if (App.Utils.Exists(Module.$power_consumption)) {
                    App.BaseChart.Refresh(Module._powerConsumptionChart, data.series[3], App.PowerConsumptionServices.GetChartSettings(Module.$power_consumption_legend, data.axis.multi));

                }

            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {


    };




    $(function() {
        Module.Cache();
        Module.Bind();
        Module.Listen();
        Module.Start();
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // PAGE-HEADER
 //------------------------------------------------------------------------------------*/



(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        /*-- Constants --*/
        Module._selRefreshInterval = 5000;
        Module._defaultEventPerPage = 100;
        Module._events_per_page_array = [10, 50, Module._defaultEventPerPage, 500, 1000];

        /*-- Private variables --*/
        Module._eventsPerPage = Module._defaultEventPerPage;
        Module._currentPlatform = -1;
        Module._requestedPlatform = -1;
        Module._currentPage = 1;
        Module._numRecords = -1;

        /*-- jQuery objects --*/
        Module.$page = App.dom.has('context', 'page-system-event-log');
        Module.$multi_tree = App.dom.has('behavior', 'system-event-log-multi-tree', Module.$page);
        Module.$page_output = App.dom.has('behavior', 'page-output', Module.$page);
        Module.$system_event_log_table =  function() {
                return App.dom.has('behavior', 'event-table', Module.$page);
            };
        Module.$system_event_log_buttons =  function() {
                return App.dom.has('behavior', 'navigation-buttons', Module.$page);
            };

        /*-- Breadcrumb related functions --*/
        Module._initBreadcrumbPath = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            if (data === undefined) {
                // SEL page for platform called directly
                // redirect to start page (index.html)
                console.log("No Store cache, Hash is " + App.Hash.Path());
                window.location = "index.html";
                return;
            }
            var pathList = [{ text: 'System Event Log', url: 'system-event-log.html' }];
            var parentPath = 'system-event-log.html#!';
            var model = new App.Models.ComponentViewModel(data);

             if (model.components.length !== 0) {
                parentPath += '/' + model.components[0].id;
                pathList.push({ text: data.components[0].name, url: parentPath });
                App.BaseBreadcrumb.SetPath(pathList);
                window.location.hash = "!/" + model.components[0].id;
             }
        };

        Module._setBreadcrumbPath = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var pathList = [{ text: 'System Event Log', url: 'system-event-log.html' }], parentPath = 'system-event-log.html#!';

            $.each(App.Hash.Path(), function(i, val) {
                data = _.find(data.components, function(component) {
                    var _component = new App.Models.ComponentViewModel(component);
                    return _component.id === val;
                });
                if( data !== undefined){
                    var component = new App.Models.ComponentViewModel(data);

                    parentPath += '/' + component.id;
                    pathList.push({ text: component.description.name, url: parentPath });
                }
            });

            App.BaseBreadcrumb.SetPath(pathList);
        };

        /*-- Platforms view related functions --*/
        Module._buildSELPlatformsView = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var model = new App.Models.ComponentViewModel(data);
            var _template = App.tmpl.system_event_log_platforms_view.render(model);

            Module.$multi_tree
                .find('> .header .title').text(model.description.name).end()
                .find('.multi-tree').html(_template);

            if (model.status) {
                Module.$multi_tree.find('> .header .health-icon').addClass(model.status.health);
            }

            App.dom.window.trigger('hashchange');
        };

        Module._updatePlatformsStatus = function (model) {
            $.each(model.components, function(i, val) {

                var _platformId = val.id;
                var _platform = App.dom.has('id', _platformId, Module.$multi_tree);

                _platform.find('> .header .health-icon').removeClass('red yellow green').addClass(val.status.health);
            });
        };

        /*-- SEL view related functions --*/
        Module._buildSELView = function() {
            var templateData = {
                platform: Module._requestedPlatform,
                page: Module._currentPage,
                lastPage: 1,
                log: undefined
            };

            // generate view
            var _template = App.tmpl.system_event_log_view.render(templateData,
                    {navigationBar: App.tmpl.system_event_log_navigation_view,
                        eventsView: App.tmpl.system_event_log_events_view });

            Module.$page_output.html(_template);

            //SEL "events per page" drop-down list
            $.each(Module._events_per_page_array, function (i, s) {
                $('#ev-per-page').append($('<option>', {
                    value: s,
                    text : s
                }));
            });
            $("#ev-per-page").val(Module._defaultEventPerPage);

            // layout adjustments
            App.PlatformSchemas.ResizeToContent();
            App.BaseListing.AlignAttributes();
            App.BaseListing.AlignColumns();


            $('.prev_buttons').hide();
            $('.next_buttons').hide();
            App.dom.window.trigger('hashchange');
            Module.$page_output.find('.loading-message').hide().fadeOut('slow');
            Module.$page_output.find('.csv-message').hide();
        };

        Module._refreshSELView = function(platform, page, data, eventsPerPage) {
            var buttons = Module.$system_event_log_buttons();
            var templateData = {log: data};
            var _template = App.tmpl.system_event_log_events_view.render(templateData);
            var last_page = (data === undefined) ? 1 :Math.ceil(data.numRecords / eventsPerPage);

            if (data === undefined)
                Module._showMessage("Warning", "No data was obtained", function(){$.colorbox.close();});
            else
                Module._numRecords = data.numRecords;
            buttons.find('.page').text(page);
            buttons.find('.double-arrow-right').text(last_page).data('page', last_page);
            buttons.find('.arrow-left').text(page - 1).data('page', page - 1);
            buttons.find('.arrow-right').text(page + 1).data('page', page + 1);

            if (page > 1)
                buttons.find('.prev_buttons').show();
            else
                buttons.find('.prev_buttons').hide();
            if (page < last_page)
                buttons.find('.next_buttons').show();
            else
                buttons.find('.next_buttons').hide();

            Module.$system_event_log_table().find(".events").html(_template);

            Module.$page_output.find('.platform-id').text("Platform #" + platform);

            Module._currentPage = page;
            Module._currentPlatform = platform;
            Module._eventsPerPage = eventsPerPage;
        };

        /*-- Helpers functions --*/
        Module._updateSEL = function() {
            Module._requestSELData(Module._requestedPlatform, Module._currentPage, Module._eventsPerPage, true);
        };

        Module._requestSELData = function(platform, page, eventsPerPage, isPolling) {
            if (!Module._checkPlatform(platform))
                return;

            if (isPolling !== true)
                Module.$page_output.find('.loading-message').stop().fadeIn('slow');

            if (eventsPerPage === undefined) eventsPerPage = Module._eventsPerPage;
            var param = {
                    'offset' : (page - 1)  * eventsPerPage,
                    'limit' : eventsPerPage
                };
            App.SystemEventLogServices.GetPlatformSEL(platform, page, eventsPerPage, param);
        };

        Module._getPlatform = function() {
            // Use one from hash path
            var platform_path = _.find(App.Hash.Path(), function(val, i) {
                    return val.indexOf("platform") >= 0; });
            var platform = platform_path === undefined ? -1 :
                    platform_path.substring(platform_path.indexOf('-') + 1);
            // Check the platform is exist
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var model = new App.Models.ComponentViewModel(data);

            var _platformObject = $.grep(model.components, function(val) {
                    return val.id === "platform-" + platform;
                });
            _platformObject = _platformObject[0];

            if (!_platformObject || _platformObject.length === 0)
                return model.components[0] ? parseInt(model.components[0].description.number, 10) : -1;
            else
                return parseInt(platform, 10);
        };

        Module._checkPlatform = function(platform) {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var model = new App.Models.ComponentViewModel(data);

            var _platformObject = $.grep(model.components, function(val) {
                    return val.id === "platform-" + platform;
                });
            _platformObject = _platformObject[0];

            if (!_platformObject || _platformObject.length === 0) {
                Module._requestedPlatform = model.components[0] ? parseInt(model.components[0].description.number, 10) : -1;
                Module._currentPage = 1;
                Module._showMessage("Invalid platform", "The platform you where viewing is now invalid.</BR>Please select another platform.",
                        function() {window.location = "system-event-log.html";});
                return false;
            }
            return true;
         };

        Module._checkPlatforms =  function (model) {
            // Check for removed platforms
            $('[data-type="platform"]').each(function(i, platform) {
                var _platformObject = $.grep(model.components, function(val) {
                    return val.id === $(platform).data('id');
                });
                _platformObject = _platformObject[0];

                if (!_platformObject || _platformObject.length === 0) {
                    Module._buildSELPlatformsView();
                    return;
                }
            });

            // Check for added platforms
            $.each(model.components, function(i, val) {
                if ($('[data-id="' + val.id + '"]').length === 0) {
                    Module._buildSELPlatformsView();
                    return;
                }
            });
        };

        Module._showMessage = function(theTitle, theMessage, callback){
            var $tmpl = $(App.tmpl.confirm_dialog.render({
                title: theTitle,
                message: theMessage
            }));
            $tmpl.on('click', App.dom.for('action', 'confirm'), function(e) {
                e.preventDefault();
                callback();
            });
            $.colorbox(kafe.ext.colorbox.getParams({
                html: $tmpl
            }));

            $(".base-button[data-action=cancel]").hide();
        };

    };

    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        Module.$multi_tree
            .on('click', App.dom.for('action', 'select-platform'), function(e) {
                e.stopPropagation();
                App.dom.window.trigger('hashchange');
            });
        Module.$page_output
            .on('click', App.dom.for('action', 'download-csv'), function(e) {
                e.stopPropagation();
                Module.$page_output.find('.handle').removeClass('open');
                Module.$page_output.find('.csv-message').stop().fadeIn('slow');
                App.SystemEventLogServices.GetPlatformSELCsv(Module._currentPlatform);
            });

        $('#ev-per-page')
            .on('change', function() {
                Module._requestSELData(Module._currentPlatform, 1, Number(this.value));
            });

    };

    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('monitor:update', function(e, data) {
                var model = new App.Models.ComponentViewModel(data);

                Module._checkPlatforms(model);
                Module._updatePlatformsStatus(model);
            })
            .on('system-event-log:data-loaded', function(e, data) {
                //Skip data for previous platform
                if (data.platform !== Module._requestedPlatform)
                    return;

                Module.$page_output.find('.loading-message').stop().fadeOut('slow');
                if (data.platform !== Module._currentPlatform || data.page !== Module._currentPage ||
                        Module._numRecords !== data.data.numRecords ||
                        Module._eventsPerPage !== data.eventsPerPage)
                    Module._refreshSELView(data.platform, data.page, data.data, data.eventsPerPage);
            })
            .on('system-event-log:csv-load-finished', function(e) {
                Module.$page_output.find('.csv-message').stop().fadeOut('slow');
            })
            ;

        // multi navigation
        App.dom.window
            .on('hashchange', function() {
                Module._requestedPlatform = Module._getPlatform();

                Module._setBreadcrumbPath();

                Module._requestSELData(Module._requestedPlatform,
                        Module._currentPlatform == Module._requestedPlatform ? Module._currentPage : 1);
            });

        Module.$page_output
            .on('click', App.dom.for('behavior', 'switch-page'), function(e) {
                Module._requestSELData(Module._currentPlatform, $(this).data('page'));
            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {
        Module._initBreadcrumbPath();
        Module._buildSELView();
        Module._buildSELPlatformsView();
        Module._requestedPlatform = Module._getPlatform();
        setInterval(function() { Module._updateSEL();}, Module._selRefreshInterval);
    };

    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // CONFIGURE & UPGRADE
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$page = App.dom.has('context', 'page-oneclick-upgrade');

        Module.$adv_settings_form = App.dom.has('context', 'advanced-settings-form', Module.$page);
        Module.$bundle_settings_form = App.dom.has('context', 'bundle-settings-form', Module.$page);
        Module.$upload_form = App.dom.has('context', 'upload-form', Module.$page);
        Module.$upgrade_commands = App.dom.has('context', 'upgrade-commands', Module.$page);
        Module.$upgrade_commands_start = App.dom.has('context', 'upgrade-commands-start', Module.$page);

        Module.$adv_settings_drawer = App.dom.has('behavior', 'advanced-settings-drawer', Module.$page);
        Module.$bundle_settings_drawer = App.dom.has('behavior', 'bundle-settings-drawer', Module.$page);
        Module.$selected_component_versions = App.dom.has('behavior', 'selected-component-versions', Module.$page);
        Module.$upload_status = App.dom.has('behavior', 'upload-status', Module.$page);
        Module.$upgrade_status = App.dom.has('behavior', 'upgrade-status', Module.$page);

        // private vars
        Module._settings = {
            platform: null,
            component: null,
            model: 'All',
            file: null,
            filemodels : null
        };

        // private functions
        Module._buildPlatformOptions = function(selected) {
            Module._settings.platform = null;

            var data = App.MonitorServices.GetPlatformsStoreCache(), _options = '<option value="">Complete Multi-Platform</option>';
            $.each(data.components, function(i, val) {
                var _platform = new App.Models.ComponentViewModel(val);
                var _selected = !_.isEmpty(selected) && selected === _platform.description.number;
                _options += '<option value="' + _platform.description.number +'"' + (_selected ? ' selected="selected"' : '') +'>' + _platform.description.name + '</option>';
            });
            App.dom.has('field', 'platform', Module.$adv_settings_form).html(_options).trigger('chosen:updated');
        };
        
        Module._buildComponentOptions = function(platform, selected) {
            Module._settings.component = null;

            var data = App.MonitorServices.FindComponents(function(component) {
                return component.type === 'platform' && component.number === platform;
            });

            var _options = '<option></option>';
            if (data.length > 0) {
                $.each(data[0].components, function(i, val) {
                    var _component = new App.Models.ComponentViewModel(val);
                    if (!_.isEmpty(_component.description.model)) {
                        var _selected = !_.isEmpty(selected) && selected === _component.id;
                        if (!_.isEmpty(_component.id)) {
                            _options += '<option value="' + _component.id +'"' + (_selected ? ' selected="selected"' : '') +'>' + _component.description.name + '</option>';
                        }
                    }
                });
                App.dom.has('field', 'component', Module.$adv_settings_form).html(_options).removeAttr('disabled').trigger('chosen:updated');
            } else {
                App.dom.has('field', 'component', Module.$adv_settings_form).html(_options).attr('disabled', 'disabled').trigger('chosen:updated');
            }
        };
        
        Module._buildModelOptions = function(data, value) {
            Module._settings.model = 'All';

            var _options = data.models.length === 1 ? '' : '<option value="All">All Models</option>';
            $.each(data.models, function(i, val) {
                var _selected = !_.isEmpty(value) && value === val;
                _options += '<option value="' + val +'"' + (_selected ? ' selected="selected"' : '') +'>' + val + '</option>';
            });
            Module._settings.model = !_.isEmpty(value) ? value : 'All';
            App.dom.has('field', 'model', Module.$adv_settings_form).html(_options).trigger('chosen:updated');
        };
        
        Module._buildSelectedComponentVersions = function(selected) {
            if (!_.isEmpty(selected)) {

                var data = App.MonitorServices.FindComponents(function(component) {
                    var model = new App.Models.ComponentViewModel(component);
                    return model.id === selected;
                });

                var _component = new App.Models.ComponentViewModel(data[0]);

                Module.$selected_component_versions.find(App.dom.for('value', 'name')).text(_component.description.name);

                var _versions = '<li>';

                if (!_.isEmpty(_component.versions)) {
                    $.each(_component.versions, function(i, val) {
                        _versions += '<ul>' + val.name + '     ' + val.major + '.' + val.minor + '</ul>';
                    });
                }
                _versions += '</li>';

                Module.$selected_component_versions.find(App.dom.for('value', 'versions')).html(!_.isEmpty(_versions) ? _versions : 'No version information available.');
                Module.$selected_component_versions.show();

            } else {
                Module.$selected_component_versions.hide();
            }
        };
        
        Module._getModelRestrictions = function() {
            if (Module._settings.model !== 'All') {
                return [Module._settings.model];
            } else if (!_.isEmpty(Module._settings.filemodels)) {
                return Module._settings.filemodels;
            } else {
                return [];
            }
        };
        
        Module._initFromQuery = function() {
            Module._buildPlatformOptions(App.Query.Get('platform'));
            Module._buildComponentOptions(App.Query.Get('platform'), App.Query.Get('component'));

            if (!_.isEmpty(App.Query.Get('model'))) {
                App.UpgradeServices.GetPlatformModels(App.Query.Get('platform'), [App.Query.Get('model')]);
            } else {
                App.UpgradeServices.GetPlatformModels(App.Query.Get('platform'), null);
            }
            Module._buildSelectedComponentVersions(App.Query.Get('component'));

            Module.$upgrade_status.empty();

            Module._settings = {
                platform: !_.isEmpty(App.Query.Get('platform')) ? App.Query.Get('platform') : null,
                component: !_.isEmpty(App.Query.Get('component')) ? App.Query.Get('component').split('-')[1] : null,
                model: !_.isEmpty(App.Query.Get('model')) ? App.Query.Get('model') : 'All'
            };

            if (!_.isEmpty(App.Query.Get('platform')) || !_.isEmpty(App.Query.Get('component'))) {
                Module.$adv_settings_drawer.find(App.dom.for('action', 'open')).addClass('open');
            }

            Module._resetFileUpload();
        };
        
        Module._resetFileUpload = function(error) {
            Module.$upload_form[0].reset();

            Module._settings.file = null;
            Module._settings.filemodels = null;
            Module.$upload_status.html(!!error ? '<span class="error">' + error + '</span>' : '');

            //App.BaseForm.BlockInteractions(Module.$upgrade_commands_start);
        };

        Module._applyForceUpgrade = function() {
            if( $('#forceUpgrade:checked').val()) {
                Module._settings.forceUpdate = 'true';
            }
            else
            {
                Module._settings.forceUpdate = 'false';
            }
        };
    };

    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        // advanced settings drawer
        Module.$adv_settings_drawer
            .on('click', App.dom.for('action', 'open'), function(e) {
                $(this).toggleClass('open');
            });

        Module.$page
            .on('click', App.dom.for('action', 'open-advanced-settings'), function(e) {
                e.preventDefault();
                Module.$adv_settings_drawer.find(App.dom.for('action', 'open')).addClass('open');
            });
            
        // bundle settings drawer
        Module.$bundle_settings_drawer
            .on('click', App.dom.for('action', 'open'), function(e) {
                $(this).toggleClass('open');
            });

        Module.$page
            .on('click', App.dom.for('action', 'open-bundle-settings'), function(e) {
                e.preventDefault();
                Module.$bundle_settings_drawer.find(App.dom.for('action', 'open')).addClass('open');
            });

        // advances settings form
        App.dom.has('field', 'platform', Module.$adv_settings_form)
            .chosen().change(function(e) {
                var _this = $(this);
                Module._settings.component = null;
                Module._settings.model = 'All';

                if (!_.isObject(Module._settings.file)) {
                    Module._resetFileUpload();
                }

                if (App.Utils.InputIsNotEmpty(_this)) {

                    Module._buildComponentOptions(_this.val());

                    App.dom.has('field', 'component', Module.$adv_settings_form).removeAttr('disabled').trigger('chosen:updated');
                    App.UpgradeServices.GetPlatformModels(_this.val(), Module._getModelRestrictions());
                    Module._settings.platform = _this.val();

                } else {

                    App.dom.has('field', 'component', Module.$adv_settings_form).attr('disabled', 'disabled').val(null).trigger('chosen:updated');
                    App.UpgradeServices.GetPlatformModels(null, Module._getModelRestrictions());
                    Module._settings.platform = null;

                }
                Module._buildSelectedComponentVersions(null);

            });

        App.dom.has('field', 'component', Module.$adv_settings_form)
            .chosen().change(function(e) {
                var _this = $(this);

                if (!_.isObject(Module._settings.file)) {
                    Module._resetFileUpload();
                }

                if (App.Utils.InputIsNotEmpty(_this)) {
                    var data = App.MonitorServices.FindComponents(function(component) {
                        var model = new App.Models.ComponentViewModel(component);
                        return model.id === _this.val();
                    });

                    var _component = new App.Models.ComponentViewModel(data[0]);

                    Module._settings.component = _component.description.number;
                    Module._settings.model = _component.description.model;
                    Module._buildSelectedComponentVersions(_component.id);

                    if (!_.isEmpty(Module._settings.filemodels) && _.findIndex(Module._settings.filemodels, function(val) { return val === Module._settings.model; }) === -1) {
                        Module._resetFileUpload('The uploaded bundle does not contain a valid upgrade for the selected settings.');
                    }

                } else {
                    Module._settings.component = null;
                    Module._settings.model = 'All';
                    Module._buildSelectedComponentVersions(null);
                }
                App.UpgradeServices.GetPlatformModels(Module._settings.platform, Module._getModelRestrictions());

            });

        App.dom.has('field', 'model', Module.$adv_settings_form)
            .chosen().change(function(e) {
                var _this = $(this);

                if (!_.isObject(Module._settings.file)) {
                    Module._resetFileUpload();
                }

                if (App.Utils.InputIsNotEmpty(_this)) {
                    Module._settings.model = _this.val();
                }

            });


        // file upload
        Module.$upload_form
            .on('change', App.dom.for('field', 'filename'), function(e) {
                var _this = $(this), _file = e.target.files[0];

                if (_file.name.endsWith('.zip')) {
                    Module._settings.file = _file;
                    App.BaseForm.BlockInteractions(Module.$upload_form);
                    App.BaseForm.BlockInteractions(Module.$upgrade_commands);
                    App.UpgradeServices.UploadUpgradeFile(_file);
                    Module.$upgrade_status.empty();
                    //_this.val(null);
                } else {
                    Module._resetFileUpload('You must use a bundle zip file following the template above.');
                }

            })
            .on('click', App.dom.for('behavior', 'uploadButton'), function(e){
                Module._resetFileUpload();
            })
            ;

        // upgrade commands
        Module.$upgrade_commands
            .on('click', App.dom.for('action', 'start-upgrade'), function(e) {
                App.BaseForm.ValidateFields(Module.$adv_settings_form, function() {
                    Module._applyForceUpgrade();
                    App.UpgradeServices.ApplyUpgrade(Module._settings);
                });
            })
            
            .on('click', App.dom.for('action', 'reset'), function(e) {
                Module._initFromQuery();
                Module._resetFileUpload();
                App.BaseForm.ReleaseInteractions(Module.$upgrade_commands_start);
            })
            
            .on('change', App.dom.for('action', 'force-upgrade'), function(e) {
               Module._applyForceUpgrade();
            })
            ;

        // upgrade status
        Module.$upgrade_status
            .on('click', App.dom.for('action', 'expand'), function(e) {
                $(this).toggleClass('open');
            });

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('upgrade:models', function(e, data) {

                if (data.models.length) {
                    if (!_.isEmpty(Module._settings.component)) {
                        data.models = [Module._settings.model];
                    }
                    Module._buildModelOptions(data, Module._settings.model);
                } else {
                    Module._resetFileUpload('The uploaded bundle does not contain a valid upgrade for the selected settings.');
                }
            })
            
            .on('upgrade:upload:start', function(e, data) {
                App.dom.window.on('beforeunload', function(e){
                    var message = 'Leaving this page will cancel your file upload and you will have to upload it again.';
                    if (e) {
                        e.returnValue = message;
                    }
                    return message;
                });

                $(".loader").show();
            })
            
            .on('upgrade:upload:progress', function(e, data) {
                data.name = Module._settings.file.name;
                var _template = App.tmpl.upgrade_file_upload.render(data);
                Module.$upload_status.html(_template);

                $(".loader").hide();
            })
            
            .on('upgrade:upload:complete', function(e, data) {
                if (!_.isEmpty(data.models)) {

                    App.BaseForm.ReleaseInteractions(Module.$upload_form);
                    App.BaseForm.ReleaseInteractions(Module.$upgrade_commands);
                    
                    Module.$upload_status.find('.base-progress-bar').hide();
                    Module.$upload_status.find('.health-icon').show();

                    if (Module._settings.model === 'All' || _.findIndex(data.models, function(val) { return val === Module._settings.model; }) !== -1) {
                        Module._settings.filemodels = data.models;
                        App.UpgradeServices.GetPlatformModels(Module._settings.platform, Module._getModelRestrictions());
                    } else {
                        Module._resetFileUpload('The uploaded bundle does not contain an upgrade for the selected model.');
                    }

                } else {
                    // error...
                }
                App.dom.window.off('beforeunload');
            })
            
            .on('upgrade:upload:error', function(e, data) {
                Module.$upload_status.find('.base-progress-bar').hide();
                App.dom.window.off('beforeunload');
                App.BaseForm.ReleaseInteractions(Module.$upload_form);
                App.BaseForm.ReleaseInteractions(Module.$upgrade_commands);
                Module._resetFileUpload('Error uploading bundle.');
            })
            
            .on('upgrade:start', function(e, data) {
                App.BaseForm.BlockInteractions(Module.$page);

                var _template = App.tmpl.upgrade_status.render(data);
                Module.$upgrade_status.html(_template);
            })
            
            .on('upgrade:start upgrade:update', function(e, data) {
                // multi
                var _multi = App.dom.has('binding', 'multi', Module.$upgrade_status);

                _multi.find('.state').text(data.state);
                _multi.find('.base-progress-bar span').css('width', data.totalProgress + '%');

                if (data.state === 'Completed' || data.state === 'Skipped') {
                    _multi.find('.health-icon').addClass('green');
                } else if (data.state === 'Failed') {
                    _multi.find('.health-icon').addClass('red');
                }

                // platforms
                $.each(data.allStatus, function(i, val) {
                    var _platform = App.dom.has('platform', val.platform, Module.$upgrade_status);

                    _platform.find('.state').text(val.status.state);
                    _platform.find('.base-progress-bar span').css('width', val.status.totalProgress + '%');

                    if (val.status.state === 'Running') {
                        _platform.find('.current').show();
                        _platform.find('.current-node').text(val.status.currentNode);
                        _platform.find('.current-type').text(val.status.nodeType);
                    } else {
                        _platform.find('.current').hide();
                        if (val.status.state === 'Completed' || val.status.state === 'Skipped') {
                            _platform.find('.health-icon').addClass('green');
                        } else if (val.status.state === 'Failed') {
                            _platform.find('.health-icon').addClass('red');
                        }
                    }

                    // nodes
                    $.each(val.status.allStatus, function(i, val) {
                        var _node = App.dom.has('store-id', val.storeId, Module.$upgrade_status);

                        _node.find('.state').text(val.status.state);
                        if (val.status.state === 'Writing' || val.status.state === 'Activating') {
                            _node.find('.base-progress-bar').addClass('process').find('span').removeAttr('style');
                        } else {
                            _node.find('.base-progress-bar').removeClass('process').find('span').css('width', val.status.progress + '%');
                        }

                        if (val.status.state === 'Uploading' || val.status.state === 'Writing' || val.status.state === 'Activating') {
                            _node.find('.current').show();
                            _node.find('.current-action').text(val.status.state.toLowerCase());
                            _node.find('.current-component').text(val.status.component);
                        } else {
                            _node.find('.current').hide();
                            if (val.status.state === 'Completed' || val.status.state === 'Skipped') {
                                _node.find('.health-icon').addClass('green');
                            } else if (val.status.state === 'Failed') {
                                _node.find('.health-icon').addClass('red');
                            }
                        }
                    });
                });
            })
            
            .on('upgrade:complete', function(e, data) {
                App.BaseForm.ReleaseInteractions(Module.$page);
            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

        App.UpgradeServices.GetStatus('check');

        App.BaseBreadcrumb.SetPath([
             { text: 'OneClick Upgrade' }
        ]);

        // advanced settings init
        Module._initFromQuery();

        App.UpgradeServices.GetBundleInfo();
    };

    App.CheckSettings = function() {
        return Module._settings;
    };


    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // TRENDS
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$page = App.dom.has('context', 'page-trends');

        // private vars

        // private functions


        Module._checkForMonitoredSensors = function() {
            
        };

    };


    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {


    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('trends:load', function(e, data) {


            })
            .on('trends:update', function(e, data) {


            })
            .on('toggle:trends-graph', function(e, data) {

                //console.log(data);

            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {


        App.BaseBreadcrumb.SetPath([
            { text: 'Analyse' }, { text: 'Trends' }
        ]);

        // Check for available monitored sensors here
        //Module._checkForMonitoredSensors();
    };




    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            Module.Start();

        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // SETTINGS
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};



    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$page = App.dom.has('context', 'page-settings');
        Module.$change_password = App.dom.has('context', 'settings-change-password', Module.$page);
        Module.$interface_prefs_form = App.dom.has('context', 'settings-interface-prefs-form', Module.$page);
        Module.$users_management = App.dom.has('context', 'settings-users-management', Module.$page);
        Module.$users_list = App.dom.has('context', 'settings-users-list', Module.$page);
        Module.$users_message = App.dom.has('context', 'settings-users-message', Module.$page);
        Module.$password_updated_message = App.dom.has('context', 'settings-password-updated-message', Module.$page);
        Module.$security_settings = App.dom.has('context', 'settings-security', Module.$page);
        Module.$security_settings = App.dom.has('context', 'settings-security', Module.$page);
        Module.$security_settings_https_details = App.dom.has('context', 'settings-security-https-details', Module.$page);
        Module.$security_settings_message = App.dom.has('context', 'settings-security-message', Module.$page);


        // vars
        Module._newImage = null;
        Module._newFavicon = null;
        Module._certificates = {
            cert: null,
            key: null,
            cacert: null,
        };
        Module._https_data = {};

        // functions
        Module._initInterfacePrefs = function() {

            var _template = App.tmpl.settings_interface_prefs_form.render(App.SecurityService.GetCachedWebsiteConfig());

            Module.$interface_prefs_form.html(_template);

        };

        Module._showUsersMessage = function(message) {
            Module.$users_message.text(message).show();

            setTimeout(function() {
                Module.$users_message.fadeOut('slow');
            }, 5000);
        };

        Module._showPasswordUpdatedMessage = function(message) {
            Module.$password_updated_message.text(message).show();

            setTimeout(function() {
                Module.$password_updated_message.fadeOut('slow');
            }, 5000);
        };

        Module._showSecurityMessage = function(message, context) {
            var field = Module.$security_settings_message.find('[data-context="' + (context === undefined ? 'none' : context) +'"]');
            field.text(message);
            Module.$security_settings_message.show();

            setTimeout(function() {
                Module.$security_settings_message.fadeOut('slow', function() { field.text('');});
            }, 5000);
        };

        Module._showErrorMessage = function(theTitle, theMessage){
            var $tmpl = $(App.tmpl.confirm_dialog.render({
                title: theTitle,
                message: theMessage
            }));
            $tmpl.on('click', App.dom.for('action', 'confirm'), function(e) {
                    e.preventDefault();
                    $.colorbox.close();
            });
            $.colorbox(kafe.ext.colorbox.getParams({
                html: $tmpl
            }));

            $(".base-button[data-action=cancel]").hide();
        };
        
        Module._showMessage = function(theTitle, theMessage, callback){
            var $tmpl = $(App.tmpl.confirm_dialog.render({
                title: theTitle,
                message: theMessage
            }));
            $tmpl
                .on('click', App.dom.for('action', 'confirm'), function(e) {
                    e.preventDefault();
                    callback();
                })
                .on('click', App.dom.for('action', 'cancel'), function(e) {
                    e.preventDefault(); 
                    $.colorbox.close();
                })
            ;
            $.colorbox(kafe.ext.colorbox.getParams({
                html: $tmpl
            }));
        };
        
        Module._enableHttpsDetails = function(enabled) {
            (enabled ? App.BaseForm.ReleaseInteractions : App.BaseForm.BlockInteractions)(Module.$security_settings_https_details);
        };
    };


    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        // change password
        Module.$change_password
            .on('click', App.dom.for('action', 'change-password'), function() {
                // validate form
                var $form = $(this).closest('form');

                App.BaseForm.ValidateFields($form, function() {
                    var data = {};
                    var pwd = $form.find('input[name="password"]').val();

                    var $user = kafe.storage.getSessionItem('security:username');

                    data.name       = $user;
                    if (pwd) { data.newPassword = pwd; }

                    App.SettingsServices.UpdatePassword(data);
                });
            });

        // interface preferences
        Module.$interface_prefs_form
            .on('change', App.dom.for('action', 'preview-image'), function(e) {
                var _this = $(this), _file = e.target.files[0];

                if (!!_file && (_file.name.endsWith('.png') || _file.name.endsWith('.jpg') || _file.name.endsWith('.gif'))) {
                    if (_file.size <= 100000) {
                        var _reader = new FileReader();
                        _reader.onload = function (e) {
                            App.dom.has('behavior', 'preview-image', Module.$interface_prefs_form).attr('src', e.target.result);
                            Module._newImage = e.target.result;
                        };
                        _reader.readAsDataURL(_file);
                        _this.removeClass('error');
                    } else {
                        Module._newImage = null;
                        _this.addClass('error');
                    }
                } else {
                    Module._newImage = null;
                    _this.addClass('error');
                }
            })
            .on('change', App.dom.for('action', 'preview-favicon'), function(e) {
                var _this = $(this), _file = e.target.files[0];

                if (!!_file && (_file.name.endsWith('.ico'))) {
                    if (_file.size <= 100000) {
                        var _reader = new FileReader();
                        _reader.onload = function (e) {
                            App.dom.has('behavior', 'preview-favicon', Module.$interface_prefs_form).attr('src', e.target.result);
                            Module._newFavicon = e.target.result;
                        };
                        _reader.readAsDataURL(_file);

                        _this.removeClass('error');
                    } else {
                        Module._newFavicon = null;
                        _this.addClass('error');
                    }
                } else {
                    Module._newFavicon = null;
                    _this.addClass('error');
                }
            })

            .on('click', App.dom.for('action', 'save'), function(e) {
                e.preventDefault();

                App.BaseForm.ValidateFields(Module.$interface_prefs_form, function() {

                    App.BaseForm.BlockInteractions(Module.$interface_prefs_form);

                    var data = App.SecurityService.GetCachedWebsiteConfig();

                    Module.$interface_prefs_form.find('.color').each(function(i, val) {
                        var _field = $(this);
                        data[_field.attr('name')] = _field.val();
                    });

                    data.companyName = Module.$interface_prefs_form.find('input[name="companyName"]').val();

                    if (!!Module._newImage) {
                        data.logo = Module._newImage;
                    }

                    if (!!Module._newFavicon) {
                        data.favicon = Module._newFavicon;
                    }


                    App.SecurityService.SaveWebsiteConfig(data);
                });
            })

            .on('click', App.dom.for('action', 'reset'), function(e) {
                e.preventDefault();
                var _colors = { baseColor: "#0063ab", lightBaseColor: "#3e8bc8", altColor: "#85B8F2", lightAltColor: "#d5e0f2", lighterAltColor: "#eaeff8" };

                Module.$interface_prefs_form.find('.color').each(function(i, val) {
                    var _field = $(this);
                    val.color.fromString(_colors[_field.attr('name')]);
                });

            })
            ;

        // users management
        Module.$users_management
            .on('click', App.dom.for('action', 'create-user'), function(e) {
                var $tmpl = $(App.tmpl.settings_users_form.render({
                    roles: App.SettingsServices.GetAvailableRoles().filter(function(role){
                               return role.key != "ipmi";
                           })
                }));

                $tmpl
                    .on('click', App.dom.for('action', 'save'), function() {

                        // validate form
                        var $form = $(this).closest('form');

                        App.BaseForm.ValidateFields($form, function() {
                            App.SettingsServices.CreateUser({
                                name:     $form.find('input[name="user"]').val(),
                                password: $form.find('input[name="password"]').val(),
                                roleKey:  $form.find('select[name="role"]').val()
                            });

                            $.colorbox.close();
                        });
                    })
                ;

                $.colorbox(kafe.ext.colorbox.getParams({
                    html: $tmpl
                }));
            })

            .on('click', App.dom.for('action', 'modify-user'), function(e) {
                e.preventDefault();

                var $user = $(this).closest(App.dom.for('user'));

                var $tmpl = $(App.tmpl.settings_users_form.render({
                    modify: true,
                    user:   $user.data('user'),
                    role:   $user.data('role'),
                    roles:  App.SettingsServices.GetAvailableRoles()
                }));

                $tmpl
                    .on('click', App.dom.for('action', 'save'), function() {

                        // validate form
                        var $form = $(this).closest('form');

                        App.BaseForm.ValidateFields($form, function() {
                            var data = {};
                            var pwd = $form.find('input[name="password"]').val();

                            data.name       = $form.data('user');
                            data.newName    = $form.find('input[name="user"]').val();
                            if (pwd) { data.newPassword = pwd; }
                            data.newRoleKey = $form.find('select[name="role"]').val();

                            $.colorbox.close();
                            
                            setTimeout(function(){App.SettingsServices.ModifyUser(data);}, 200); 
                        });
                    })
                ;

                $.colorbox(kafe.ext.colorbox.getParams({
                    html: $tmpl
                }));

            })
            .on('click', App.dom.for('action', 'delete-user'), function(e) {
                e.preventDefault();

                var user = $(this).closest(App.dom.for('user')).data('user');

				Module._showMessage("Delete User", 'Are you sure you want to delete "' + user + '" ?', function(){
                    App.SettingsServices.DeleteUser({name:user});
                });
            })
        ;

        Module.$security_settings
            .on('change', App.dom.for('field', 'keyfilename'), function(e) {
                var _this = $(this), _file = e.target.files[0];

                Module.$security_settings.find("#key-label").text(_file.name);
                Module._certificates.key = _file;
            })
            .on('change', App.dom.for('field', 'certfilename'), function(e) {
                var _this = $(this), _file = e.target.files[0];

                Module.$security_settings.find("#cert-label").text(_file.name);
                Module._certificates.cert = _file;
            })
            .on('change', App.dom.for('field', 'cacertfilename'), function(e) {
                var _this = $(this), _file = e.target.files[0];

                Module.$security_settings.find("#cacert-label").text(_file.name);
                Module._certificates.cacert = _file;
            })
            .on('click', App.dom.for('action', 'apply-security-settings'), function(e) {
                var $form = $(this).closest('form');

                e.preventDefault();
                App.BaseForm.ValidateFields($form, function() {

                    Module._https_data.enabled = $form.find('input[name="enableHTTPS"]')[0].checked;
                    Module._https_data.strictMode = $form.find('input[name="enableSSL"]')[0].checked;

                    if (_.find(Module._certificates, function(val, i) { return val !== null;}))
                        App.SettingsServices.UploadSecurityCertificates(Module._certificates);
                    else
                        App.SettingsServices.ModifyHTTPSSettings(Module._https_data);
                });
            })
            ;
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('settings:users:load', function(e, data) {
                //Module.$users_message.hide();
                Module.$users_list.html( App.tmpl.settings_users_list.render({
                    users:       data.users,
                    currentUser: App.SecurityService.GetUsername()
                }));
            })
            .on('settings:users:user_created settings:users:user_modified settings:users:user_deleted', function(e, data) {
                if (data.status !== 'Failure') {
                    App.SettingsServices.GetUsers();
                } else {
                    Module._showUsersMessage(data.message);
                }
            })
            .on('settings:users:user_modified', function(e){
                Module._showUsersMessage("User successfully modified");
             })
            .on('settings:users:user_deleted', function(e){
                $.colorbox.close();
             })
            .on('settings:users:password_updated', function(e, data) {
                if (data.status !== 'Failure') {
                    $('#ChangePassword input[type="password"]').val('');
                    Module._showPasswordUpdatedMessage("Your password has been updated.");

                } else {
                    Module._showPasswordUpdatedMessage(data.message);
                }
            })
            .on('settings:security:https_settings_loaded', function(e, data) {
                Module.$security_settings.find('#enableHTTPS')[0].checked = data.enabled.toLowerCase() === 'true';
                Module.$security_settings.find('#enableSSL')[0].checked = data.strictMode.toLowerCase() === 'true';
                Module._enableHttpsDetails(Module.$security_settings.find('#enableHTTPS')[0].checked);
            })
            .on('settings:security:https_settings_modified', function(e) {
                Module._showSecurityMessage("Security settings has been updated", "https");
                App.SettingsServices.GetHTTPSSettings();
            })
            .on('settings:security:upload:start', function(e, data) {
                App.dom.window.on('beforeunload', function(e){
                    var message = 'Leaving this page will cancel your file upload and you will have to upload it again.';
                    if (e) {
                        e.returnValue = message;
                    }
                    return message;
                });

                $(".loader").show();
            })
            .on('settings:security:upload:complete', function(e) {
                $(".loader").hide();
                Module._showSecurityMessage("Certificates has been uploaded", "certificates");
                App.dom.window.off('beforeunload');
                App.SettingsServices.ModifyHTTPSSettings(Module._https_data);
            })
            .on('settings:security:upload:error', function(e, data) {
                $(".loader").hide();
                App.dom.window.off('beforeunload');
                Module._showErrorMessage('Uploading certificates', data.textStatus + ': ' + data.errorThrown + 
                    (data.response === undefined ? '' : '<br> ' + data.response));
            })
            ;
    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {
        Module.$password_updated_message.hide();
        Module.$security_settings_message.hide();

        App.BaseBreadcrumb.SetPath([
            { text: 'Settings' }
        ]);

        Module._initInterfacePrefs();
        if(App.SecurityService.IsAdmin())
        {
            App.SettingsServices.GetUsers();
            App.SettingsServices.GetHTTPSSettings();
        }

    };




    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);


/*------------------------------------------------------------------------------------//
 // DASHBOARD
 //------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors
        Module.$page = App.dom.has('context', 'page-remote-access');
        Module.$multi = App.dom.has('behavior', 'dashboard-multi', Module.$page);
        Module.$remote_access_tree = App.dom.has('behavior', 'remote-access-tree', Module.$page);

        // private vars

    };


    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        // Multi tree
        Module.$remote_access_tree
            .on('click', App.dom.for('action', 'expand'), function(e) {
                var _current = $(this).parent();
                var _siblings = _current.siblings('.component').addBack();
                var _subnodes = _current.find('.component');

                _subnodes.removeClass('open');
                if (_subnodes.length !== 0) {
                    if (!_current.hasClass('open')) {
                        _current.addClass('open');
                    } else {
                        _current.removeClass('open');
                    }
                }
            });

        Module.$remote_access_tree
            .on('change', App.dom.for('action', 'filter-components'), function(e) {

                Module.$remote_access_tree
                    .find('.multi-tree')
                    .find('li').each(function(key, value) {
                        var _current_type = $(this).attr('data-type');
                        var _current_model = $(this).attr('data-model');
                        var _option = $('#component_types_select').find(':selected');
                        var _group = _option.closest('optgroup').attr('key');

                        if ($('#component_types_select').val() === 'all') {
                            $(this).show();

                        } else if (_current_type !== 'platform') {
                            var _parent_type = $(this).parent('ul').parent('li').attr('data-type');
                            var _parent_model = $(this).parent('ul').parent('li').attr('data-model');

                            if( _group == "type")
                            {
                                if (_current_type === $('#component_types_select').val().toLowerCase() || _parent_type === $('#component_types_select').val().toLowerCase()) {
                                    $(this).show();
                                } else {
                                    $(this).hide();
                                }
                            }
                            else if( _group == "model")
                            {
                                if (_current_model === $('#component_types_select').val() || _parent_model === $('#component_types_select').val()) {
                                    $(this).show();
                                } else {
                                    $(this).hide();
                                }
                            }
                        }
                    });

            })
			
            .on('click', App.dom.for('behavior', 'remote-access'), function(e) {
               e.preventDefault();
                var _this = $(this);
                App.MonitorServices.launchKVM(_this.data('model'), _this.data('management-ip'),
                    _this.data('ip'), _this.parents('li').last().data('kvmpassword'));
            });

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('monitor:load', function(e, data) {

                var _componentTypes = [];
                var _componentModels = [];

                // Store
                var model = new App.Models.ComponentViewModel(data);
                var _template = App.tmpl.remote_tree_branch.render(model.components, {subComponents:App.tmpl.remote_tree_branch});

                Module.$remote_access_tree
                    .find('> .header .title').text("").end()
                    .find('.multi-tree').html(_template)
                    .find('li').each(function(key, value) {
						$(this).addClass("open");
                        var _data_ip;
                        var _data_type = $(this).attr('data-type');
                        var _data_model = $(this).parent('ul').parent('li').attr('data-model');

                        // Seulement les server ont les boutons pour le Remote Access et CLI
                        if (_data_type == "server") {
							var _data_component_id = $(this).attr('data-component-id');
							var currentServer = new App.Models.ComponentViewModel(App.MonitorServices.FindComponentByPath(_data_component_id)[0]);
							
                            var _data_management_ip;
                            _data_ip = $(this).attr('data-ip');
							$(this).find(">div").prepend('<div class="remote-access-btns-right"><a class="btn-command" href="' + currentServer.cli + '" target="_blank">Web CLI</a></div>');
                            // For models other than MSP8020 check Management IP of parent Node
                            if (_data_model != "MSP8020" && _data_model != "MSP805x") {
                                _data_management_ip = $(this).parent('ul').parent('li').attr('data-management-ip');
                                $(this).find(">div").prepend('<div class="remote-access-btns-right"><a class="btn-remote-access" data-model="' + _data_model + '" data-behavior="remote-access" data-management-ip="' + _data_management_ip + '">KVM</a></div>');

                                // For MSP8020, the IP must be configured to work. Also uses the Management IP of parent Node
                            } else if(_data_model == "MSP8020") {
                                _data_management_ip = $(this).parent('ul').parent('li').attr('data-management-ip');
                                $(this).find(">div").prepend('<div class="remote-access-btns-right"><a class="btn-remote-access" data-model="' + _data_model + '" data-behavior="remote-access" data-management-ip="' + _data_management_ip + '" data-ip="' + _data_ip + '" data-kvmpassword="">KVM</a></div>');
                            }

                        } else if(_data_type == "switch"){
                            _data_ip = $(this).attr('data-ip');

                            if( _data_model.substr(0,3) == "MSH" ){

                                $(this).find(">div").prepend('<div class="remote-access-btns-right"><a href="http://' + _data_ip + '" target="_blank" class="btn-remote-access">Configuration Page</a></div>');
                            }
                        } else if( _data_type == "platform") {
                            var platformNumber = $(this).attr('data-component-id').split('-')[1];
                            App.MonitorServices.GetKVMPassword(platformNumber);
                        }

                        var _current_type = $(this).attr('data-type').charAt(0).toUpperCase() +$(this).attr('data-type').slice(1);
                        var _current_model = $(this).attr('data-model');

                        if (_current_type !== 'Platform' && _current_type !== 'Psu-group' ) {
                            var _parent_type = $(this).parent('ul').parent('li').attr('data-type');
                            var _parent_model = $(this).parent('ul').parent('li').attr('data-model');

                            if (_current_type == "Hubnode") {
                                _current_type = "HubNode";
                            }

                            if (_parent_type === 'platform' && $.inArray(_current_type, _componentTypes) === -1) {
                                _componentTypes.push(_current_type);
                            }

                            if (_parent_type === 'platform' && $.inArray(_current_model, _componentModels) === -1) {
                                _componentModels.push(_current_model);
                            }
                        }
                    })
                    .find('[data-type="psu-group"]').each(function() {
                        $(this).remove();
                    })
                ;

                $.each(_componentTypes, function(key, value) {
                    $("#type_option_group").append('<option value="' + value + '">' + value + '</option>');
                });
                $.each(_componentModels, function(key, value) {
                    $("#model_option_group").append('<option value="' + value + '">' + value + '</option>');
                });
                $('#component_types_select').trigger("chosen:updated");
            })
            .on('KVMPassword:received', function(e, data) {
                Module.$remote_access_tree
                    .find('li[data-component-id="platform-' + data.platform + '"]')
                    .attr('data-kvmpassword', data.password);
            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

        App.BaseBreadcrumb.SetPath([
            { text: 'Dashboard' }
        ]);
        App.BaseBreadcrumb.SetPath([
            { text: 'Remote Access' }
        ]);
    };




    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            Module.Start();
        }
    });

})(window.kafe, window.kontron);

/*------------------------------------------------------------------------------------//
 // NETWORK-CONFIGURATION
 //------------------------------------------------------------------------------------*/



(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
        ;

    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        /*-- Private variables --*/
        Module._currentPlatform = 0;
        Module._ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        Module._vlanformat = /^([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-3][0-9][0-9][0-9]|[4][0][0-8][0-9]|[4][0][9][0-4])$/;
        Module._cidrformat = /^([1-9]|[1-2][0-9]|[3][0-2])$/;
        Module._savedTempVal = null;

        /*-- jQuery objects --*/
        Module.$page = App.dom.has('context', 'page-network-configuration');
        Module.$platforms_view = App.dom.has('behavior', 'network-configuration-platforms-view', Module.$page);
        Module.$page_output = App.dom.has('behavior', 'page-output', Module.$page);
        Module.$network_message = App.dom.has('behavior', 'ipmi-over-lan-update-message', Module.$page);
        Module.$sharedip_message = App.dom.has('behavior', 'system-monitor-update-message', Module.$page);
        Module.$ipmi_table = App.dom.has('class', 'ipmi-over-lan', Module.$page);

        /*-- Breadcrumb related functions --*/
        Module._setBreadcrumbPath = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var pathList = [{ text: 'Network Configuration', url: 'network-configuration.html' }], parentPath = 'network-configuration.html#!';

            $.each(App.Hash.Path(), function(i, val) {
                data = _.find(data.components, function(component) {
                    var _component = new App.Models.ComponentViewModel(component);
                    return _component.id === val;
                });
                if( data !== undefined){
                    var component = new App.Models.ComponentViewModel(data);

                    parentPath += '/' + component.id;
                    pathList.push({ text: component.description.name, url: parentPath });
                    Module._currentPlatform = parseInt(component.description.number, 10);
                }
            });

            App.BaseBreadcrumb.SetPath(pathList);
        };

        /*-- Platform view related functions --*/
        Module._buildSELPlatformsView = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var model = new App.Models.ComponentViewModel(data);
            var _template = App.tmpl.network_configuration_platforms_view.render(model);

            Module.$platforms_view
                .find('> .header .title').text(model.description.name).end()
                .find('.platforms-view').html(_template);

            if (model.status) {
                Module.$platforms_view.find('> .header .health-icon').addClass(model.status.health);
            }

            App.dom.window.trigger('hashchange');
        };

        Module._updatePlatformsStatus = function (model) {
            $.each(model.components, function(i, val) {

                var _platformId = val.id;
                var _platform = App.dom.has('id', _platformId, Module.$platforms_view);

                _platform.find('> .header .health-icon').removeClass('red yellow green').addClass(val.status.health);
            });
        };

        Module._checkPlatforms =  function (model) {
            // Check for removed platforms
            $('[data-type="platform"]').each(function(i, platform) {
                var _platformObject = $.grep(model.components, function(val) {
                    return val.id === $(platform).data('id');
                });
                _platformObject = _platformObject[0];

                if (!_platformObject || _platformObject.length === 0) {
                    Module._buildSELPlatformsView();
                    return;
                }
            });

            // Check for added platforms
            $.each(model.components, function(i, val) {
                if ($('[data-id="' + val.id + '"]').length === 0) {
                    Module._buildSELPlatformsView();
                    return;
                }
            });
        };

        /*-- Network configuration view related functions --*/
        Module._buildConfigurationView = function() {
            var data = App.MonitorServices.GetPlatformsStoreCache();
            var model = new App.Models.ComponentViewModel(data);
            var _template = App.tmpl.network_configuration_view.render({
                    model: model,
                    isRoot: App.Hash.IsRoot(),
                    platform: Module._currentPlatform
                }, {
                    sharedIpRow: App.tmpl.network_configuration_shared_ip_row,
                    ipmiOverLanRow: App.tmpl.network_configuration_ipmi_over_lan_row
                });

            Module.$page_output.html(_template);

            //Request data
            $.each(model.components, function(i, val) {
                var _platform = parseInt(val.description.number, 10);
                if(App.Hash.IsRoot() || Module._currentPlatform === _platform)
                    App.NetworkConfigurationServices.GetSharedIp(_platform);
                    $.each(val.components, function(i, val) {
                        var _node = parseInt(val.description.number, 10);
                        if (val.type == "node" || val.type == "hubnode")
                            App.NetworkConfigurationServices.GetNodeMngmtNetwork(_platform, _node);
                    });
            });
        };

        Module._updateSharedIp = function(data) {
            if (data.data === undefined)
                return;
            var _row = Module.$page_output.find('tr[data-platform="' + data.platform + '"][data-context="system-monitor"]');

            if (_row[0] !== undefined) {
                _row.find('.system-monitor-ip')[0].value = data.data.ip;
                _row.find('.system-monitor-netmask')[0].value = data.data.netmask;
                _row.find('.loader').hide();
                _row.find('.health-icon').hide();
            }
        };

        Module._updateNodeIp = function(data) {
            if (data.data === undefined)
                return;
            var _row = Module.$page_output.find('tr[data-platform="' + data.platform + '"][data-node="' + data.node + '"]');

            if (_row[0] !== undefined) {
                _row.find('.ipmi-over-lan-ip')[0].value = data.data.ip;
                _row.find('.ipmi-over-lan-ip')[1].innerHTML = data.data.ip;
                _row.find('.ipmi-over-lan-netmask')[0].value = data.data.netmask;
                _row.find('.ipmi-over-lan-netmask')[1].innerHTML = data.data.netmask;
                _row.find('.ipmi-over-lan-gateway')[0].value = data.data.gateway;
                _row.find('.ipmi-over-lan-gateway')[1].innerHTML = data.data.gateway;
                _row.find('.ipmi-over-lan-vlan')[0].value = data.data.vlan;
                _row.find('[data-context="ipmi-over-lan-ipsource"]').trigger('change')[0].value =  data.data.ipsource;
                _row.find('.loader').hide();
                _row.find('.health-icon').hide();
           }
        };

        Module._saveSharedIp = function() {
            $.each(Module.$page_output.find('.system-monitor-table').find('tr'), function(i, val) {
                var _params = {
                    ip: $(val).find('.system-monitor-ip')[0].value,
                    netmask: $(val).find('.system-monitor-netmask')[0].value
                };
                var _platform = parseInt(val.getAttribute('data-platform'), 10);
                var _row = Module.$page_output.find('tr[data-platform="' + _platform + '"][data-context="system-monitor"]');

                if (_row[0] !== undefined) {
                    _row.find('.loader').show();
                    _row.find('.health-icon').hide();
                }
                App.NetworkConfigurationServices.SetSharedIp(_platform, _params);
            });
        };

        Module._saveNodeIp = function() {
            $.each(Module.$page_output.find('.ipmi-over-lan-table-body').find('tr'), function(i, val) {
                var params = {
                    ip: $(val).find('.ipmi-over-lan-ip')[0].value,
                    netmask: $(val).find('.ipmi-over-lan-netmask')[0].value,
                    gateway: $(val).find('.ipmi-over-lan-gateway')[0].value,
                    vlan: $(val).find('.ipmi-over-lan-vlan')[0].value,
                    ipsource: $(val).find('[data-context="ipmi-over-lan-ipsource"]')[0].value
                };
                var _platform = parseInt(val.getAttribute('data-platform'), 10);
                var _node = parseInt(val.getAttribute('data-node'), 10);
                var _row = Module.$page_output.find('tr[data-platform="' + _platform + '"][data-node="' + _node + '"]');

                if (_row[0] !== undefined) {
                    _row.find('.loader').show();
                    _row.find('.health-icon').hide();
                }
                 App.NetworkConfigurationServices.SetNodeMngmtNetwork(_platform, _node, params);
            });
        };

        Module._sharedIpError = function(data) {
            var _row = Module.$page_output.find('tr[data-platform="' + data.platform + '"][data-context="system-monitor"]');
            if (_row[0] !== undefined) {
                _row.find('.loader').hide();
                _row.find('.health-icon').show();
            }
        };

        Module._nodeIpError = function(data) {
            var _row = Module.$page_output.find('tr[data-platform="' + data.platform + '"][data-node="' + data.node + '"]');
            if (_row[0] !== undefined) {
                _row.find('.loader').hide();
                _row.find('.health-icon').show();
            }
        };

        /*-- Helpers functions --*/
        Module._getPlatform = function() {
            // Use one from hash path
            var platform_path = _.find(App.Hash.Path(), function(val, i) {
                    return val.indexOf("platform") >= 0; });
            var platform = platform_path === undefined ? -1 :
                    platform_path.substring(platform_path.indexOf('-') + 1);
            // Check the platform is exist
            var data = App.MonitorServices.GetPlatformsStoreCache();

            if (data === undefined) {
                console.log("No Store cache, Hash is " + App.Hash.Path());
                window.location = "index.html";
                return;
            }
            var model = new App.Models.ComponentViewModel(data);

            var _platformObject = $.grep(model.components, function(val) {
                    return val.id === "platform-" + platform;
                });
            _platformObject = _platformObject[0];

            if (!_platformObject || _platformObject.length === 0)
                return model.components[0] ? parseInt(model.components[0].description.number, 10) : -1;
            else
                return parseInt(platform, 10);
        };
        Module._showNetworkMessage = function(message) {
            document.getElementById("networkMessage").innerHTML = message;
            document.getElementById("networkMessage").style.display = "block";

            setTimeout(function() {
                document.getElementById("networkMessage").style.display = "none";
            }, 5000);
        };
        Module._showSharedIPMessage = function(message) {
            document.getElementById("sharedIPmessage").innerHTML = message;
            document.getElementById("sharedIPmessage").style.display = "block";

            setTimeout(function() {
                document.getElementById("sharedIPmessage").style.display = "none";
            }, 5000);
        };
    };

    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        Module.$platforms_view
            .on('click', App.dom.for('action', 'select-platform'), function(e) {
                e.stopPropagation();
                App.dom.window.trigger('hashchange');
            })
            ;

        Module.$page_output
            .on('click', App.dom.for('action', 'save-system-monitor-ip'), function(e) {
                e.stopPropagation();
                
                Module._saveSharedIp();
            })
            .on('click', App.dom.for('action', 'save-ipmi-over-lan'), function(e) {
                e.stopPropagation();
                Module._saveNodeIp();
            })
            .on('change', App.dom.for('action', 'common-switch-ipsource'), function(e) {
                e.stopPropagation();

                if (e.target.value == 'dhcp')
                    $.each(Module.$page_output.find('[data-context="ipmi-over-lan-ipsource"]'), function(i, val) {
                        val.value = 'dhcp';
                        $(val).trigger('change');
                    });
            })
            .on('change', App.dom.for('action', 'switch-ipsource'), function(e) {
                var row = $(e.target).closest('tr');
                var val = e.target.value;

                e.stopPropagation();
                if (val === 'static') {
                    $('#ipmi-over-lan-manual-radio')[0].checked = 'checked';
                }
                row.find('input.ipmi-over-lan-ip').prop('type', (val !== 'static'?"hidden":"text"));
                row.find('label.ipmi-over-lan-ip')[0].style.display = (val !== 'static'?"block":"none");
                row.find('input.ipmi-over-lan-gateway').prop('type', (val !== 'static'?"hidden":"text"));
                row.find('label.ipmi-over-lan-gateway')[0].style.display = (val !== 'static'?"block":"none");
                row.find('input.ipmi-over-lan-netmask').prop('type', (val !== 'static'?"hidden":"text"));
                row.find('label.ipmi-over-lan-netmask')[0].style.display = (val !== 'static'?"block":"none");
            })
            .on('focus', App.dom.for('action', 'validateIP'), function(e){
                Module._savedTempVal = e.target.value;
            })
            .on('focus', App.dom.for('action', 'validateVLAN'), function(e){
                Module._savedTempVal = e.target.value;
            })
            .on('focus', App.dom.for('action', 'validateCIDR'), function(e){
                Module._savedTempVal = e.target.value;
            })
            .on('focus', App.dom.for('action', 'validateSharedIP'), function(e){
                Module._savedTempVal = e.target.value;
            })
            .on('change', App.dom.for('action', 'validateCIDR'), function(e){
                
                if(!(e.target.value.match(Module._cidrformat)) && !(e.target.value.match(Module._ipformat)))  
                {
                    e.target.value = Module._savedTempVal;
                    Module._showSharedIPMessage("This is not a valid netmask format. Field was reset to original value. Supports CIDR or IP formats.");
                    e.target.focus();
                }
            })
            .on('change', App.dom.for('action', 'validateIP'), function(e){
                
                if(!(e.target.value.match(Module._ipformat)))  
                {
                    e.target.value = Module._savedTempVal;
                    Module._showNetworkMessage("This is not a valid IP format. Field was reset to original value.");
                    e.target.focus();
                }
            })
            .on('change', App.dom.for('action', 'validateVLAN'), function(e){
                
                if(!(e.target.value.match(Module._vlanformat)))  
                {
                    e.target.value = Module._savedTempVal;
                    Module._showNetworkMessage("This is not a valid VLAN format. Field was reset to original value.");
                    e.target.focus();
                }
            })
            .on('change', App.dom.for('action', 'validateSharedIP'), function(e){
                
                if(!(e.target.value.match(Module._ipformat)))
                {
                    e.target.value = Module._savedTempVal;
                    Module._showSharedIPMessage("This is not a valid IP format. Field was reset to original value.");
                    e.target.focus();
                }
            })
            ;
    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {

        App.dom.document
            .on('monitor:update', function(e, data) {
                var model = new App.Models.ComponentViewModel(data);

                Module._checkPlatforms(model);
                Module._updatePlatformsStatus(model);
            })
            .on('network-configuration:shared-ip:loaded', function(e, data) {
                Module._updateSharedIp(data);
            })
            .on('network-configuration:shared-ip:updated', function(e, data) {
                App.NetworkConfigurationServices.GetSharedIp(data.platform);
            })
            .on('network-configuration:shared-ip:error', function(e, data) {
                Module._sharedIpError(data);
            })
            .on('network-configuration:node-info:loaded', function(e, data) {
                Module._updateNodeIp(data);
            })
            .on('network-configuration:node-info:updated', function(e, data) {
                App.NetworkConfigurationServices.GetNodeMngmtNetwork(data.platform, data.node);
            })
            .on('network-configuration:node-info:error', function(e, data) {
                Module._nodeIpError(data);
            })
            ;

        // multi navigation
        App.dom.window
            .on('hashchange', function() {
               if(App.Hash.IsRoot())
                    window.location = "network-configuration.html#!/platform-"+Module._getPlatform();
                Module._setBreadcrumbPath();
                Module._buildConfigurationView();
            });

    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {
        App.MonitorServices.GetPlatformsStore(true);
        if(App.Hash.IsRoot())
            window.location = "network-configuration.html#!/platform-"+Module._getPlatform();
        Module._buildConfigurationView();
        Module._buildSELPlatformsView();
    };

    $(function() {
        Module.Cache();
        if (App.Utils.Exists(Module.$page)) {
            Module.Bind();
            Module.Listen();
            if (App.SecurityService.IsAuthenticated())
                Module.Start();
        }
    });

})(window.kafe, window.kontron);


/*------------------------------------------------------------------------------------//
// APP-START
//------------------------------------------------------------------------------------*/

(function(kafe, App, undefined){

    var
        $ = kafe.dependencies.jQuery,
        _ = kafe.dependencies.LoDash,
        Modernizr = kafe.dependencies.Modernizr
    ;
	
    var Module = {};


    /*- Cache data -------------------------------------------------------------------*/
    Module.Cache = function() {

        // selectors

        // private functions

    };


    /*- Bind events ------------------------------------------------------------------*/
    Module.Bind = function() {

        App.dom.body

        // fonts loaded
        .on('WebFont:active', function() {

        })

        // external links
        .on('click', 'a[data-external="true"]', function() {
            $(this).attr('target', '_blank');
        })

        // anchors
        .on('click', 'a[href^="#"][href!="#"]', function(e) {
            e.preventDefault();
            $.scrollTo($(this).attr('href'), (Modernizr.touch) ? 0 : 500, {offset:{top:-15}});
        });

    };


    /*- Listen for triggers ----------------------------------------------------------*/
    Module.Listen = function() {


    };


    /*- To execute on start ----------------------------------------------------------*/
    Module.Start = function() {

        // web font loader
        /*
        WebFont.load({
                custom:       { families: ['kontron-icons'] },
                loading:      function() { App.dom.body.trigger('WebFont:loading'); },
                active:       function() { App.dom.body.trigger('WebFont:active'); },
                inactive:     function() { App.dom.body.trigger('WebFont:inactive'); }
        });
        */

        App.SecurityService.ApplyWebsiteConfig();

        if (!App.SecurityService.IsAuthenticated()) {                    
            App.SecurityService.PromptLogin();
        } else {			
            App.SecurityService.ApplyPermissions();
        }
    };

    $(function() {
        Module.Cache();
        Module.Bind();
        Module.Listen();
        Module.Start();
    });

})(window.kafe, window.kontron);



